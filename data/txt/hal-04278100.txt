Tractable Orders for Direct Access to Ranked Answers
of Conjunctive Queries
Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld,

Mirek Riedewald

To cite this version:

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, Mirek Riedewald.
Tractable Orders for Direct Access to Ranked Answers of Conjunctive Queries. ACM Transactions on
Database Systems, 2023, 48 (1), pp.1-45. Ôøø10.1145/3578517Ôøø. Ôøøhal-04278100Ôøø

HAL Id: hal-04278100

https://inria.hal.science/hal-04278100

Submitted on 9 Nov 2023

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L‚Äôarchive ouverte pluridisciplinaire HAL, est
destin√©e au d√©p√¥t et √† la diffusion de documents
scientifiques de niveau recherche, publi√©s ou non,
√©manant des √©tablissements d‚Äôenseignement et de
recherche fran√ßais ou √©trangers, des laboratoires
publics ou priv√©s.

Distributed under a Creative Commons Attribution 4.0 International License

Tractable Orders for Direct Access to Ranked Answers of
Conjunctive Queries

NOFAR CARMELI‚àó, Technion, Israel and DI ENS, ENS, CNRS, PSL University, Inria, France
NIKOLAOS TZIAVELIS‚àó, Northeastern University, USA
WOLFGANG GATTERBAUER, Northeastern University, USA
BENNY KIMELFELD, Technion - Israel Institute of Technology, Israel
MIREK RIEDEWALD, Northeastern University, USA

We study the question of when we can provide direct access to the ùëò-th answer to a Conjunctive Query (CQ)
according to a specified order over the answers in time logarithmic in the size of the database, following
a preprocessing step that constructs a data structure in time quasilinear in database size. Specifically, we
embark on the challenge of identifying the tractable answer orderings, that is, those orders that allow for such
complexity guarantees. To better understand the computational challenge at hand, we also investigate the
more modest task of providing access to only a single answer (i.e., finding the answer at a given position), a
task that we refer to as the selection problem, and ask when it can be performed in quasilinear time. We also
explore the question of when selection is indeed easier than ranked direct access.

We begin with lexicographic orders. For each of the two problems, we give a decidable characterization
(under conventional complexity assumptions) of the class of tractable lexicographic orders for every CQ
without self-joins. We then continue to the more general orders by the sum of attribute weights and establish
the corresponding decidable characterizations, for each of the two problems, of the tractable CQs without
self-joins. Finally, we explore the question of when the satisfaction of Functional Dependencies (FDs) can be
utilized for tractability, and establish the corresponding generalizations of our characterizations for every set
of unary FDs.

CCS Concepts: ‚Ä¢ Theory of computation ‚Üí Database theory; Complexity classes; Database query languages
(principles); Database query processing and optimization (theory).

Additional Key Words and Phrases: conjunctive queries, direct access, ranking function, answer orderings,
query classification

1 INTRODUCTION
When can we support direct access to a ranked list of answers to a database query without (and
considerably faster than) materializing all answers? To illustrate the concrete instantiation of this
question, assume the following simple relational schema for information about activities of residents
in the context of pandemic spread:

Visits(person, age, city)

Cases(city, date, #cases)

Here, the relation Visits mentions, for each person in the database, the cities that the person visits
regularly (e.g., for work and for visiting relatives) and the age of the person (for risk assessment);
the relation Cases specifies the number of new infection cases in specific cities at specific dates
(a measure that is commonly used for spread assessment albeit being sensitive to the amount of
testing).

‚àóBoth authors contributed equally to the paper.

Authors‚Äô addresses: Nofar Carmeli, Technion, Israel and DI ENS, ENS, CNRS, PSL University, Inria, France, Nofar.Carmeli@
inria.fr; Nikolaos Tziavelis, Northeastern University, USA, tziavelis.n@northeastern.edu; Wolfgang Gatterbauer, Northeast-
ern University, USA, w.gatterbauer@northeastern.edu; Benny Kimelfeld, Technion - Israel Institute of Technology, Israel,
bennyk@cs.technion.ac.il; Mirek Riedewald, Northeastern University, USA, m.riedewald@northeastern.edu.

2023. XXXX-XXXX/2023/11-ART $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

, Vol. 1, No. 1, Article . Publication date: November 2023.

2

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

Suppose that we wish to efficiently compute the natural join Visits (cid:90) Cases based on equality
of the city attribute, so that we have all combinations of people (with their age), the cities they
regularly visit, and the city‚Äôs daily new cases. For example,

(Anna, 72, Boston, 12/7/2020, 179) .

While the number of such answers could be quadratic in the size of the database, the seminal work
of Bagan, Durand, and Grandjean [4] has established that the answers can be enumerated with a
constant delay between consecutive answers, after a linear-time preprocessing phase. This is due
to the fact that this join is a special case of a free-connex Conjunctive Query (CQ). In the case of
CQs without self-joins, being free-connex is a sufficient and necessary condition for such efficient
evaluation [4, 11]. The necessity requires conventional assumptions in fine-grained complexity1
and it holds even if we multiply the preprocessing time and delay by a logarithmic factor in the
size of the database.2

To realize the constant (or logarithmic) delay, the preprocessing phase builds a data structure
that enables efficient iteration over the answers in the enumeration phase. Brault-Baron [11]
showed that in the quasilinear-time preprocessing phase, we can build a structure with better
guarantees: not only log-delay enumeration, but even log-time direct access: a structure that, given
ùëò, allows to directly retrieve the ùëò th answer in the enumeration without needing to enumerate the
preceding ùëò ‚àí 1 answers first.3 Later, Carmeli et al. [15] showed how such a structure can be used
for enumerating answers in a random order (random permutation)4 with the statistical guarantee
that the order is uniformly distributed. In particular, in the above example we can enumerate the
answers of Visits (cid:90) Cases in a provably uniform random permutation (hence, ensuring statistical
validity of each prefix) with logarithmic delay, after a quasilinear-time preprocessing phase. Their
direct-access structure also allows for inverted access: given an answer, return the index ùëò of that
answer (or determine that it is not a valid answer). Recently, Keppeler [32] proposed another
direct-access structure with the additional ability to allow efficient database updates, but at the
cost of only supporting a limited subset of free-connex CQs.

All known direct-access structures [11, 15, 32] allow the answers to be sorted by some lexico-
graphic order (even if the formal results do not explicitly state it). For instance, in our example
of Visits (cid:90) Cases, the structure could be such that the tuples are enumerated in the (descending
or ascending) order of #cases and then by date, or in the order of city and then by age. Hence,
in logarithmic time we can evaluate quantile queries, namely find the ùëò th answer in order, and
determine the position of a tuple inside the sorted list. From this we can also conclude (fairly easily)
that we can enumerate the answers ordered by age where ties are broken randomly, again provably
uniformly. Carmeli et al. [15] have also shown how the order of the answers can be useful for
generalizing direct-access algorithms from CQs to UCQs. Notice that direct access to the sorted
list of answers is a stronger requirement than ranked enumeration that has been studied in recent
work [10, 16, 41, 42, 44, 46].

Yet, the choice of lexicographic order is an artefact of the structure construction, e.g., the
elimination order [11], the join tree [15], or the ùëû-tree [8]. If the application desires a specific
lexicographic order, we can only hope to find a matching construction. However, this is not
necessarily possible. For example, could we construct in quasilinear time a direct-access structure

1For the sake of simplicity, throughout this section we make all of these complexity assumptions. We give their formal
statements in Section 2.4.
2We refer to those as quasilinear preprocessing and logarithmic delay, respectively.
3‚ÄúDirect access‚Äù is also widely known as ‚Äúrandom access.‚Äù We prefer to use ‚Äúdirect access‚Äù to avoid confusion with the
problem of answering ‚Äúin random order.‚Äù
4Not to be confused with ‚Äúrandom access.‚Äù

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

3

for Visits (cid:90) Cases ordered by #cases and then by age? Interestingly, we will show that the answer
is negative: it is impossible to build in quasilinear time a direct-access structure with logarithmic
access time for that lexicographic order.

Getting back to the question posed at the beginning of this section, in this paper we embark on
the challenge of identifying, for each CQ, the orders that allow for efficiently constructing a direct-
access structure. We adopt the tractability yardstick of quasilinear construction (preprocessing)
time and logarithmic access time. In addition, we focus on two types of orders: lexicographic orders,
and scoring by the sum of attribute weights.

As aforesaid, some of the orders that we study are intractable. To understand the root cause of
the hardness, we consider another task that allows us to narrow our question to a considerably
weaker guarantee. Our notion of tractability so far requires the construction of a structure in
quasilinear time that allows direct access in logarithmic time. In particular, if our goal is to compute
just a single quantile, say the ùëò th answer, then it should take quasilinear time. Computing a single
quantile is known as the selection problem [9]. The question we ask is to what extent selection is a
weaker requirement than direct access In other words, do we get more tractable cases if we lift the
requirement to construct a data structure and instead ask for quasilinear time per access?

In some situations, we might be able to avoid hardness through a more careful inspection of the
integrity constraints that the database guarantees on the source relations. For example, it turns out
that we can construct in quasilinear time a direct-access structure for Visits (cid:90) Cases ordered by
#cases and then by age if we assume that each city occurs at most once in Cases (i.e., for each city
we have a report for a single day). Hence, it may be the case that an ordered CQ is classified as
intractable (with respect to the guarantees that we seek), but it becomes tractable if we are allowed
to assume that the input database satisfies some integrity constraints such as key constraints or
more general Functional Dependencies (FDs). Moreover, FDs are so common that ignoring them
implies that we often miss opportunities of fast algorithms. This angle arises regardless of answer
ordering, and indeed, Carmeli and Kr√∂ll [12] showed precisely how the class of (self-join-free)
CQs with tractable enumeration extends in the presence of FDs. Accordingly, we extend our study
on ranked direct access and the selection problem to incorporate FDs, and aim to classify every
combination of (a) CQ, (b) order over the answers, and (c) set of FDs.

Contributions. Before we describe the results that we establish in this manuscript, let us illustrate

them on an example.

Example 1.1. Figure 2 depicts an example database and different orderings of the answers to the
2-path CQ ùëÑ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß). The question we ask is whether the median (e.g., the 3rd
answer in the example) or in general, the answer in any index can be computed efficiently as the
database size ùëõ grows. Tractable direct access requires O (polylog ùëõ) per access after O (ùëõ polylog ùëõ)
preprocessing, while tractable selection requires O (ùëõ polylog ùëõ) for a single access. We compare
the impact of different orders, projections, and FDs on the example 2-path CQ.

‚Ä¢ LEX ‚ü®ùë•, ùë¶, ùëß‚ü©: Direct access is tractable.
‚Ä¢ LEX ‚ü®ùë•, ùëß, ùë¶‚ü©: Direct access is intractable because the lexicographic order ‚Äúdoes not agree‚Äù
with the query structure, which we capture through the concept of a disruptive trio that we
introduce later on. However, selection is tractable.

‚Ä¢ LEX ‚ü®ùë•, ùëß‚ü©: Direct access is intractable because the variables in the partial lexicographic
order are not ‚Äúconnected‚Äù in a particular way. We will define this as not being ùêø-connex for
a lexicographic order ùêø. However, selection is again tractable.

‚Ä¢ LEX ‚ü®ùë•, ùëß‚ü© and ùë¶ projected away: Selection is now intractable because the query is not

free-connex.

, Vol. 1, No. 1, Article . Publication date: November 2023.

4

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

Fig. 1. Overview of our results for lexicographic (LEX) orders and sum-of-weights (SUM) orders. CQs without
self-joins (SJ-free) are classified based on the tractability of the direct access problem (left) and the selection
problem (right). The ùêø-connex property applies only to lexicographic orders ùêø (the precise definitions are
given in Section 2). All tractable cases extend to CQs with self-joins. The sizes of the ellipses are arbitrary and
do not correspond to the size or importance of the classes.

R ùë• ùë¶
1 5
1 2
6 2

S ùë¶ ùëß
5 3
5 4
5 6
2 8

Q ùë• ùë¶ ùëß
#1 1 2 8
#2 1 5 3
#3 1 5 4
#4 1 5 6
#5 6 2 8

Q ùë• ùëß ùë¶
#1 1 3 5
#2 1 4 5
#3 1 6 5
#4 1 8 2
#5 6 8 2

Q ùë• ùë¶ ùëß ùë• + ùë¶ + ùëß
#1 1 5 3
#2 1 5 4
#3 1 2 8
#4 1 5 6
#5 6 2 8

9
10
11
12
16

(a) Example Database.

(b) LEX ordering ‚ü®ùë•, ùë¶, ùëß‚ü©.

(c) LEX ordering ‚ü®ùë•, ùëß, ùë¶‚ü©

(d) SUM ordering.

Fig. 2. Example 1.1: An example input database (a) and possible orderings of the answers to the query
ùëÑ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß). The orderings in (b) and (c) use two different lexicographic orders (LEX), while the
ordering in (d) uses a sum-of-weights order where the weights are assumed to be identical to the attribute
values.

‚Ä¢ LEX ‚ü®ùë•, ùëß, ùë¶‚ü©, with the FD ùëÖ : ùë¶ ‚Üí ùë• or the FD ùëÜ : ùë¶ ‚Üí ùëß: Direct access is tractable as a

consequence of earlier work on enumeration with FDs [12].

‚Ä¢ LEX ‚ü®ùë•, ùëß, ùë¶‚ü©, with the FD ùëÖ : ùë• ‚Üí ùë¶: Direct access is tractable with the techniques that we
develop in this paper. Intuitively, the FD implies that the order is equivalent to the tractable
order ‚ü®ùë•, ùë¶, ùëß‚ü©.

‚Ä¢ LEX ‚ü®ùë•, ùëß, ùë¶‚ü©, with the FD ùëÜ : ùëß ‚Üí ùë¶: Direct access is intractable since the FD does not help

in this case.

‚Ä¢ SUM ùë• + ùë¶ + ùëß: Direct access is intractable because it would allow us to solve the 3SUM

problem in subquadratic time, yet selection is tractable.

‚Ä¢ SUM ùë• + ùë¶ and ùëß projected away: Direct access is tractable because all the free variables
are contained in ùëÖ. This means that we can produce the sorted list of answers during
preprocessing.

‚Ä¢ SUM ùë• +ùëß and ùë¶ projected away: Selection is intractable because the query is not free-connex.

, Vol. 1, No. 1, Article . Publication date: November 2023.

SelectionDirect AccessAcyclicSelf-join-freeCQsFree ‚äÜ1 atomL-connexand no disruptive trioNot L-connexor disruptive trioFree-connexTractable‚â°<ùëõpolylogùëõ,polylogùëõ>Both intractableLEX tractable, SUM intractableBoth tractableMaximal free hyperdges‚â§2AcyclicSelf-join-freeCQsFree ‚äÜ1 atomFree-connexTractable‚â°<1,ùëõpolylogùëõ>Tractable Orders for Direct Access to Ranked Answers of CQs

5

(1) Our first main result is an algorithm for direct access for lexicographic orders, including ones
that are not achievable by past structures. We further show that within the class of CQs without
self-joins, our algorithm covers all the tractable cases (in the sense adopted here), and we establish
a decidable and easy-to-test classification of the lexicographic orders over the free variables into
tractable and intractable ones. For instance, in the case of Visits (cid:90) Cases the lexicographic order
(#cases, age, city, date, person) is intractable. It is classified as such because #cases and age are
non-neighbours (i.e., do not co-occur in the same atom), but city, which comes after #cases and
age in the order, is a neighbour of both. This is what we call a disruptive trio. The lexicographic
order (#cases, age) is also intractable since the query Visits (cid:90) Cases is not {#cases, age}-connex
(a similar condition to being free-connex, but for the subset of the variables that appear in the
lexicographic order instead of the free ones). In contrast, the lexicographic order (#cases, city, age)
is tractable. We also show that within the tractable side, the structure we construct allows for
inverted access in constant time.

Our classification is proved in two steps. We begin by considering the complete lexicographic
orders (that involve all free variables). We show that for free-connex CQs without self-joins,
the absence of a disruptive trio is a sufficient and necessary condition for tractability. We then
generalize to partial lexicographic orders ùêø where the ordering is determined only by a subset of the
free variables. There, the condition is that there is no disruptive trio and that the query is ùêø-connex.
Interestingly, it turns out that a partial lexicographic order is tractable if and only if it is the prefix
of a complete tractable lexicographic order.

(2) Next, we study the selection problem for lexicographic orders and show that being free-connex
is a sufficient and necessary condition for a linear-time solution in the case of CQs without self-joins.
In particular, there are ordered queries with tractable selection but intractable direct access, namely
free-connex CQs without self-joins where we have a disruptive trio or lack the property of being
ùêø-connex.

(3) A lexicographic order is a special case of an ordering by the sum of attribute weights, where
every database value is mapped to some weight. Hence, a natural question is which CQs have a
tractable direct access by the order of sum. For example, what about Visits (cid:90) Cases with the order
(ùõº¬∑#cases + ùõΩ¬∑age)? It is easy to see that this order is intractable because the lexicographic order
(#cases, age) is intractable. In fact, it is easy to show that an order by sum is intractable whenever
there exists an intractable lexicographic order (e.g., there is a disruptive trio). However, we will
show that the situation is worse: the only tractable case is the one where the CQ is free-connex and
there is an atom that contains all of the free variables. In particular, ranked direct access by sum
is intractable already for the Cartesian product ùëÑ (ùëê1, ùëë, ùë•, ùëù, ùëé, ùëê2) :‚àí Visits(ùëù, ùëé, ùëê1), Cases(ùëê2, ùëë, ùë•),
even though every lexicographic order is tractable (according to our aforementioned classification).
This daunting hardness also emphasizes how ranked direct access is fundamentally harder than
ranked enumeration where, in the case of the sum of attributes, the answers of every free-connex
CQ can be enumerated with logarithmic delay after a linear preprocessing time [44].

(4) Next, we study the selection problem for the sum of weights, and establish the following
dichotomy in complexity (again assuming fine-grained hypotheses): the selection problem can be
solved in O (ùëõ log ùëõ) time, where ùëõ is the size of the database, if and only if the hypergraph of the
CQ restricted to the free variables contains at most two maximal hyperedges (w.r.t. containment).
The tractable side is applicable even in the presence of self-joins, and it is achieved by adopting an
algorithm by Frederickson and Johnson [21] originally developed for selection on sorted matrices.
For illustration, the selection problem is solvable in quasilinear time for the query Visits (cid:90) Cases
ordered by sum.

(5) Lastly, we study the implication of FDs on our results, and generalize all of them to incorporate
a set of unary FDs (i.e., FDs with a single attribute on the left-hand side). Like previous works on

, Vol. 1, No. 1, Article . Publication date: November 2023.

6

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

FDs on enumeration [12], deletion propagation [33], resilience [22], and probabilistic inference [24],
we use the notion of an extended CQ to reason about the tractability of a CQ under the presence of
FDs. The idea is that by looking at the structure of the extended CQ (without FDs), then we are able
to classify the original CQ together with the FDs. While this works in a relatively straightforward
way for the case of sum, the case of lexicographic orders is more involved since the FDs may
interact with the order in non-trivial ways. To extend our dichotomy results for lexicographic
orders to incorporate FDs, we show how the extension of a CQ and order may also result in a
reordering of the variables. Then, tractability is decided by the extended CQ together with the
reordered lexicographic order.

Overview of results. We summarize our results (excluding the dichotomies under the presence
of FDs) in Figure 1 with different colors indicating the tractability of the studied orders, namely
lexicographic (LEX) and sum-of-weights (SUM) orders. For both direct access and selection, we
obtain the precise picture of the orders and CQs without self-joins that are tractable according to our
yardstick: O (ùëõ polylog ùëõ) preprocessing and O (polylog ùëõ) per access for direct access (conveniently
denoted as ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü© for ‚ü®preprocessing, access‚ü©) and O (ùëõ polylog ùëõ) for selection (or
‚ü®1, ùëõ log ùëõ‚ü©). Finally, we show how the results are affected by every set of unary FDs (not depicted
in Figure 1); in other words, we extend our dichotomies to incorporate the FDs of the underlying
schema under the restriction that all FDs have a single attribute on the premise. We leave the case
of more general FDs open for future research.

Comparison to an earlier conference version. A preliminary version of this manuscript appeared
in a conference proceedings [13]. Compared to that version, this manuscript includes significant
extensions and improvements. First, we added an investigation on the complexity of the selection
problem with lexicographic orders, establishing a complete dichotomy result (Theorem 6.1 and all
of Section 6). Second, we extended a dichotomy from the conference version to include self-join-free
CQs beyond full CQs for the selection problem by SUM, so it now covers all self-join-free CQs
(with projections), thereby resolving the corresponding open question from the conference paper
(Section 7.4). Third, we extended our results to cover unary FDs (Section 8). Fourth, we have clarified
the relationship between the disruptive trio and the concept of an elimination order (Remark 1).
Fifth and last, we made considerable simplifications and improvements in previous components,
including the proof of hardness of direct access for lexicographic orders (Lemma 3.13) and several
proofs for the SUM selection (Section 7).

Applicability. It is important to note that while our positive results are stated over a limited
class of queries (a fragment of acyclic CQs), there are some implications beyond this class that are
immediate yet significant. In particular, we can use known techniques that reduce other CQs to a
tractable form and then apply our direct-access or selection algorithms. As an example, a hypertree
decomposition can be used to transform a cyclic CQ to an acyclic form by paying a non-linear
overhead during preprocessing [27]. As another example, a CQ with inequality (<) predicates can
be reduced to a CQ without inequalities by paying only a polylogarithmic-factor increase in the
size of the database [43].

Outline. The remainder of the manuscript is organized as follows. Section 2 gives the necessary
background. In Section 3, we consider direct access by lexicographic orders that include all the
free variables, and Section 4 extends the results to partial ones. We move on to the (for the most
part) negative results for direct access by sum orders in Section 5. We study the selection problem
for lexicographic orders and sum in Section 6 and Section 7, respectively. We extend our results to
incorporate unary FDs in Section 8 and, lastly, conclude and give future directions in Section 9.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

7

2 PRELIMINARIES

2.1 Basic Notions
Database. A schema S is a set of relational symbols {ùëÖ1, . . . , ùëÖùëö }. We use ar(ùëÖ) for the arity of a
relational symbol ùëÖ. A database instance ùêº contains a finite relation ùëÖùêº ‚äÜ domar(ùëÖ) for each ùëÖ ‚àà S,
where dom is a set of constant values called the domain. When ùêº is clear, we simply use ùëÖ instead of
ùëÖùêº . We use ùëõ for the size of the database, i.e., the total number of tuples.

Queries. A conjunctive query (CQ) ùëÑ over schema S is an expression of the form
ùëÑ (Xùëì ) :‚àí ùëÖ1(X1), . . . , ùëÖ‚Ñì (X‚Ñì ), where the tuples Xùëì , X1, . . . , X‚Ñì hold variables, every variable in Xùëì
appears in some X1, . . . , X‚Ñì , and {ùëÖ1, . . . , ùëÖ‚Ñì } ‚äÜ S. Each ùëÖùëñ (Xùëñ ) is called an atom of the query ùëÑ,
and the set of all atoms is denoted by atoms(ùëÑ). We use var(ùëí) or var(ùëÑ) for the set of variables
that appear in an atom ùëí or query ùëÑ, respectively.5 The variables Xùëì are called free and are denoted
by free(ùëÑ). A CQ is full if free(ùëÑ) = var(ùëÑ) and Boolean if free(ùëÑ) = ‚àÖ. Sometimes, we say that
CQs that are not full have projections. A repeated occurrence of a relational symbol is a self-join
and if no self-joins exist, a CQ is called self-join-free. A homomorphism from a CQ ùëÑ to a database
ùêº is a mapping of var(ùëÑ) to constants from dom, such that every atom of ùëÑ maps to a tuple in the
database ùêº . A query answer is such a homomorphism followed by a projection on the free variables.
The answer to a Boolean CQ is whether such a homomorphism exists. The set of query answers is
ùëÑ (ùêº ) and we use ùëû ‚àà ùëÑ (ùêº ) for a query answer. For an atom ùëÖ(X) of a CQ, we say that a tuple ùë° ‚àà ùëÖ
assigns a value ùëê to a variable ùë• and denote it as ùë° [ùë•] = ùëê if for every index ùëñ such that X[ùëñ] = ùë•
we have that ùë° [ùëñ] = ùëê. The active domain of a variable ùë• is the subset of dom that ùë• can be assigned
from the database ùêº .

Hypergraphs. A hypergraph H = (ùëâ , ùê∏) is a set ùëâ of vertices and a set ùê∏ of subsets of ùëâ called
hyperedges. Two vertices in a hypergraph are neighbors if they appear in the same edge. A path of
H is a sequence of vertices such that every two succeeding vertices are neighbors. A chordless path
is a path in which no two non-succeeding vertices appear in the same hyperedge (in particular,
no vertex appears twice). A join tree of a hypergraph H = (ùëâ , ùê∏) is a tree ùëá where the nodes6 are
the hyperedges of H and the running intersection property holds, namely: for all ùë¢ ‚àà ùëâ the set
{ùëí ‚àà ùê∏ | ùë¢ ‚àà ùëí} forms a (connected) subtree in ùëá . An equivalent phrasing of the running intersection
property is that given two nodes ùëí1, ùëí2 of the tree, for any node ùëí3 on the simple path between them,
we have that ùëí1 ‚à© ùëí2 ‚äÜ ùëí3. A hypergraph H is acyclic if there exists a join tree for H . We associate
a hypergraph H (ùëÑ) = (ùëâ , ùê∏) to a CQ ùëÑ where the vertices are the variables of ùëÑ, and every atom
of ùëÑ corresponds to a hyperedge with the same set of variables. Stated differently, ùëâ = var(ùëÑ)
and ùê∏ = {var(ùëí)|ùëí ‚àà atoms(ùëÑ)}. With a slight abuse of notation, we identify atoms of ùëÑ with
hyperedges of H (ùëÑ). A CQ ùëÑ is acyclic if H (ùëÑ) is acyclic, otherwise it is cyclic. The free-restricted
hypergraph Hfree (ùëÑ) is the restriction of H (ùëÑ) = (ùëâ , ùê∏) on the nodes that correspond to free
variables, i.e., Hfree(ùëÑ) = (free(ùëÑ), {ùëí ‚à© free(ùëÑ)|ùëí ‚àà ùê∏}).

Free-connex CQs. A hypergraph H ‚Ä≤ is an inclusive extension of H if every edge of H appears
in H ‚Ä≤, and every edge of H ‚Ä≤ is a subset of some edge in H . Given a subset X of the vertices of H ,
a tree ùëá is an ext-X-connex tree (i.e., extension-X-connex tree) for a hypergraph H if: (1) ùëá is a join
tree of an inclusive extension of H , and (2) there is a subtree7 ùëá ‚Ä≤ of ùëá that contains exactly the
vertices X [4]. As an example, Figure 3b depicts an ext-{ùë£1, ùë£2}-connex tree for a query ùëÑ3. We say
that a hypergraph is X-connex if it has an ext-X-connex tree [4]. A hypergraph is X-connex iff
it is acyclic and it remains acyclic after the addition of a hyperedge containing exactly X [7, 11].
Given a hypergraph H and a subset X of its vertices, an X-path is a chordless path (ùë•, ùëß1, . . . , ùëßùëò, ùë¶)

5We use ùëí for atoms because of the natural analogy to hyperedges in hypergraphs associated with a query ùëÑ.
6To make a clear distinction between the vertices of a hypergraph and those of its join tree, we call the latter nodes.
7By subtree, we mean any connected subgraph of the tree.

, Vol. 1, No. 1, Article . Publication date: November 2023.

8

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

in H with ùëò ‚â• 1, such that ùë•, ùë¶ ‚àà X, and ùëß1, . . . , ùëßùëò ‚àâ X. A hypergraph is X-connex iff it has no
X-path [4]. A CQ ùëÑ is free-connex if H (ùëÑ) is free(ùëÑ)-connex [4]. Note that a free-connex CQ is
necessarily acyclic.8 An implication of the characterization given above is that it suffices to find a
join-tree for an inclusive extension of a hypergraph H to infer that H is acyclic.

To simplify notation, we also say that a CQ is ùêø-connex for a (partial) lexicographic order ùêø
if the CQ is X-connex for the set of variables X that appear in ùêø. Generalizing the notion of an
inclusive extension, we say that a hypergraph H ‚Ä≤ is inclusion equivalent to H if every hyperedge
of H is a subset of some hyperedge of H ‚Ä≤ and vice versa. For example, the two hypergraphs with
hyperedges ùê∏1 = {{ùë•, ùë¶}, {ùë¶, ùëß}} and ùê∏2 = {{ùë•, ùë¶}, {ùë¶, ùëß}, {ùëß}} are inclusion equivalent because {ùëß}
is a subset of {ùë¶, ùëß} and every hyperedge is trivially a subset of itself.

2.2 Problem Definitions
Orders over Answers. For a CQ ùëÑ and database instance ùêº , we assume a total order ‚™Ø over the
query answers ùëÑ (ùêº ). We consider two types of orders in this paper:

(1) LEX: Assuming that the domain values are ordered, a lexicographic order ùêø is an ordering of
free(ùëÑ) such that ‚™Ø compares two query answers ùëû1, ùëû2 on the value of the first variable in
ùêø, then on the second (if they are equal on the first), and so on [29]. A lexicographic order is
called partial if the variables in ùêø are a subset of free(ùëÑ).

(2) SUM: The second type of order assumes given weight functions that assign real-valued
weights to the domain values of each variable. More precisely, for each variable ùë•, we define
a function ùë§ùë• : dom ‚Üí R. Then, the query answers are ordered by a weight which is
computed by aggregating the weights of the assigned values of free variables. In a sum-of-
weights order, denoted by SUM, we have the weight of each query answer ùëû ‚àà ùëÑ (ùêº ) to be
ùë§ùëÑ (ùëû) = (cid:205)ùë• ‚ààfree(ùëÑ) ùë§ùë• (ùëû(ùë•)) and ùëû1 ‚™Ø ùëû2 implies that ùë§ùëÑ (ùëû1) ‚â§ ùë§ùëÑ (ùëû2). We emphasize
that we allow only free variables to have weights, otherwise different semantics for the query
answers are possible [44]. To simplify notation, we sometimes refer to all ùë§ùë•, ùë• ‚àà free(ùëÑ)
and ùë§ùëÑ together as one weight function ùë§.

Attribute Weights vs. Tuple Weights for SUM. Notice that in the definition above, we assume
that the input weights are assigned to the domain values of the attributes. Alternatively, the input
weights could be assigned to the relation tuples, a convention that has been used in past work on
ranked enumeration [41]. Since there are several reasonable semantics for interpreting a tuple-
weight ranking for CQs with projections and/or self-joins [44], we elect to present our results for
the case of attribute weights. We note that our results directly extend to the case of tuple weights
for full self-join-free CQs where the semantics are clear. On the one hand, attribute weights can
easily be transformed to tuple weights in linear time such that the weights of the query answers
remain the same. This works by assigning each variable to one of the atoms that it appears in,
and computing the weight of a tuple by aggregating the weights of the assigned attribute values.
Therefore, our hardness results for SUM orders directly extend to the case of tuple weights. On
the other hand, our positive results on direct access (Section 5), selection (Section 7.2) and their
extension to the case of FDs (Section 8.1) rely on algorithms that innately operate on tuple weights,
thus we cover those cases too.

Direct Access vs. Selection. We now define two problems that both directly access ordered
query answers. Since our goal is to classify the combination of CQs and orders by their tractability,
we let those two define the problem. Specifically, a problem is defined by a CQ ùëÑ and a family of

8Free-connex CQs are sometimes called in the literature free-connex acyclic CQs [4]. For cyclic CQs, the free-connex property
is only defined with respect to a particular hypertree decomposition [4], and not for the CQs themselves. Thus, we choose
to omit the word acyclic when referring to free-connex acyclic CQs.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

9

orders Œ†. The reason that we use a family of orders in the problem definition is that for the case of
SUM, we do not distinguish between different weight functions in our classification. For LEX, we
always consider the family of orders to contain only one specific (partial) lexicographic order.

Definition 2.1 (Direct Access). Let ùëÑ be a CQ and Œ† a family of total orders. The problem of direct
access by Œ† takes as an input a database ùêº and an order ‚â∫ from Œ† and constructs a data structure
(called the preprocessing phase) which then allows access to a query answer ùëû ‚àà ùëÑ (ùêº ) at any index
ùëò of the (implicit) array of query answers sorted by ‚â∫.

The essence of direct access is that after the preprocessing phase, we need to be able to support
multiple such accesses. Notably, the values of ùëò that are going to be requested afterward are not
known during preprocessing.

Definition 2.2 (Selection). Let ùëÑ be a CQ and Œ† a family of total orders. The problem of selection
by Œ† takes as an input a database ùêº , an order ‚â∫ from Œ†, and asks for the query answer ùëû ‚àà ùëÑ (ùêº ) at
index ùëò of the (implicit) array of query answers sorted by ‚â∫.

The problem of selection [9, 19, 20] is a computationally easier task that requires only a single
direct access, hence does not make a distinction between preprocessing and access phases. A special
case of the problem is finding the median query answer.

For both problems, if the index ùëò exceeds the total number of answers, the returned answer is

‚Äúout-of-bound‚Äù.

2.3 Complexity Framework and Sorting
We measure asymptotic complexity in terms of the size of the database ùëõ, while the size of the
query is considered a constant. If the time for preprocessing is O (cid:0)ùëì (ùëõ)(cid:1) and the time for each
access is O (cid:0)ùëî(ùëõ)(cid:1), we denote that as ‚ü®ùëì (ùëõ), ùëî(ùëõ)‚ü©, where ùëì , ùëî are functions from N to R. Note that
by definition, the problem of selection asks for a ‚ü®1, ùëî(ùëõ)‚ü© solution.

Our goal for both problems is to achieve efficient access in time significantly smaller than (the
worst case) |ùëÑ (ùêº )|. For direct access, we consider the problem tractable if ‚ü®ùëõ log ùëõ, log ùëõ‚ü© is possible,
and for selection ‚ü®1, ùëõ log ùëõ‚ü©.

The model of computation is the standard RAM model with uniform cost measure. In particular,
it allows for linear time construction of lookup tables, which can be accessed in constant time. We
would like to point out that some past works [4, 15] have assumed that in certain variants of the
model, sorting can be done in linear time [28]. Since we consider problems related to summation
and sorting [21] where a linear-time sort would improve otherwise optimal bounds, we adopt a
more standard assumption that sorting is comparison-based and possible only in quasilinear time.
As a consequence, some upper bounds mentioned in this paper are weaker than the original sources
which assumed linear-time sorting [11, 15].

2.4 Hardness Hypotheses
All the lower bounds we prove are conditional on one or multiple of the following four hypotheses.

Hypothesis 1 (sparseBMM). Two Boolean matrices ùê¥ and ùêµ, represented as lists of their non-zero
entries, cannot be multiplied in time ùëö1+ùëú (1) , where ùëö is the number of non-zero entries in ùê¥, ùêµ, and
ùê¥ùêµ.

, Vol. 1, No. 1, Article . Publication date: November 2023.

10

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

A consequence of this hypothesis is that we cannot answer the query ùëÑ (ùë•, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß)
with quasilinear preprocessing and polylogarithmic delay. In more general terms, any self-join-
free acyclic non-free-connex CQ cannot be enumerated with quasilinear9 preprocessing time and
polylogarithmic delay assuming the sparseBMM hypothesis [4, 7].

Hypothesis 2 (Hypercliqe [1, 34]). For every ùëò ‚â• 2, there is no ùëÇ (ùëö polylog ùëö) algorithm for
deciding the existence of a (ùëò+1, ùëò)-hyperclique in a ùëò-uniform hypergraph with ùëö hyperedges, where
a (ùëò+1, ùëò)-hyperclique is a set of ùëò+1 vertices such that every subset of ùëò elements is a hyperedge.

When ùëò = 2, this follows from the ‚Äúùõø-Triangle‚Äù hypothesis [1]. This is the hypothesis that we
cannot detect a triangle in a graph in linear time [3]. When ùëò ‚â• 3, this is a special case of the
‚Äú(‚Ñì, ùëò)-Hyperclique‚Äù hypothesis [34]. A known consequence is that Boolean cyclic and self-join-free
CQs cannot be answered in quasilinear9 time [11]. As a result, cyclic and self-join-free CQs do not
admit enumeration with quasilinear preprocessing time and polylogarithmic delay assuming the
Hypercliqe hypothesis [11].

Hypothesis 3 (3sum [6, 39]). Deciding whether there exist ùëé ‚àà ùê¥, ùëè ‚àà ùêµ, ùëê ‚àà ùê∂ from three sets of
integers ùê¥, ùêµ, ùê∂, each of size Œ©(ùëö), such that ùëé + ùëè + ùëê = 0 cannot be done in time ùëÇ (ùëö2‚àíùúñ ) for any
ùúñ > 0.

In its simplest form, the 3sum problem asks for three distinct real numbers ùëé, ùëè, ùëê from a set ùëÜ
with ùëö elements that satisfy ùëé + ùëè + ùëê = 0. There is a simple ùëÇ (ùëö2) algorithm for the problem, but
it is conjectured that in general, no truly subquadratic solution exists [39]. The significance of this
conjecture has been highlighted by many conditional lower bounds for problems in computational
geometry [23] and within the class P in general [45]. Note that the problem remains hard even for
integers provided that they are sufficiently large (i.e., in the order of ùëÇ (ùëõ3)) [39]. The hypothesis
we use here has three different sets of numbers, but it is equivalent [6]. This lower bound has been
confirmed in some restricted models of computation [2, 18].

Hypothesis 4 (Seth [30]). For the satisfiability problem with ùëö variables and ùëò variables per
clause (ùëò-SAT), if ùë†ùëò is the infimum of the real numbers ùõø for which ùëò-SAT admits an O (2ùõøùëö) algorithm,
then limùëò‚Üí‚àû ùë†ùëò = 1

Intuitively, the Strong Exponential Time Hypothesis (Seth) states that the best possible algorithms
for ùëò-SAT approach O (2ùëö) running time when ùëò goes to infinity. Seth implies that the ùëò-Dominating
Set problem on a graph with ùëö vertices cannot be solved in O (ùëö2‚àíùúñ ) for ùëò ‚â• 3 and any constant ùúñ
[40]. Based on that, it can be shown that counting the answers to a self-join-free acyclic CQ that is
not free-connex cannot be done in O (ùëõ2‚àíùúñ‚Ä≤) for any constant ùúñ ‚Ä≤ [35].

2.5 Known Results for CQs
Eliminating Projection. We now provide some background that relates to the efficient handling
of CQs. For a query with projections, a standard strategy is to reduce it to an equivalent one where
techniques for acyclic full CQs can be leveraged. The following proposition, which is widely known
and used [7], shows that this is possible for free-connex CQs.

Proposition 2.3 (Folklore). Given a database instance ùêº , a CQ ùëÑ, a join tree ùëá of an inclusive
extension of ùëÑ, and a subtree ùëá ‚Ä≤ of ùëá that contains all the free variables, we can compute in linear
time a database instance ùêº ‚Ä≤ over the schema of a CQ ùëÑ ‚Ä≤ that consists of the nodes of ùëá ‚Ä≤ such that
ùëÑ (ùêº ) = ùëÑ ‚Ä≤(ùêº ‚Ä≤) and |ùêº ‚Ä≤| ‚â§ |ùêº |.

9 Works in the literature [5, 7, 15] typically phrase this as linear, yet any logarithmic factor increase is still covered by the
hypotheses.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

11

This reduction is done by first creating a relation for every node in ùëá using projections of existing
relations, then performing the classic semi-join reduction by Yannakakis [47] to filter the relations
of ùëá ‚Ä≤ according to the relations of ùëá , and then we can simply ignore all relations that do not appear
in ùëá ‚Ä≤ and obtain the same answers. Afterward, they can be handled efficiently, e.g. their answers
can be enumerated with constant delay [4]. We refer the reader to recent tutorials [7, 17] for an
intuitive illustration of the idea.

Ranked enumeration. Enumerating the answers to a CQ in ranked order is a special case of
direct access where the accessed indexes are consecutive integers starting from 0. As it was recently
shown [42], ranked enumeration for CQs is intimately connected to classic algorithms on finding
the ùëò th shortest path in a graph. In contrast to direct access, ranked enumeration by SUM orders
(which also includes lexicographic orderings as a special case) is possible with logarithmic delay
after a linear-time preprocessing phase for all free-connex CQs [41]. In contrast, as we will show,
that is not the case for direct access. Existing ranked-enumeration algorithms rely on priority queue
structures that compare a minimal number of candidate answers to produce the ranked answers
one-by-one in order. There is no straightforward way to extend them to the task of direct access
where we may skip over a large number of answers to get to an arbitrary index ùëò.

Direct Access. Carmeli et al. [15] devise a direct access structure (called ‚Äúrandom access‚Äù) and
use it to uniformly sample CQ answers (called ‚Äúrandom-order enumeration‚Äù). While it leverages the
idea of using count statistics on the input tuples to navigate the space of query answers that had
also been used in prior work on sampling [48], it decouples it from the random order requirement
and advances it into direct access. The separation into a direct access component and a random
permutation (of indices) generated externally also allows sampling without replacement which was
not possible before. This direct access algorithm is also a significant simplification over a prior one
by Brault-Baron [11]. We emphasize that even though these algorithms do not explicitly discuss the
order of the answers, a closer look shows that they internally use and produce some lexicographic
order.

Theorem 2.4 ([11, 15]). Let ùëÑ be a CQ. If ùëÑ is free-connex, then direct access (in some order) is
possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©. Otherwise, if it is also self-join-free, then direct access (in any order) is not
possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, assuming sparseBMM and Hyperclique.

Recent work by Keppeler [32] suggests another direct-access solution by lexicographic order,
which also supports efficient insertion and deletion of input tuples. Given these additional re-
quirements, the supported CQs are more limited, and are only a subset of free-connex CQs called
ùëû-hierarchical [8]. This is a subclass of the well-known hierarchical queries with an additional
restriction on the existential variables. As an example, the following CQs are not ùëû-hierarchical
even though they are free-connex: ùëÑ1(ùë•, ùë¶) :‚àí ùëÖ1(ùë•), ùëÖ2 (ùë•, ùë¶), ùëÖ3(ùë¶) and ùëÑ2(ùë•) :‚àí ùëÖ1(ùë•, ùë¶), ùëÖ2(ùë¶). For
these queries, direct access is not supported by the solution of Keppeler [32], even though it is
possible without the update requirements (as we show in Section 3).

All previous direct-access solutions of which we are aware have two gaps compared to this work:
(1) they do not discuss which lexicographic orders (given by orderings of the free variables) are
supported; (2) they do not support all possible lexicographic orders. We conclude this section with
a short survey of existing solutions and their supported orders.

All prior direct-access solutions use some component that depends on the query structure and
constrains the supported orders. The algorithm of Carmeli et al. [15, Algorithm 3] assumes that a
join tree is given with the CQ, and the lexicographic order is imposed by the join tree. Specifically, it
is an ordering of the variables achieved by a preorder depth-first traversal of the tree. As a result, it
does not support any order that requires jumping back-and-forth between different branches of the
tree. In particular, it does not support ùëÑ3(ùë£1, ùë£2, ùë£3, ùë£4) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£2, ùë£4) with the lexicographic

, Vol. 1, No. 1, Article . Publication date: November 2023.

12

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

order given by the increasing variable indices (we adopt this convention for all the examples
below). We show how to handle this CQ and order in detail in Example 3.5. The algorithm of
Brault-Baron [11, Algorithm 4.3] assumes that an elimination order is given along with the CQ.
The resulting lexicographic order is affected by that elimination order, but is not exactly the same.
This solution suffers from similar restrictions, and it does not support ùëÑ3 either. The algorithm of
Keppeler [32] assumes that a ùëû-tree is given with the CQ, and the possible lexicographic orders are
affected by this tree. Unlike the two earlier mentioned approaches, this algorithm can interleave
variables from different atoms, yet cannot support some orders that are possible for the previous
algorithms. As an example, it does not support ùëÑ4(ùë£1, ùë£2, ùë£3) :‚àí ùëÖ1(ùë£1, ùë£2), ùëÖ2(ùë£2, ùë£3) as ùë£2 is highest
in the hierarchy (the atoms containing it strictly subsume the atoms containing any other variable)
and so it is necessarily the first variable in the q-tree and in the ordering produced.

than any hierarchy. As a result,

Finally, we should mention that

there exist queries and orders that require both
jumping back-and-forth in the join tree and visiting the variables in an order dif-
these are not supported by any previous so-
ferent
and
lution. Two such examples
ùëÑ6(ùë£1, ùë£2, ùë£3, ùë£4, ùë£5) :‚àí ùëÖ1(ùë£1, ùë£2, ùë£4), ùëÖ2(ùë£2, ùë£3, ùë£5).
In Section 3, we provide an algorithm that
supports both of these CQs.

are ùëÑ5(ùë£1, ùë£2, ùë£3, ùë£4, ùë£5) :‚àí ùëÖ1(ùë£1, ùë£3), ùëÖ2(ùë£3, ùë£4), ùëÖ3(ùë£2, ùë£5)

3 DIRECT ACCESS BY LEXICOGRAPHIC ORDERS
In this section, we answer the following question: for which underlying lexicographic orders can
we achieve ‚Äútractable‚Äù direct access to ranked CQ answers, i.e. with quasilinear preprocessing and
polylogarithmic time per answer?

Example 3.1 (No direct access). Consider the lexicographic order ùêø = ‚ü®ùë£1, ùë£2, ùë£3‚ü© for the query
ùëÑ (ùë£1, ùë£2, ùë£3) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£3, ùë£2). Direct access to the query answers according to that order would
allow us to ‚Äújump over‚Äù the ùë£3 values via binary search and essentially enumerate the answers to
ùëÑ ‚Ä≤(ùë£1, ùë£2) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£3, ùë£2). However, we know that ùëÑ ‚Ä≤ is not free-connex and that is impossible
to achieve enumeration with quasilinear preprocessing and polylogarithmic delay (if sparseBMM
holds). Therefore, the bounds we are hoping for are out of reach for the given query and order.
The core difficulty is that the joining variable ùë£3 appears after the other two in the lexicographic
order.

We formalize this notion of ‚Äúvariable in the middle‚Äù in order to detect similar situations in more

complex queries.

Definition 3.2 (Disruptive Trio). Let ùëÑ be a CQ and ùêø a lexicographic order of its free variables.
We say that three free variables ùë£1, ùë£2, ùë£3 are a disruptive trio in ùëÑ with respect to ùêø if ùë£1 and ùë£2 are
not neighbors (i.e. they do not appear together in an atom), ùë£3 is a neighbor of both ùë£1 and ùë£2, and
ùë£3 appears after ùë£1 and ùë£2 in ùêø.

As it turns out, for free-connex and self-join-free CQs, the tractable CQs are precisely captured
by this simple criterion. Regarding self-join-free CQs that are not free-connex, their known in-
tractability of enumeration implies that direct access is also intractable. This leads to the following
dichotomy:

Theorem 3.3 (Direct Access by LEX). Let ùëÑ be a CQ and ùêø be a lexicographic order.
‚Ä¢ If ùëÑ is free-connex and does not have a disruptive trio with respect to ùêø, then direct access by ùêø

is possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©.

‚Ä¢ Otherwise,

if ùëÑ is also self-join-free,

then direct access by ùêø is not possible in

‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü© assuming sparseBMM and Hyperclique.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

13

Remark 1. Assume we are given a full CQ, and the lexicographic order we want to achieve is
‚ü®ùë£1, . . . , ùë£ùëö‚ü©. It was shown (in the context of ranked enumeration by lexicographic orders) that the
absence of disruptive trios is equivalent to the existence of a reverse (ùõº-)elimination order of the
variables [11, Theorem 15]. That is, we need there to exist an atom that contains ùë£ùëö and all of its
neighbors (variables that share an atom with ùë£ùëö), and if we remove ùë£ùëö from the query, ùë£1, . . . , ùë£ùëö‚àí1
should recursively be a reverse elimination order. For the base case, when ùëö = 1, ùë£1 constitutes a
reverse-elimination order.

Remark 2. On the positive side of Theorem 3.3, the preprocessing time is dominated by sorting the
input relations, which we assume requires O (ùëõ log ùëõ) time. If we assume instead that sorting takes
linear time (as assumed in some related work [11, 15, 28]), then the time required for preprocessing is
only O (ùëõ) instead of O (ùëõ log ùëõ).

In Section 3.1, we provide an algorithm for this problem for full acyclic CQs that have a particular
join tree that we call layered. Then, we show how to find such a layered join tree whenever there
is no disruptive trio in Section 3.2. In Section 3.3, we explain how to adapt our solution for CQs
with projections, and in Section 3.4 we prove a lower bound which establishes that our algorithm
applies to all cases where direct access is tractable.

3.1 Layer-Based Algorithm
Before we explain the algorithm, we first define one of its main components. A layered join tree is a
join tree where each node belongs to a layer. The layer number is the last position of any of its
variables in the lexicographic order. Intuitively, ‚Äúpeeling‚Äù off the outermost (largest) layers must
result in a valid join tree (for a hypergraph with fewer variables). To find such a join tree for a CQ
ùëÑ, we may have to introduce hyperedges that are contained in those of H (ùëÑ) (this corresponds to
taking the projection of a relation) or remove hyperedges of H (ùëÑ) that are contained in others
(this corresponds to filtering relations that contain a superset of the variables). Thus, we define the
layered join tree with respect to a hypergraph that is inclusion equivalent (recall the definition of
an inclusion equivalent hypergraph from Section 2.1).

Definition 3.4 (Layered Join Tree). Let ùëÑ be a full acyclic CQ, and let ùêø = ‚ü®ùë£1, . . . , ùë£ ùëì ‚ü© be a
lexicographic order. A layered join tree for ùëÑ with respect to ùêø is a join tree of a hypergraph that is
inclusion equivalent to H (ùëÑ) where (1) every node ùëâ of the tree is assigned to layer max{ùëñ | ùë£ùëñ ‚àà ùëâ },
(2) there is exactly one node for each layer, and (3) for all ùëó ‚â§ ùëì the induced subgraph with only
the nodes that belong to the first ùëó layers is a tree.

Example 3.5. Consider the CQ ùëÑ3(ùë£1, ùë£2, ùë£3, ùë£4) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£2, ùë£4) and the lexicographic order
‚ü®ùë£1, ùë£2, ùë£3, ùë£4‚ü©. To support that order, we first find an inclusion equivalent hypergraph, shown in
Figure 3a. Notice that we added two hyperedges that are strictly contained in the existing ones,
and obtained a hypergraph corresponding to ùëÖ(ùë£1, ùë£3), ùëÖ ‚Ä≤(ùë£1), ùëÜ (ùë£2, ùë£4), ùëÜ ‚Ä≤(ùë£2). A layered join tree
constructed from that hypergraph is depicted in Figure 3b. There are four layers, one for each
node of the join tree. The layer of the node containing {ùë£1, ùë£3} is 3 because ùë£3 appears after ùë£1 in
the order and it is the third variable. If we remove the last layer, then we obtain a layered join
tree for the induced hypergraph where the last variable ùë£4 is removed.

We now describe an algorithm that takes as an input a CQ ùëÑ, a lexicographic order ùêø, and a
corresponding layered join tree and provides direct access to the query answers after a preprocessing
phase. For preprocessing, we leverage a construction from Carmeli et al. [15, Algorithm 2] and apply
it to our layered join tree. For completeness, we briefly explain how it works below. Subsequently,
we describe the access phase that takes into account the layers of the tree to accommodate the

, Vol. 1, No. 1, Article . Publication date: November 2023.

14

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

(a) A hypergraph that is inclusion equivalent to
H (ùëÑ3).

(b) A layered join tree for ùëÑ3 w.r.t. the lexicographic
order.

Fig. 3. Constructing a layered join tree for the query ùëÑ3 (ùë£1, ùë£2, ùë£3, ùë£4) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£2, ùë£4) and order
‚ü®ùë£1, ùë£2, ùë£3, ùë£4‚ü©.

provided lexicographic order. We emphasize that the way we access the structure is different than
that of the past work [15], and that this allows support of lexicographic orders that were impossible
for the previous access routine (e.g. the order in Example 3.5).

Preprocessing. The preprocessing phase (1) creates a relation for every node of the tree, (2)
removes dangling tuples, (3) sorts the relations, (4) partitions the relations into buckets, and (5)
uses dynamic programming on the tree to compute and store certain counts10. After preprocessing,
we are guaranteed that for all ùëñ, the node of layer ùëñ has a corresponding relation where each tuple
participates in at least one query answer; this relation is partitioned into buckets by the assignment
of the variables preceding ùëñ. In each bucket, we sort the tuples lexicographically by ùë£ùëñ . Each tuple is
given a weight that indicates the number of different answers this tuple agrees with when only
joining its subtree. The weight of each bucket is the sum of its tuple weights. We denote both by
the function weight. Moreover, for every tuple ùë°, we compute the sum of weights of the preceding
tuples in the bucket, denoted by start(ùë°). We use end(ùë°) for the sum that corresponds to the tuple
following ùë° in the same bucket; if ùë° is last, we set this to be the bucket weight. If we think of the
query answers in the subtree sorted in the order of ùë£ùëñ values, then start and end distribute the
indices between 0 and the bucket weight to tuples. The number of indices within the range of each
tuple corresponds to its weight.

Example 3.6 (Continued). The result of the preprocessing phase on an example database for our
query ùëÑ3 is shown in Figure 4. Notice that ùëÖ has been split into two buckets according to the values
of its parent ùëÖ ‚Ä≤, one for value ùëé1 and one for ùëé2. For tuple (ùëé1) ‚àà ùëÖ ‚Ä≤, we have weight((ùëé1)) = 8
because this is the number of answers that agree on that value in its subtree: the left subtree
has 2 such answers which can be combined with any of the 4 possible answers of the right
subtree. The start index of tuple (ùëè1, ùëë3) ‚àà ùëÜ is the sum of the previous weights within the bucket:
start((ùëè1, ùëë3)) = weight((ùëè1, ùëë1)) + weight((ùëè1, ùëë2)) = 1 + 1 = 2. Not shown in the figure is that
every bucket stores the sum of weights it contains.

Access. The access phase works by going through the tree layer by layer. When resolving a
layer ùëñ, we select a tuple from its corresponding relation, which sets a value for the ùëñth variable in ùêø,
and also determines a bucket for each child. Then, we conceptually erase the node of layer ùëñ and its
outgoing edges.

10The same count statistics are also leveraged in [48, Sect. 4.2] in the context of sampling.

, Vol. 1, No. 1, Article . Publication date: November 2023.

ùë£1ùë£3ùë£2ùë£4ùëÜùëÖ‚Ä≤ùëÜ‚Ä≤ùëÖùë£1ùëÖ‚Ä≤ùë£2,ùë£4ùë£1,ùë£3ùë£2ùëÜ‚Ä≤ùëÜùëÖ1234Tractable Orders for Direct Access to Ranked Answers of CQs

15

Fig. 4. Example 3.6: The result of the preprocessing phase on ùëÑ3, the layered join tree (Figure 3b) and an
example database. The weight, start index, and end index for each tuple are abbreviated in the figure as ùë§, ùë†,
and ùëí respectively.

The access algorithm maintains a directed forest and an assignment to a prefix of the variables.
Each tree in the forest represents the answers obtained by joining its relations. Each root contains a
single bucket that agrees with the already assigned values, thus every answer agrees on the prefix.
Due to the running intersection property, different trees cannot share unassigned variables. As a
consequence, any combination of answers from different trees can be added to the prefix assignment
to form an answer to ùëÑ. The answers obtained this way are exactly the answers to ùëÑ that agree
with the already set assignment. Since we start with a layered join tree, we are guaranteed that at
each step, the next layer (which corresponds to the variable following the prefix for which we have
an assignment) appears as a root in the forest.

Recall that from the preprocessing phase, the weight of each root is the number of answers in
its tree. When we are at layer ùëñ, we have to take into account the weights of all the other roots
in order to compute the number of query answers for a particular tuple. More specifically, the
number of answers to ùëÑ containing the already selected attributes (smaller than ùëñ) and some ùë£ùëñ
value contained in a tuple is found by multiplying the tuple weight with the weights of all other
roots. That is because the answers from all trees can be combined into a query answer. Let ùë° be the
selected tuple when resolving the ùëñth layer. The number of answers to ùëÑ that have a value of ùêø[ùëñ]
smaller than that of ùë° and a value of ùêø[ ùëó] equal to that of ùë° for all ùëó < ùëñ is then:

(cid:32)

(cid:213)

ùë° ‚Ä≤

weight(ùë° ‚Ä≤)

(cid:214)

ùëü ‚ààroots

(cid:33)

weight(ùëü )

where ùë° ‚Ä≤ ranges over tuples preceding ùë° in its bucket. Denote by factor the product of all root
weights. Then we can rewrite as:

(cid:32)

(cid:213)

ùë° ‚Ä≤

weight(ùë° ‚Ä≤)

(cid:33) (cid:32)

(cid:214)

ùëü ‚ààroots

(cid:33)

weight(ùëü )

= start(ùë°) ¬∑ factor .

Therefore, when resolving layer ùëñ we select the last tuple ùë° such that the index we want to access is
at least start(ùë°) ¬∑ factor.

Algorithm 1 summarizes the process we described where ùëò is the index to be accessed and ùëì is
the number of variables. Iteration ùëñ resolves layer ùëñ. Pointers to the selected buckets from the roots
are kept in a bucket array. The product of the weights of all roots is kept in a factor variable. In
each iteration, the variable ùëò is updated to the index that should be accessed among the answers
that agree with the already selected attribute values. Note that bucket[ùëñ] is always initialized when
accessed since layer ùëñ is guaranteed to be a child of a smaller layer.

Example 3.7 (Continued). We demonstrate how the access algorithm works for index ùëò = 12.
When resolving ùëÖ ‚Ä≤, the tuple (ùëé2) is chosen since 8 ¬∑ 1 ‚â§ 12 < 16 ¬∑ 1; then, the single bucket in ùëÜ ‚Ä≤
and the bucket containing ùëé2 in ùëÖ are selected. The next iteration resolves ùëÜ ‚Ä≤. When it reaches

, Vol. 1, No. 1, Article . Publication date: November 2023.

ùëÖ‚Ä≤ùë§ùë†ùëíùëé1808ùëé28816ùëÜ‚Ä≤ùë§ùë†eùëè1303ùëè2134ùëÖùë§ùë†eùëé1ùëê1101ùëé1ùëê2112ùëé2ùëê2101ùëé2ùëê3112ùëÜùë§ùë†eùëè1ùëë1101ùëè1ùëë2112ùëè1ùëë3123ùëè2ùëë410116

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

Algorithm 1: Lexicographic Direct-Access

1 if ùëò ‚â• weight(root) then
return ‚Äúout-of-bound‚Äù
2
3 bucket[1] = root
4 factor = weight(root)
5 for i=1,. . . ,f do
6

7

8

9

10

11

factor = factor/weight(bucket[ùëñ])
pick ùë° ‚àà bucket[ùëñ] s.t. start(ùë°) ¬∑ factor ‚â§ ùëò < end(ùë°) ¬∑ factor
ùëò = ùëò ‚àí start(ùë°) ¬∑ factor
for child ùëâ of layer ùëñ do

get the bucket ùëè ‚àà ùëâ agreeing with the selected tuples
bucket[layer(ùëâ )] = ùëè
factor = factor ¬∑ weight(ùëè)

12
13 return the answer agreeing with the selected tuples

line 7, ùëò = 12 ‚àí 8 = 4 and factor = 2. As 0 ¬∑ 2 ‚â§ 4 < 3 ¬∑ 2, the tuple (ùëè1) is selected. Next, ùëÖ is
resolved, which we depict in Figure 5. The current index is ùëò = 4 ‚àí 0 = 4. The weights of the
other roots (only ùëÜ here) gives us factor = 3. To make our choice in ùëÖ, we multiply the weights of
the tuples by factor = 3. Then, we find that the index ùëò we are looking for falls into the range
of (ùëé2, ùëê3) because 1 ¬∑ 3 ‚â§ 4 < 2 ¬∑ 3. Next, ùëÜ is resolved, ùëò = 4 ‚àí 1 ¬∑ 3 = 1, and factor = 1. As
1 ¬∑ 1 ‚â§ 1 < 2 ¬∑ 1, the tuple (ùëè1, ùëë2) is selected. Overall, answer number 12 (the 13th answer) is
(ùëé2, ùëè1, ùëê3, ùëë2).

Lemma 3.8. Let ùëÑ be a full acyclic CQ, and ùêø = ‚ü®ùë£1, . . . , ùë£ ùëì ‚ü© be a lexicographic order. If there is a

layered join tree for ùëÑ with respect to ùêø, then direct access is possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©.

Proof. The correctness of Algorithm 1 follows from the discussion above. For the time complex-
ity, note that it contains a constant number of operations (assuming the number of attributes ùëì is
fixed). Line 7 can be done in logarithmic time using binary search, while all other operations only
require constant time in the RAM model. Thus, we obtain direct access in logarithmic time per
‚ñ°
answer after the quasilinear preprocessing (dominated by sorting).

Remark 3 (Inverted access). A straightforward adaptation of Algorithm 1 can be used to achieve
inverted access: given a query result as the input, we return its index according to the lexicographic
order. Algorithm 2 is almost the same as Algorithm 1 except that the choices in each iteration are made
according to the given answer and the corresponding index is constructed (instead of the opposite). The
algorithm runs in constant time per answer since every operation can be done within that time (unlike
Algorithm 1, there is no need for binary search here).

Another adaptation of Algorithm 2 can give us a form of inverted access for the cases when the given
answer does not exist. That is, instead of returning ‚Äúnot-an-answer‚Äù, we want to return the next answer
in the lexicographic order. The first time a tuple ùë° is not found in Line 7 of Algorithm 2, we select the
first tuple in the bucket that is larger than ùë°, and in all following iterations, we always select the first
tuple in the bucket. If there is no tuple larger than ùë°, we revert the previous iteration and select the next
tuple there (compared to what we selected before). If no such tuple exists, we again revert the previous
iteration and so on. If there are no previous iterations, we were asked to access a tuple larger than the
last answer, so we return an appropriate message. The algorithm described here takes logarithmic time,
as we can use binary search to find the tuple following our target tuple in each bucket.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

17

Fig. 5. Example 3.7: Illustration of an iteration of the access phase where layer 3 corresponding to ùëÖ is resolved.

Algorithm 2: Lexicographic Inverted-Access
1 ùëò = 0
2 bucket[1] = root
3 factor = weight(root)
4 for i=1,. . . ,f do
5

factor = factor/weight(bucket[ùëñ])
select ùë° ‚àà bucket[ùëñ] agreeing with the answer
if no such ùë° exists then

return ‚Äúnot-an-answer‚Äù

ùëò = ùëò + start(ùë°) ¬∑ factor
for child ùëâ of layer ùëñ do

get the bucket ùëè ‚àà ùëâ agreeing with the answer
bucket[layer(ùëâ )] = ùëè
factor = factor ¬∑ weight(ùëè)

6

7

8

9

10

11

12

13
14 return ùëò

3.2 Finding Layered Join Trees
We now have an algorithm that can be applied whenever we have a layered join tree. We next show
that the existence of such a join tree relies on the disruptive trio condition we introduced earlier. In
particular, if no disruptive trio exists, we are able to construct a layered join tree for full acyclic
CQs.

Lemma 3.9. Let ùëÑ be a full acyclic CQ, and ùêø be a lexicographic order. If ùëÑ does not have a disruptive

trio with respect to ùêø, then there is a layered join tree for ùëÑ with respect to ùêø.

Proof. We show by induction on ùëñ that there exists a layered join tree for the hypergraph
containing the hyperedges {ùëâ ‚à© {ùë£1, . . . , ùë£ùëñ } | ùëâ ‚àà atoms(ùëÑ)} with respect to the prefix of ùêø
containing its first ùëñ elements. The induction base is the tree that contains the node {ùë£1} and no
edges.

, Vol. 1, No. 1, Article . Publication date: November 2023.

ùëÖ‚Ä≤ùë§ùë†ùëé180ùëé288ùëÜ‚Ä≤ùë§ùë†ùëè130ùëè213ùëÖùë§ùë†ùëé1ùëê110ùëé1ùëê211ùëé2ùëê210ùëé2ùëê311ùëÜùë§ùë†ùëè1ùëë110ùëè1ùëë211ùëè1ùëë312ùëè2ùëë410Weight of bucket=1+1+1=31‚àó3answers1‚àó3answersùëò=418

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

In the inductive step, we assume a layered join tree with ùëñ ‚àí 1 layers for {ùëâ ‚à© {ùë£1, . . . , ùë£ùëñ‚àí1} |
ùëâ ‚àà atoms(ùëÑ)}, and we build a layer on top of it. Denote by V the sets of {ùëâ ‚à© {ùë£1, . . . , ùë£ùëñ } | ùëâ ‚àà
atoms(ùëÑ)} that contain ùë£ùëñ (these are the sets that need to be included in the new layer). First note
that V is acyclic. Indeed, by the running intersection property, the join tree for H (ùëÑ) has a subtree
with all the nodes that contain ùë£ùëñ . By taking this subtree and projecting out all variables that occur
after ùë£ùëñ in ùêø, we get a join tree for an inclusion equivalent hypergraph to V, and its existence
proves that V is acyclic.

We next claim that some set in V contains all the others; that is, there exists ùëâùëö ‚àà V such that
for all ùëâ ‚àà V, we have that ùëâ ‚äÜ ùëâùëö. Consider a join tree for V. Every variable ùë£ ‚àà V defines a
subtree ùëáùë£ induced by the nodes that contain this variable. If two variables ùë•, ùë¶ are neighbors, their
subtrees ùëáùë•,ùëáùë¶ share a node. It is known that every collection of subtrees of a tree satisfies the
Helly property [26]: if every two subtrees share a node, then some node is shared by all subtrees.
In particular, since V is acyclic, if every two variables of V are neighbors, then some element of
V contains all variables that appear in (elements of) V. Thus, if, by way of contradiction, there
is no such ùëâùëö, there exist two non-neighboring variables ùë£ùëé and ùë£ùëè that appear in (elements of)
V. Since ùë£ùëñ appears in all elements of V, this means that there exist ùëâùëé, ùëâùëè ‚àà V with {ùë£ùëé, ùë£ùëñ } ‚äÜ ùëâùëé
and {ùë£ùëè, ùë£ùëñ } ‚äÜ ùëâùëè. Since ùë£ùëé and ùë£ùëè are not neighbors, these three variables are a disruptive trio with
respect to ùêø: ùë£ùëé and ùë£ùëè are both neighbors of the later variable ùë£ùëñ . The existence of a disruptive trio
contradicts the assumption of the lemma we are proving, and so we conclude that there is ùëâùëö ‚àà V
such that for all ùëâ ‚àà V, we have that ùëâ ‚äÜ ùëâùëö.

With ùëâùëö at hand, we can now add the additional layer to the tree given by the inductive
hypothesis. By the inductive hypothesis, the layered join tree with ùëñ ‚àí1 layers contains the hyperedge
ùëâùëö ‚à© {ùë£1, . . . , ùë£ùëñ‚àí1} = ùëâùëö \ {ùë£ùëñ }. We insert ùëâùëö with an edge to the node containing ùëâùëö \ {ùë£ùëñ }. This
results in the join tree we need: (1) the hyperedges {ùëâ ‚à© {ùë£1, . . . , ùë£ùëñ } | ùëâ ‚àà atoms(ùëÑ)} are all
contained in nodes, since the ones that do not appear in the tree from the inductive hypothesis
are contained in the new node; (2) it is a tree since we add one leaf to an existing tree; and (3) the
running intersection property holds since the added node is connected to all of its variables that
‚ñ°
already appear in the tree.

Lemmas 3.8 and 3.9 give a direct-access algorithm for full acyclic CQs and lexicographic orders

without disruptive trios.

3.3 Supporting Projection
Next, we show how to support CQs that have projections. A free-connex CQ can be efficiently
reduced to a full acyclic CQ using Proposition 2.3. We next show that the resulting CQ contains no
disruptive trio if the original CQ does not.

Lemma 3.10. Given a database instance ùêº , a free-connex CQ ùëÑ, and a lexicographic order ùêø with
no disruptive trio with respect to ùêø, we can compute in linear time a database instance ùêº ‚Ä≤ and a full
acyclic CQ ùëÑ ‚Ä≤ with no disruptive trio with respect to ùêø such that ùëÑ ‚Ä≤(ùêº ‚Ä≤) = ùëÑ (ùêº ), |ùêº ‚Ä≤| ‚â§ |ùêº |, and ùëÑ ‚Ä≤ does
not depend on ùêº or ùêº ‚Ä≤.

Proof. Let ùëÑ be a free-connex CQ, and let ùëá be an ext-free(ùëÑ)-connex tree for ùëÑ where ùëá ‚Ä≤ is

the subtree of ùëá that contains exactly the free variables.

First, we claim that two free variables are neighbors in ùëá iff they are neighbors in ùëá ‚Ä≤. The ‚Äúif‚Äù
direction is immediate since ùëá ‚Ä≤ is contained in ùëá . We show the other direction. Let ùë¢ and ùë£ be free
variables of ùëÑ that are neighbors in ùëá . That is, there is a node ùëâùëá in ùëá that contains them both.
Consider the unique path from ùëâ to any node in ùëá ‚Ä≤ such that only the last node on the path, which

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

19

we denote ùëâùëá ‚Ä≤, is in ùëá ‚Ä≤. Since both variables appear in ùëá ‚Ä≤ and in ùëâ , by the running intersection
property, both variables appear in ùëâùëá ‚Ä≤. Thus, ùë¢ and ùë£ are also neighbors in ùëá ‚Ä≤.

Since the definition of disruptive trios depends only on neighboring pairs of free variables, an
immediate consequence of the claim from the previous paragraph is that there is a disruptive trio
in ùëá iff there is a disruptive trio in ùëá ‚Ä≤. Next, we can simply use Proposition 2.3 to reduce ùëÑ to the
‚ñ°
full acyclic CQ where the atoms are exactly the nodes of ùëá ‚Ä≤.

By combining Lemmas 3.8 to 3.10, we conclude an efficient algorithm for free-connex CQs and

orders with no disruptive trios. The next lemma summarizes our results so far.

Lemma 3.11. Let ùëÑ be a free-connex CQ, and ùêø be a lexicographic order. If ùëÑ does not have a

disruptive trio with respect to ùêø, direct access by ùêø is possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©.

3.4 Lower Bound for Conjunctive Queries
Next, we show that our algorithm supports all tractable cases (for self-join-free CQs); we prove
that all unsupported cases are intractable. We base our hardness results on the known hardness
of enumeration for non-free-connex CQs [5, 11] through a reduction that uses direct access to
enumerate the answers projected on a prefix of the variables. Adapting our notation to enumeration,
we say that an enumeration problem is in ‚ü®ùëù (ùëõ), ùëì (ùëõ)‚ü© if there is an algorithm that solves this
problem with ùëù (ùëõ) time before the first answer and ùëì (ùëõ) time between consecutive answers.

Lemma 3.12. Let ùëÑ be a self-join-free CQ, ùêø be a lexicographic order, and ùëÑ ‚Ä≤ be the same as ùëÑ but
with free variables ùêø‚Ä≤ for some prefix ùêø‚Ä≤ of ùêø. If direct access for ùëÑ by ùêø is possible in ‚ü®ùëù (ùëõ), ùëì (ùëõ)‚ü© for
some functions ùëù, ùëì , then enumeration of the answers to ùëÑ ‚Ä≤ is possible in ‚ü®ùëù (ùëõ), ùëì (ùëõ) log ùëõ‚ü©.

Proof. We show how to enumerate the unique assignments of the free variables of ùëÑ ‚Ä≤ given
the direct access algorithm for ùëÑ. First we perform the preprocessing step in O (ùëù (ùëõ)). Then, we
perform the following starting with ùëñ = 0 and until there are no more answers. We access the
answer at index ùëñ and print its assignment to the variables ùêø‚Ä≤. Then, we set ùëñ to be the index of the
next answer which assigns different values to ùêø‚Ä≤ and repeat. Finding the next index can be done
‚ñ°
with a logarithmic number of direct access calls using binary search.

We now exploit that for CQs with disruptive trios, we can always find a prefix that is not connex.
Therefore, enumerating the query answers projected on that prefix via direct access leads to the
enumeration of a non-free-connex CQ, where existing lower bounds apply.

Lemma 3.13. Let ùëÑ be a self-join-free acyclic CQ, and ùêø be a lexicographic order. If ùëÑ has a
disruptive trio with respect to ùêø, then direct access by ùêø is not possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©,
assuming sparseBMM.11

Proof. Let ùë£1, ùë£2, ùë£3 be a disruptive trio in ùêø. We take ùêø‚Ä≤ to be the prefix of ùêø that ends in ùë£2. Then,
ùë£1, ùë£3, ùë£2 is an ùêø‚Ä≤-path or in other words, the hypergraph of ùëÑ is not ùêø‚Ä≤-connex. Now, we define
a new CQ ùëÑ ‚Ä≤ so that it has the same body as ùëÑ but its free variables are ùêø‚Ä≤. Thus, ùëÑ ‚Ä≤ is acyclic
but not free-connex. Assuming that direct access for ùëÑ is possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, we
use Lemma 3.12 to enumerate the answers of ùëÑ ‚Ä≤ in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, which is known to
‚ñ°
contradict sparseBMM [5] .

11In fact, this lemma holds also for cyclic CQs, as it can be shown that Boolean matrix multiplication can be encoded in
any CQ that contains a free-path regardless of its acyclicity. However, this is not formally stated in previous work, and we
prefer not to complicate the proof with the technical details of the reduction. We chose here to limit the statement to acyclic
CQs as cyclic CQs are already known to be hard if we assume Hypercliqe. The direct reduction that applies also to cyclic
CQs can be found in the conference version of this article [14].

, Vol. 1, No. 1, Article . Publication date: November 2023.

20

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

By combining Lemma 3.11 and Lemma 3.13 together with the known hardness results for non-
free-connex CQs (Theorem 2.4), we prove the dichotomy given in Theorem 3.3: direct access
by a lexicographic order for a self-join-free CQ is possible with quasilinear preprocessing and
polylogarithmic time per answer if and only if the query is free-connex and does not have a
disruptive trio with respect to the required order.

4 DIRECT ACCESS BY PARTIAL LEXICOGRAPHIC ORDERS
We now investigate the case where the desired lexicographic order is partial, i.e., it contains only
some of the free variables. This means that there is no particular order requirement for the rest
of the variables. One way to achieve direct access to a partial order is to complete it into a full
lexicographic order and then leverage the results of the previous section. If such completion is
impossible, we have to consider cases where tie-breaking between the non-ordered variables is
done in an arbitrary way. However, we will show in this section that the tractable partial orders are
precisely those that can be completed into a full lexicographic order. In particular, we will prove
the following dichotomy which also gives an easy-to-detect criterion for the tractability of direct
access.

Theorem 4.1. Let ùëÑ be a CQ and ùêø be a partial lexicographic order.
‚Ä¢ If ùëÑ is free-connex and ùêø-connex and does not have a disruptive trio with respect to ùêø, then direct

access by ùêø is possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©.

‚Ä¢ Otherwise,

if ùëÑ is also self-join-free,

then direct access by ùêø is not possible in

‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, assuming sparseBMM and Hyperclique.

Example 4.2. Consider the CQ ùëÑ :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß). If the free variables are exactly ùë• and ùëß, then
the query is not free-connex, and so it is intractable. Next assume that all variables are free. If
ùêø = ‚ü®ùë•, ùëß‚ü©, then the query is not ùêø-connex, and so it is intractable. If ùêø = ‚ü®ùë•, ùëß, ùë¶‚ü©, then ùë•, ùëß, ùë¶ is a
disruptive trio, thus the query is intractable. However, if ùêø = ‚ü®ùë•, ùë¶, ùëß‚ü© or ùêø = ‚ü®ùëß, ùë¶‚ü©, then the query
is free-connex, ùêø-connex and has no disruptive trio, so it is tractable.

4.1 Tractable Cases
For the positive side, we can solve our problem efficiently if the CQ is free-connex and there is
a completion of the lexicographic order to all free variables with no disruptive trio. Lemma 4.4
identifies these cases with a connexity criterion. To prove it, we first need a way to combine two
different connexity properties. The proof of the following proposition uses ideas from a proof of
the characterization of free-connex CQs in terms of the acyclicity of the hypergraph obtained by
including a hyperedge with the free variables [7].

Proposition 4.3. If a CQ ùëÑ is both ùêø1-connex and ùêø2-connex where ùêø2 ‚äÜ ùêø1, then there exists a
join tree ùëá of an inclusive extension of ùëÑ with a subtree ùëá1 containing exactly the variables ùêø1 and a
subtree ùëá2 of ùëá1 contains exactly the variables ùêø2.

Proof. We describe a construction of the required tree. Figure 6 demonstrates our construction.
We use two different characterizations of connexity. Since ùëÑ is ùêø2-connex, it has an ext-ùêø2-connex
tree ùëá2. Since ùëÑ is ùêø1-connex, there is a join-tree ùëá1 for the atoms of ùëÑ and its head. Let ùëá2 [ùêø1] be ùëá2
where the variables that are not in ùêø1 are deleted from all nodes. That is, for every node ùëâ ‚àà ùëá2, its
variables are replaced with var(ùëâ ) ‚à© ùêø1. Denote by V all neighbors of the head in ùëá1, and denote
by ùëá ‚àí
1 and connecting
every node ùëâ1 ‚àà V with a node ùëâ2 of ùëá2 [ùêø1] such that var(ùëâ1) ‚à© ùêø1 = var(ùëâ2) gives us the tree we

1 the graph ùëá1 after the deletion of the head node. Taking both ùëá2 [ùêø1] and ùëá ‚àí

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

21

ùëá1:

ùë•ùë¶ùëß

ùëá2:

ùë¶

ùë•ùë¶ùëé

ùë¶ùëßùëè

ùë•ùë¶ùëé

ùêø2

ùë¶ùëßùëè

ùë¶ùëßùëë

ùëèùëê

ùë¶ùëßùëë

ùëèùëê

ùë•ùë¶ùëé

ùë¶ùëßùëè

ùë•ùë¶

ùë¶ùëßùëë

ùëèùëê

ùêø2

ùë¶ùëß

ùë¶

ùë¶ùëß

ùêø1

6. Example

Fig.
4.3
ùëÑ (ùë•, ùë¶, ùëß) :‚àí ùëÖ1 (ùë•, ùë¶, ùëé), ùëÖ2 (ùë¶, ùëß, ùëè), ùëÖ3 (ùëè, ùëê), ùëÖ4 (ùë¶, ùëß, ùëë) with ùêø1 = {ùë•, ùë¶, ùëß} and ùêø2 = {ùë¶}.

construction

Proposition

from

the

for

for

the

CQ

1 represents an atom of ùëÑ, and every atom
want. Such a node exists in ùëá2 [ùêø1] since every node of ùëá ‚àí
of ùëÑ is contained in some node of ùëá2. The subtree ùëá2 [ùêø1] contains exactly ùëâ1, and since this subtree
comes from an ext-ùêø2-connex tree, it has a subtree containing exactly ùêø1. It is easy to verify that
the result is a tree, and we can show that the running intersection property holds in the united
‚ñ°
graph since it holds for ùëá1 and ùëá2.

We are now in a position to show the following:

Lemma 4.4. Let ùëÑ be a CQ and ùêø be a partial lexicographic order. If ùëÑ is free-connex and ùêø-connex
and does not have a disruptive trio with respect to ùêø, then there is an ordering ùêø+ of free(ùëÑ) that
starts with ùêø such that ùëÑ has no disruptive trio with respect to ùêø+.

Proof. According to Proposition 4.3, there is a join tree ùëá (of an inclusive extension of ùëÑ) with
a subtree ùëáfree containing exactly the free variables, and a subtree ùëáùêø of ùëáfree containing exactly
the ùêø variables. We assume that ùëáùêø contains at least one node; otherwise (this can only happen in
case ùêø is empty), we can introduce a node with no variables to all of ùëá , ùëáfree and ùëáùêø and connect it
to any one node of ùëáfree. We describe a process of extending ùêø while traversing ùëáfree. Consider the
nodes of ùëáùêø as handled, and initialize ùêø+ = ùêø. Then, repeatedly handle a neighbor of a handled node
until all nodes are handled. When handling a node, append to ùêø+ all of its free variables that are not
already there. Since the join tree is connected and includes all query variables, ùêø+ will necessarily
contain free(ùëÑ) at the end of the process. We prove by induction that ùëÑ has no disruptive trio
w.r.t any prefix of ùêø+. The base case is guaranteed by the premises of this lemma since ùêø (hence all
of its prefixes) has no disruptive trio.

Let ùë£ùëù be a new variable added to a prefix ùë£1, . . . , ùë£ùëù‚àí1 of ùêø+. Let ùëá + be the subtree of ùëáfree with
the handled nodes when adding ùë£ùëù to ùêø+ and let ùëâ ‚àâ ùëá + be the node being handled. Note that, since
ùë£ùëù is being added, ùë£ùëù ‚àà ùëâ but ùë£ùëù is not in any node of ùëá +.

We first claim that every neighbor ùë£ùëñ of ùë£ùëù with ùëñ < ùëù is in ùëâ . Our arguments are illustrated in
Figure 7. Since ùë£ùëñ and ùë£ùëù are neighbors, they appear together in a node ùëâùëñ,ùëù outside of ùëá +. Let ùëâùëñ be
a node in ùëá + containing ùë£ùëñ (such a node exists since ùë£ùëñ appears before ùë£ùëù in ùêø+). Consider the path
from ùëâùëñ,ùëù to ùëâùëñ . Let ùëâ‚Ñì be the last node of this path not in ùëá +. If ùëâ‚Ñì ‚â† ùëâ , the path between ùëâ‚Ñì and
ùëâ goes only through nodes of ùëá + (except for the end-points). Thus, concatenating the path from

, Vol. 1, No. 1, Article . Publication date: November 2023.

22

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

ùëá +

ùëâùëñ

ùë£ùëñ

ùë£ùëù

ùëâùëñ

ùë£ùëñ

ùëá +

ùëâ

ùë£ùëù

ùëâ‚Ñì

ùë£ùëù

ùëâ = ùëâ‚Ñì

ùë£ùëù, ùë£ùëñ

ùëâùëñ,ùëù

ùë£ùëñ, ùë£ùëù

ùë£ùëñ, ùë£ùëù

ùëâùëñ,ùëù

We get a contradiction in
the case where ùëâ ‚â† ùëâ‚Ñì .

If ùë£ùëñ is a neighbor of ùë£ùëù with
ùëñ < ùëõ, then ùë£ùëñ ‚àà ùëâ .

Fig. 7. The induction step in Lemma 4.4

ùëâùëñ,ùëù to ùëâ‚Ñì with the path from ùëâ‚Ñì to ùëâ results in a simple path. By the running intersection property,
all nodes on this path contain ùë£ùëù . In particular, the node following ùëâ‚Ñì contains ùë£ùëù in contradiction
to the fact that ùë£ùëù does not appear in ùëá +. Therefore, ùëâ‚Ñì = ùëâ . By the running intersection property,
since ùëâ is on the path between ùëâùëñ and ùëâùëñ,ùëù , we have that ùëâ contains ùë£ùëñ .

We now prove the induction step. We know by the inductive hypothesis that ùë£1, . . . , ùë£ùëù‚àí1 have
no disruptive trio. Assume by way of contradiction that appending ùë£ùëù introduces a disruptive trio.
Then, there are two variables ùë£ùëñ, ùë£ ùëó with ùëñ < ùëó < ùëù such that ùë£ùëñ, ùë£ùëù are neighbors, ùë£ ùëó, ùë£ùëù are neighbors,
but ùë£ùëñ, ùë£ ùëó are not neighbors. As we proved, since ùë£ùëñ and ùë£ ùëó are neighbors of ùë£ùëù preceding it, we have
that all three of them appear in the handled node ùëâ . This is a contradiction to the fact that ùë£ùëñ and
‚ñ°
ùë£ ùëó are not neighbors.

The positive side of Theorem 4.1 is obtained by combining Lemma 4.4 with Theorem 3.3.

4.2 Intractable Cases
For the negative part, we prove a generalization of Lemma 3.13. Recall that according to Lemma 3.12,
we can use lexicographic direct access to enumerate the answers to a CQ with a prefix of the ordered
free variables. Similarly to Section 3.4, our goal is to find a ‚Äúbad‚Äù prefix that does not allow efficient
enumeration. For non-ùêø-connex CQs, this is easy since ùêø itself is such a prefix.

Lemma 4.5. Let ùëÑ be an acyclic self-join free CQ and ùêø be a partial lexicographic order. If ùëÑ has
a disruptive trio or ùëÑ is not ùêø-connex, then there exists a self-join-free acyclic non-free-connex CQ
ùëÑ ‚Ä≤ such that: if direct access for ùëÑ is possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, then enumeration for ùëÑ ‚Ä≤ is
possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©.

Proof. If ùëÑ is not ùêø-connex, we use Lemma 3.12 with ùêø‚Ä≤ = ùêø. If ùêø has a disruptive trio ùë£1, ùë£2, ùë£3,
we take ùêø‚Ä≤ to be the prefix of ùêø that ends in ùë£2. Then, ùë£1, ùë£3, ùë£2 is an ùêø‚Ä≤-path, meaning that the body
‚ñ°
of ùëÑ is not ùêø‚Ä≤-connex. Thus, we can use Lemma 3.12 in that case too.

It is known that, assuming sparseBMM, self-join-free non-free-connex CQs cannot be answered
with polylogarithmic time per answer after quasilinear preprocessing time. Thus, we conclude from
Lemma 4.5 that self-join-free acyclic CQs with disruptive trios or that are not ùêø-connex do not have

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

23

partial lexicographic direct access within these time bounds either. The case that ùëÑ is cyclic is hard
since even finding any answer for cyclic CQs is not possible efficiently assuming Hypercliqe.

5 DIRECT ACCESS BY SUM OF WEIGHTS
We now consider direct access for the more general orderings based on SUM (the sum of free-
variable weights). As with lexicographic orderings, we are able to exhaustively classify tractability
for the self-join-free CQs, even those with projections. We will show that direct access for SUM is
significantly harder and tractable only for a small class of queries.

5.1 Overview of Results
The main result of this section is a dichotomy for direct access by SUM orders:

Theorem 5.1 (Direct Access by SUM). Let ùëÑ be a CQ.
‚Ä¢ If ùëÑ is acyclic and an atom of ùëÑ contains all the free variables, then direct access by SUM is

possible in ‚ü®ùëõ log ùëõ, 1‚ü©.

‚Ä¢ Otherwise,

if ùëÑ is also self-join-free, direct access by SUM is not possible in

‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, assuming 3sum and Hyperclique.

For the positive part of the above theorem, we will see that we are able to materialize the query
answers and keep them in a sorted array that supports direct access in constant time. The proof of
the negative part requires the query answers to express certain combinations of weights. If the
query contains independent free variables, then its answers may contain all possible combinations
of their corresponding attribute weights. We will thus rely on this independence measure to identify
hard cases.

Definition 5.2 (Independent free variables). A set of vertices ùëâùëñ ‚äÜ ùëâ of a hypergraph H (ùëâ , ùê∏) is
called independent iff no pair of these vertices appears in the same hyperedge, i.e., |ùëâùëñ ‚à© ùëí | ‚â§ 1 for
all ùëí ‚àà ùê∏. For a CQ ùëÑ, we denote by ùõºfree (ùëÑ) the maximum number of variables among free(ùëÑ)
that are independent in H (ùëÑ).

Intuitively, we can construct a database instance where each independent free variable is assigned
to ùëõ different domain values with ùëõ different weights. By appropriately choosing the assignment of
the other variables, all possible ùëõùõºfree (ùëÑ) combinations of these weights will appear in the query
answers. Providing direct access then implies that we can retrieve these sums in ranked order. We
later use this to show that direct access on certain CQs allows us to solve 3sum efficiently.

Example 5.3. For ùëÑ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢), we have ùõºfree (ùëÑ) = 2, namely for variables
{ùë•, ùëß}. Let the binary relation ùëÖ be [1, ùëõ] √ó {0}, i.e., the cross product between the set of values
from 1 to ùëõ with the single value 0. If we also set ùëÜ = {0} √ó [1, ùëõ] and ùëá = [1, ùëõ] √ó {0}, then the
query answers are the ùëõ2 assignments of (ùë•, ùë¶, ùëß) to [1, ùëõ] √ó [1, ùëõ] √ó {0}. The ùëõ values of ùë• and ùëß
can be respectively assigned to any real-valued weights such that direct access on ùëÑ retrieves
their ùëñth sum in ranked order.

Our independence measure ùõºfree (ùëÑ) is related to the classification of Theorem 5.1 in the following

way:

Lemma 5.4. For an acyclic CQ ùëÑ, an atom contains all the free variables iff ùõºfree (ùëÑ) ‚â§ 1.

Proof. The ‚Äúonly if‚Äù part of ùõºfree(ùëÑ) > 1 follows immediately from Definition 5.2.
For ùõºfree (ùëÑ) = 1 and acyclic query ùëÑ, we prove that there is an atom ùëÖùëì (Xùëì ) which contains all
the free variables. First note that for |free(ùëÑ)| = 1 this is trivially true. For |free(ùëÑ)| > 1, let ùëâ be
a node in the join tree (corresponding to some atom of ùëÑ) that contains the maximum number of

, Vol. 1, No. 1, Article . Publication date: November 2023.

24

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

Query condition
Direct access
acyclic ùõºfree (ùëÑ) = 1
possible in
not possible in
acyclic ùõºfree (ùëÑ) = 2
acyclic ùõºfree (ùëÑ) ‚â• 3 not possible in

Complexity
‚ü®ùëõ log ùëõ, 1‚ü©
‚ü®ùëõ2‚àíùúñ, ùëõ1‚àíùúñ ‚ü©
‚ü®ùëõ2‚àíùúñ, ùëõ2‚àíùúñ ‚ü©
not possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü© Hypercliqe

Reason
Lemma 5.9
3sum
3sum

cyclic

Fig. 8. Possibility of direct access by sum of weights for acyclic self-join-free conjunctive queries.

free variables and assume for the sake of contradiction that there exists a free variable ùë¶ with ùë¶ ‚àâ ùëâ .
We use Vùë¶ to denote the set of nodes in the join tree that contain variable ùë¶; thus ùëâ ‚àâ Vùë¶. From ùëÑ
being acyclic follows that the nodes in Vùë¶ form a connected graph and there exists a node ùëâ ‚Ä≤ that
lies on every path from ùëâ to a node in Vùë¶. Since ùõºfree (ùëÑ) = 1, each variable ùë• ‚àà ùëâ must appear
together with ùë¶ in some query atom, implying that ùë• appears in some node ùëâ ‚Ä≤‚Ä≤ ‚àà Vùë¶. From that
and the running intersection property follows that ùë• must also appear in ùëâ ‚Ä≤ since ùëâ ‚Ä≤ lies on the
path from ùëâ to any such ùëâ ‚Ä≤‚Ä≤. Hence ùëâ ‚Ä≤ contains ùë¶ and all the ùëâ variables, violating the maximality
assumption for ùëâ .

For ùõºfree (ùëÑ) = 0, ùëÑ is a Boolean query and any atom trivially contains the empty set.

‚ñ°

Therefore, the dichotomy of Theorem 5.1 can equivalently be stated using ùõºfree(ùëÑ) ‚â§ 1 as a
criterion. We chose to use the other criterion (all free variables contained in one atom) in the
statement of our theorem statement as it is more straightforward to check. In the next section, we
proceed to prove our theorem by showing intractability for all queries with ùõºfree (ùëÑ) > 1 and a
straight-forward algorithm for ùõºfree (ùëÑ) ‚â§ 1.

5.2 Proofs
For the hardness results, we rely mainly on the 3sum hypothesis. To more easily relate our direct-
access problem to 3sum, which asks for the existence of a particular sum of weights, it is useful to
define an auxiliary problem:

Definition 5.5 (weight lookup). Given a CQ ùëÑ and a weight function ùë§ over its possible answers,
weight lookup takes as an input a database ùêº and ùúÜ ‚àà R, and returns the first index of a query answer
ùëû ‚àà ùëÑ (ùêº ) with ùë§ (ùëû) = ùúÜ in the array of answers sorted by ùë§ or ‚Äúnone‚Äù if no such answer exists.

The following lemma associates direct access with weight lookup via binary search on the query

answers:

Lemma 5.6. For a CQ ùëÑ, if the ùëò th query answer ordered by a weight function ùë§ can be directly ac-
cessed in O (ùëî(ùëõ)) time for every ùëò, then weight lookup for ùëÑ and ùë§ can be performed in O (ùëî(ùëõ) log ùëõ).

Proof. We use binary search on the sorted array of query answers. Each direct access returns a
query answer whose weight can be computed in O (1). Thus, in a logarithmic number of accesses
we can find the first occurrence of the desired weight. Since the number of answers is polynomial
‚ñ°
in ùëõ, the number of accesses is O (log ùëõ) and each one takes O (ùëî(ùëõ)) time.

Lemma 5.6 implies that whenever we are able to support efficient direct access on the sorted
array of query answers, weight lookup increases time complexity only by a logarithmic factor,
i.e., it is also efficient. The main idea behind our reductions is that via weight lookups on a CQ
with an appropriately constructed database, we can decide the existence of a zero-sum triplet over
three distinct sets of numbers, thus hardness follows from 3sum. First, we consider the case of
three independent variables that are free. These three variables are able to simulate a three-way

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

25

Cartesian product in the query answers. This allows us to directly encode the 3sum triplets using
attribute weights, obtaining a lower bound for direct access.

Lemma 5.7. If a CQ ùëÑ is self-join-free and ùõºfree (ùëÑ) ‚â• 3, then direct access by SUM is not possible in

‚ü®ùëõ2‚àíùúñ, ùëõ2‚àíùúñ ‚ü© for any ùúñ > 0 assuming 3sum.

Proof. Assume for the sake of contradiction that the lemma does not hold. We show that
this would imply an ùëÇ (ùëõ2‚àíùúñ )-time algorithm for 3sum. To this end, consider an instance of 3sum
with integer sets ùê¥, ùêµ, and ùê∂ of size ùëõ, given as arrays. We reduce 3sum to direct access over the
appropriate query and input instance by using a construction similar to Example 5.3. Let ùë•, ùë¶, and
ùëß be free and independent variables of ùëÑ, which exist because ùõºfree (ùëÑ) ‚â• 3. We create a database
instance where ùë•, ùë¶, and ùëß take on each value in [1, ùëõ], while all the other attributes have value
0. This ensures that ùëÑ has exactly ùëõ3 answers‚Äîone for each (ùë•, ùë¶, ùëß) combination in [1, ùëõ]3, no
matter the number of atoms and the variables they contain. To see this, note that since ùë•, ùë¶, and ùëß
are independent, no pair of them appears together in an atom. Also, since ùëÑ is self-join-free, each
relation appears once in the query, hence contains at most one of ùë•, ùë¶, and ùëß. Thus each relation
either contains 1 tuple (if neither ùë•, ùë¶, nor ùëß is present) or ùëõ tuples (if one of ùë•, ùë¶, or ùëß is present).
No matter on which attributes these relations are joined (including Cartesian products), the output
result is always the ‚Äúsame‚Äù set [1, ùëõ]3 √ó {0}ùëì of size ùëõ3, where ùëì is the number of free variables
other than ùë•, ùë¶, and ùëß. (We use the term ‚Äúsame‚Äù loosely for the sake of simplicity. Clearly, for
different values of ùëì the query-result schema changes, e.g., consider Example 5.3 with ùëß removed
from the head. However, this only affects the number of additional 0s in each of the ùëõ3 answer
tuples, therefore it does not impact our construction.)

For the reduction from 3sum, weights are assigned to the attribute values as ùë§ùë• (ùëñ) = ùê¥[ùëñ],
ùë§ùë¶ (ùëñ) = ùêµ [ùëñ], ùë§ùëß (ùëñ) = ùê∂ [ùëñ], ùëñ ‚àà [1, ùëõ], and ùë§ùë¢ (0) = 0 for all other attributes ùë¢. By our weight
assignment, the weights of the answers are ùê¥[ùëñ] + ùêµ [ ùëó] +ùê∂ [ùëò], ùëñ, ùëó, ùëò ‚àà [1, ùëõ], and thus in one-to-one
correspondence with the possible value combinations in the 3sum problem. We first perform the
preprocessing for direct access in ùëÇ (ùëõ2‚àíùúñ ), which enables direct access to any position in the sorted
array of query answers in ùëÇ (ùëõ2‚àíùúñ ). By Lemma 5.6, weight lookup for a query result with zero
weight is possible in ùëÇ (ùëõ2‚àíùúñ log ùëõ). Thus, we answer the original 3sum problem in ùëÇ (ùëõ2‚àíùúñ‚Ä≤) for any
‚ñ°
0 < ùúñ ‚Ä≤ < ùúñ, violating the 3sum hypothesis.

For queries that do not have three independent free variables, we need a slightly different
construction. We show next that two variables are sufficient to encode partial 3sum solutions (i.e.,
pairs of elements), enabling a full solution of 3sum via weight lookups. This yields a weaker lower
bound than Lemma 5.7, but still is sufficient to prove intractability according to our yardstick.

Lemma 5.8. If a CQ ùëÑ is self-join-free and ùõºfree (ùëÑ) = 2, then direct access by SUM is not possible in

‚ü®ùëõ2‚àíùúñ, ùëõ1‚àíùúñ ‚ü© for any ùúñ > 0 assuming 3sum.

Proof. We show that a counterexample query would violate the 3sum hypothesis. Let ùê¥, ùêµ, and ùê∂
be three integer arrays of a 3sum instance of size ùëõ. We construct a database instance with attribute
weights like in the proof of Lemma 5.7, but now with only 2 free and independent variables ùë• and ùë¶.
Hence the weights of the ùëõ2 query results are in one-to-one correspondence with the corresponding
sums ùê¥[ùëñ] + ùêµ [ ùëó], ùëñ, ùëó ‚àà [1, ùëõ]. We run the preprocessing phase for direct access in ùëÇ (ùëõ2‚àíùúñ ), which
allows us to access the sorted array of query results in ùëÇ (ùëõ1‚àíùúñ ). For each value ùê∂ [ùëò] in ùê∂, we
perform a weight lookup on ùëÑ for weight ‚àíùê∂ [ùëò], which takes time ùëÇ (ùëõ1‚àíùúñ log ùëõ) (Lemma 5.6). If
that returns a valid index, then there exists a pair (ùëñ, ùëó) of ùê¥ and ùêµ with sum ùê¥[ùëñ] + ùêµ [ ùëó] = ‚àíùê∂ [ùëò],
which implies ùê¥[ùëñ] + ùêµ [ ùëó] + ùê∂ [ùëò] = 0; otherwise no such pair exists. Since there are ùëõ values in ùê∂,
total time complexity is O (ùëõ ¬∑ ùëõ1‚àíùúñ log ùëõ) = O (ùëõ2‚àíùúñ log ùëõ). This procedure solves 3sum in ùëÇ (ùëõ2‚àíùúñ‚Ä≤)
‚ñ°
for any 0 < ùúñ ‚Ä≤ < ùúñ, violating the 3sum hypothesis.

, Vol. 1, No. 1, Article . Publication date: November 2023.

26

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

A special case of Lemma 5.8 is closely related to the problem of selection in ùëã + ùëå [31], where
we want to access the ùëò th smallest sum of pairs between two sets ùëã and ùëå . This is equivalent to
accessing the answers to ùëÑùëãùëå (ùë•, ùë¶) :‚àí ùëÖ(ùë•), ùëÜ (ùë¶) by a SUM order. It has been shown that if ùëã and ùëå
are given sorted, then selection (single access) is possible even in linear time [21, 36]. Thus, for ùëÑùëãùëå
direct access by SUM is possible in ‚ü®ùëõ log ùëõ, ùëõ‚ü© if we sort the relations during the preprocessing
phase. Compared to our ‚ü®ùëõ2‚àíùúñ, 1 ‚àí ùúñ‚ü© lower bound (see also Figure 8), notice that even though
the preprocessing of this algorithm is lower (asymptotically), the access time is not sublinear
(ùëíùëùùë†ùëñùëôùëúùëõ = 0).

So far, we have covered all self-join-free CQs with ùõºfree (ùëÑ) > 1, which, by Lemma 5.4, proves
the negative part of Theorem 5.1. Next, we show that the remaining acyclic CQs (those with
ùõºfree (ùëÑ) ‚â§ 1 or equivalently, an atom containing all the free variables) are tractable. For these
queries, a single relation contains all the answers, so direct access can easily be supported by
reducing, projecting, and sorting that relation.

Lemma 5.9. If a CQ ùëÑ is acyclic and an atom contains all the free variables, then direct access by

SUM is possible in ‚ü®ùëõ log ùëõ, 1‚ü©.

Proof. Since all free variables appear in one atom ùëÖùëì (Xùëì ), we can apply a linear-time semi-join
reduction as in the Yannakakis algorithm [47] to remove the dangling tuples, and then compute the
query answers by projecting ùëÖ on the free variables. Then, we sort the query answers by the sum
of weights, which takes total time O (ùëõ log ùëõ) for preprocessing. We maintain the sorted answers in
‚ñ°
an array, which enables constant-time direct access to individual answers in ranked order.

We now combine these lemmas with the fact that Boolean self-join-free cyclic CQs cannot be

answered in O (ùëõ polylog ùëõ) time assuming Hypercliqe, completing the proof of Theorem 5.1.

6 SELECTION BY LEXICOGRAPHIC ORDERS
We next investigate the tractability of a simpler version of the problem: When is selection, i.e.,
direct access to a single query answer, possible in quasilinear time? In this section, we answer this
question for lexicographic orders and in Section 7 we move to the case of SUM. Unlike direct-access,
we show that selection can be efficiently achieved for any lexicographic order, as long as the query
is free-connex. Our main result in this setting is summarized below:

Theorem 6.1 (Selection by LEX). Let ùëÑ be a CQ and ùêø be a partial lexicographic order.
‚Ä¢ If ùëÑ is free-connex, then selection by ùêø is possible in ‚ü®1, ùëõ‚ü©.
‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then selection by ùêø is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü©,

assuming Seth and Hyperclique.

Our theorem shows that when we limit ourselves to the problem of selection, the tractability of

the problem depends only on the query structure and is independent of the lexicographic order.

Example 6.2. Recall that direct access by ùêø is intractable for ùëÑ (ùë£1, ùë£2, ùë£3) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£3, ùë£2)
with ùêø being the lexicographic order ‚ü®ùë£1, ùë£2, ùë£3‚ü© or the partial lexicographic order ‚ü®ùë£1, ùë£2‚ü©. The
former contains a disruptive trio while the latter is not ùêø-connex. However, selection is tractable
in both cases. Still, if we project out the middle variable ùë£3 and the head of the CQ is ùëÑ (ùë£1, ùë£2),
then the CQ is not free-connex and thus, selection becomes intractable for any lexicographic
order.

For the negative part of Theorem 6.1, we reduce the problem of selection to that of counting

query answers.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

27

Lemma 6.3. For a CQ ùëÑ, if selection by some ranking function is possible in ‚ü®1, ùëì (ùëõ)‚ü© for a function

ùëì , then counting the answers to the CQ ùëÑ is possible in O (ùëì (ùëõ) log ùëõ).

Proof. We reduce the counting problem to the selection problem under any ranking function.
If the number of relations in the query is ‚Ñì, then an upper bound on the number of answers is ùëõ‚Ñì .
We use selection to determine whether any index contains an answer. With binary search on the
range of indices [0, ùëõ‚Ñì ), we can find the smallest index that does not correspond to an answer. This
process requires only O (log ùëõ‚Ñì ) = O (log ùëõ) selections since ‚Ñì is constant.
‚ñ°

We can now exploit lower bounds based on Seth. The proof does not rely on the properties of

lexicographic orders and thus captures any possible ordering of the query answers.

Lemma 6.4. If a self-join-free CQ ùëÑ is not free-connex, then selection by any ranking function is not

possible in ‚ü®1, ùëõ polylog ùëõ‚ü© assuming Seth and Hyperclique.

Proof. We use the fact that, assuming Seth, the answers to a self-join-free and acyclic non-free-
connex CQ cannot be counted in O (ùëõ2‚àíùúñ ) for any constant ùúñ [35]. By Lemma 6.3, if selection is
possible in O (ùëõ polylog ùëõ), then we can also count the number of query answers in O (ùëõ polylog ùëõ),
contradicting our hypothesis. Cyclic CQs are covered by the hardness of Boolean self-join-free
‚ñ°
cyclic CQs based on Hypercliqe, completing the proof.

For the remainder of this section, we give a selection algorithm that together with Lemma 6.4

completes the proof of Theorem 6.1

6.1 Lexicographic Selection Algorithm
We first claim that, for any free variable in a free-connex CQ, we can efficiently compute the
histogram of its assignments in the query answers. This is essentially equivalent to a group-by
query that groups the query answers based on a single variable, and then counts how many answers
fall within each group.

Lemma 6.5. Let ùëÑ be a free-connex CQ and ùë£ ‚àà free(ùëÑ). Given an input database ùêº , we can compute

in linear time how many answers in ùëÑ (ùêº ) assign ùëê to ùë£ for each value ùëê in the active domain of ùë£.

Proof. Following Proposition 2.3, we can transform the problem to an equivalent problem with
a full acyclic CQ ùëÑ ‚Ä≤. We then take a join-tree for ùëÑ ‚Ä≤, identify a node ùëâùëù containing ùë£, and introduce
a new node ùëâùëü as a neighbor of ùëâùëù . We associate ùëâùëü with the single variable ùë£, assign ùëâùëü with a
unary relation that contains the active domain of ùë£, and set ùëâùëü to be the root of the tree. Then, we
follow the preprocessing explained in Section 3.1 over this tree. By the end of this preprocessing,
each tuple is given a weight that indicates the number of different answers that this tuple agrees
‚ñ°
with when only joining its subtree. Thus, the weights for ùëâùëü will contain the desired values.

This count guides our selection algorithm as it iteratively chooses an assignment for the next
variable in the lexicographic order. Comparing the desired index with the count, it chooses an
appropriate value for the next variable, filters the remaining relations according to the chosen
value, and continues with the next variable.

Lemma 6.6. Let ùëÑ be a free-connex CQ and ùêø be a partial lexicographic order. Then, selection by ùêø

is possible in ‚ü®1, ùëõ‚ü©.

Proof. Let ‚ü®ùë£1, . . . , ùë£ùëö‚ü© be a completion of ùêø to a full lexicographic order, and let ùëò be the index
we want to access. We perform the following starting with ùëñ = 1. Let ùëê1, . . . , ùëêùëö be the ordered
values in the active domain of ùë£ùëñ (the algorithm does not sort them because that would already
take O (ùëõ log ùëõ)). We use Lemma 6.5 to count, for each ùëêùëü , the number of answers that assign ùëêùëü

, Vol. 1, No. 1, Article . Publication date: November 2023.

28

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

ùëü =1 weight(ùëêùëü ) ‚â§ ùëò < (cid:205)ùëó

to ùë£ùëñ , denoted by weight(ùëêùëü ). Then, we find ùëó such that (cid:205)ùëó‚àí1
ùëü =1 weight(ùëêùëü )
and select the value ùëê ùëó for ùë£ùëñ . This computation can be done in O (ùëõ) without sorting if we use
a weighted selection algorithm [31]. We proceed to filter all relations according to the ùë£ùëñ = ùëê ùëó
assignment, update ùëò to ùëò ‚àí (cid:205)ùëó‚àí1
ùëü =1 weight(ùëêùëü ), and continue iteratively with ùëñ + 1. In each iteration,
the value for another variable is determined, where (cid:205)ùëó‚àí1
ùëü =1 weight(ùëêùëü ) answers contain a strictly
smaller value for the variable, and the next iterations break the tie between the weight(ùëê ùëó ) answers
that have this value. For the running time, each iteration takes linear time and we have a constant
‚ñ°
number of iterations (one iteration for every free variable).

7 SELECTION BY SUM OF WEIGHTS
We now move on to the problem of selection by SUM order. Given that direct access by this order
with quasilinear preprocessing and polylogarithmic delay is possible only in very few cases, it is a
natural question to ask how the tractability landscape changes when considering the simpler task
of selection.

7.1 Overview of Results
We show that the simplifications move only a narrow class of queries to the tractable side. For
example, the 2-path query ùëÑ2(ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß) is tractable for selection, even though it is
not for direct access. On the other hand, the 3-path query ùëÑ3(ùë•, ùë¶, ùëß, ùë¢) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢)
remains intractable. Given that ùëÑ2 and ùëÑ3 both have two free and independent variables, a different
criterion than that of Section 5 (ùõºfree (ùëÑ) or number of atoms containing the free variables) is needed
for classification. To this end, we use hypergraph Hfree (ùëÑ). Recall that it is the restriction of the
query hypergraph H (ùëÑ) to the free variables, i.e., all the other variables are removed.

Definition 7.1 (Maximal Hyperedges). For a hypergraph H = (ùëâ , ùê∏), we denote the number of
maximal hyperedges w.r.t. containment by mh(H ), i.e., mh(H ) = |{ùëí ‚àà ùê∏ | (cid:154)ùëí ‚Ä≤ ‚àà ùê∏ : ùëí ‚äÇ ùëí ‚Ä≤}|.
The number of maximal hyperedges of a query ùëÑ is mh(ùëÑ) = mh(H (ùëÑ)) and the number of
free-maximal hyperedges of ùëÑ is fmh(ùëÑ) = mh(Hfree (ùëÑ)).

Example 7.2. For ùëÑ (ùë•, ùëß, ùë§) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë§), ùëà (ùë•), we have mh(ùëÑ) = 3 because ùëà
is contained in ùëÖ and fmh(ùëÑ) = 2 because after removing the existentially-quantified ùë¶, the
remainder of the ùëÜ-hyperedge is contained in ùëá .

Remark 4. For any CQ ùëÑ we have ùõºfree(ùëÑ) ‚â§ fmh(ùëÑ). This follows from the fact that each
independent variable must appear in a maximal hyperedge and that each hyperedge cannot contain
more than 1 independent variable by definition. Note also that the condition ùõºfree (ùëÑ) ‚â§ 1 is equivalent
to fmh(ùëÑ) ‚â§ 1, giving us a third possible way to express the criterion of Theorem 5.1 for direct access.
We summarize the results of this section in the following theorem, which classifies CQs ùëÑ based

on fmh(ùëÑ):

Theorem 7.3 (Selection by SUM). Let ùëÑ be a CQ.
‚Ä¢ If ùëÑ is free-connex and fmh(ùëÑ) ‚â§ 2, then selection by SUM is possible in ‚ü®1, ùëõ log ùëõ‚ü©.
‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then selection by SUM is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü©.

assuming 3sum, Hyperclique, and Seth.

Example 7.4. For the query ùëÑ2(ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß) we have already shown in Section 5
that direct access by SUM is intractable. However, given that it has two maximal hyperedges, only
one access (or a constant number of them) is in fact possible in O (ùëõ log ùëõ). The situation does not

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

29

change for ùëÑ ‚Ä≤
3(ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢) because the hyperedge of ùëá is contained in ùëÜ in
the free-restricted hypergraph. However, ùëÑ3(ùë•, ùë¶, ùëß, ùë¢) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢) which keeps the
variable ùë¢ in the answers is intractable for selection because now ùëá corresponds to a free-maximal
hyperedge.

Before proving Theorem 7.3, we first introduce some necessary concepts and prove a useful

lemma.

Absorbed atoms and variables. We say that an atom ùëí is absorbed by an atom ùëí ‚Ä≤ ‚â† ùëí if ùëâ ‚äÜ ùëâ ‚Ä≤
where ùëâ and ùëâ ‚Ä≤ are their sets of variables respectively. Additionally, we say that a variable ùë£ is
absorbed by a variable ùë¢ ‚â† ùë£ if (1) they appear in exactly the same atoms and (2) it is not the
case that ùë£ is free and ùë¢ is not free. As evident from Theorem 7.3, adding to a query atoms or
variables that are absorbed by existing ones does not affect the complexity of selection. We prove
this claim first and use it later in our analysis in order to treat queries that contain absorbed atoms
or variables.

Definition 7.5 (Maximal Contraction). A query ùëÑ ‚Ä≤ is a contraction of ùëÑ if we can obtain ùëÑ ‚Ä≤ by
iteratively removing absorbed atoms and variables, one at a time. ùëÑùëö is a maximal contraction of ùëÑ
if it is a contraction and there is no contraction of ùëÑùëö.

Note that the number of atoms of a maximal contraction ùëÑùëö of ùëÑ is mh(ùëÑ).

Example 7.6. Consider ùëÑ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¢, ùë¶), ùëÜ (ùë¶),ùëá (ùë¶, ùëß), ùëà (ùë•, ùë¢, ùë¶). Here, ùëÜ (ùë¶) is absorbed by
ùëÖ(ùë•, ùë¢, ùë¶) and ùëà (ùë•, ùë¢, ùë¶), and the latter two absorb each other. Additionally, the free variable ùë•
absorbs ùë¢ since these two variables appear together in ùëÖ and ùëà . Thus, a maximal contraction
of ùëÑ is ùëÑùëö (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶),ùëá (ùë¶, ùëß), which is unique up to renaming. The number of maximal
hyperdges of ùëÑ is mh(ùëÑ) = 2.

Lemma 7.7. Selection for a CQ ùëÑ by SUM is possible in ‚ü®1, ùëî(ùëõ)‚ü© if selection for a maximal contraction

ùëÑùëö of ùëÑ by SUM is possible in ‚ü®1, ùëî(ùëõ)‚ü©. The converse is also true if ùëÑ is self-join-free.

Proof. For the ‚Äúif‚Äù direction, we use selection on ùëÑùëö to solve selection on ùëÑ. We can remove
absorbed atoms from ùëÑ after making sure that the tuples in the database satisfy those atoms. Thus,
to remove an atom ùëÜ (Y) which is absorbed by ùëÖ(X), we filter the relation ùëÖ based on the tuples of
ùëÜ. To remove a variable ùë£ that is absorbed by ùë¢, in all relations that contain both ùë¢ and ùë£ we ‚Äúpack‚Äù
them together: We remove ùë£ and replace the ùë¢-values by values that represent the pair (ùë¢, ùë£) and
assign to it the weight ùë§ (ùë¢) + ùë§ (ùë£). (Note that we assign ùë§ (ùëß) = 0 for all variables ùëß that are not
free.) After separating any packed variables, ùëÑùëö over the modified database has the same answers
as ùëÑ over the original one and the weights are preserved.

For the ‚Äúonly if‚Äù direction, we create an extended database where the answers to ùëÑ are the same
as those of ùëÑùëö over the original database. For each step of the contraction, we make a modification
of the database. If an atom ùëÜ (Y) was removed because it was absorbed by another atom ùëÖ(X), then
we create the relation ùëÜ by copying ùúãY (ùëÖ). Note that we are allowed to create ùëÜ without restrictions
because ùëÑ has no self-joins, hence the database does not already contain the relation. If a variable ùë£
was removed because it was absorbed by another variable ùë¢, then we extend all the relations that ùë¢
appears in with another attribute ùë£ that takes the constant ‚ä• value everywhere and has weight
ùë§ùë£ (‚ä•) = 0. After projecting away the new variable, this construction does not change the query
answers or their weights.

The above reductions take linear time, which is dominated by ùëî(ùëõ) since ùëî(ùëõ) is trivially in Œ©(ùëõ)
‚ñ°

for the selection problem.

, Vol. 1, No. 1, Article . Publication date: November 2023.

30

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

To prove Theorem 7.3 we first limit our attention to the class of full CQs (for them mh(ùëÑ) =
fmh(ùëÑ)) and prove the positive part in Section 7.2 and the negative part in Section 7.3. We then
extend those results to more general CQs with projections in Section 7.4.

7.2 Tractability Proofs for Full CQs
In this section, we provide tractability results for full CQs with mh(ùëÑ) ‚â§ 2. First, we consider the
trivial case of mh(ùëÑ) = 1 where the maximal contraction of ùëÑ has only one atom. The lemma
below is a direct consequence of the linear-time array selection algorithm of Blum et al. [9].

Lemma 7.8. For a full CQ ùëÑ with mh(ùëÑ) = 1, selection by SUM is possible in ‚ü®1, ùëõ‚ü©.

Proof. By Lemma 7.7, it suffices to solve selection on the query ùëÑ (ùë•) :‚àí ùëÖ(ùë•), which is a maximal
contraction of all queries with mh(ùëÑ) = 1, up to renaming. Trivially, the weights of the single
attribute can also be viewed as tuple weights. Thus, applying linear-time selection [9] on the tuples
of ùëÖ gives us the ùëò th smallest query answer.
‚ñ°

For the mh(ùëÑ) = 2 case, we rely on an algorithm by Frederickson and Johnson [21], which
generalizes selection on the X+Y problem. If the two sets ùëã and ùëå are given sorted, then the
pairwise sums can be represented as a sorted matrix. A sorted matrix ùëÄ contains a sequence of
non-decreasing elements in every row and every column. For the ùëã + ùëå problem, a cell ùëÄ [ùëñ, ùëó]
contains the sum ùëã [ùëñ] + ùëå [ ùëó]. Even though the matrix ùëÄ has quadratically many cells, there is no
need to construct it in advance given that we can compute each cell in constant time. Selection
on a union of such matrices {ùëÄ1, . . . , ùëÄ‚Ñì } asks for the ùëò th smallest element among the cells of all
matrices.

Theorem 7.9 ([21]). Selection on a union of sorted matrices {ùëÄ1, . . . , ùëÄ‚Ñì }, where ùëÄùëö has dimension

ùëùùëö √ó ùëûùëö with ùëùùëö ‚â• ùëûùëö, is possible in time O ((cid:205)‚Ñì

ùëö=1 ùëûùëö log(2ùëùùëö/ùëûùëö)).

Leveraging this algorithm, we provide our next positive result:

Lemma 7.10. For a full CQ ùëÑ with mh(ùëÑ) = 2, selection by SUM is possible in ‚ü®1, ùëõ log ùëõ‚ü©.

Proof. The maximal contraction of full CQs with mh(ùëÑ) = 2 is ùëÑ1 (ùë•, ùëß) :‚àí ùëÖ(ùë•), ùëÜ (ùëß) or
ùëÑ2(ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß), up to renaming. Thus by Lemma 7.7, it is enough to prove an O (ùëõ log ùëõ)
bound for these two queries. As before, we turn the attribute weights into tuple weights. For ùëÑ1,
the attribute weights are trivially tuple weights and for ùëÑ2, we assign each attribute weight to only
one relation to avoid double-counting. Thus, for ùëÑ2 we compute ùë§ (ùëü ) = ùë§ùë• (ùëü [ùë•]) + ùë§ùë¶ (ùëü [ùë¶]) and
ùë§ (ùë†) = ùë§ùëß (ùë† [ùëß]) for all ùëü ‚àà ùëÖ and ùë† ‚àà ùëÜ, respectively. Since the query is full, the weights of the
query answers are in one-to-one correspondence with the pairwise sums of weights of tuples from
ùëÖ and ùëÜ.

For ùëÑ2, we group the ùëÖ and ùëÜ tuples by their ùë¶ values: we create ‚Ñì buckets of tuples where
all tuples ùë° within a bucket have equal ùë° [ùë¶] values. This can be done in linear time. For ùëÑ1, we
place all tuples in a single bucket. For each assignment of a ùë¶ value (no assignment for the case
of ùëÑ1), the query answers with those values are formed by the Cartesian product of ùëÖ and ùëÜ
tuples inside that bucket. Also, if the size of bucket ùëö is ùëõùëö, then ùëõ1 + ¬∑ ¬∑ ¬∑ + ùëõ‚Ñì = |ùëÖ| + |ùëÜ | = O (ùëõ).
We sort the tuples in each bucket (separately for each relation) according to their weight in
O (ùëõ log ùëõ) time. Assume ùëÖùëö and ùëÜùëö are the partitions of ùëÖ and ùëÜ in bucket ùëö and ùëÖùëö [ùëñ] denotes
the ùëñth tuple of ùëÖùëö in sorted order (equivalently for ùëÜùëö [ ùëó]). We define a union of sorted matrices
{ùëÄ1, . . . , ùëÄ‚Ñì } by setting for each bucket ùëö: ùëÄùëö [ùëñ, ùëó] = ùë§ (ùëÖùëö [ùëñ]) + ùë§ (ùëÜùëö [ ùëó]) if |ùëÖùëö | ‚â• |ùëÜùëö | or
ùëÄùëö [ùëñ, ùëó] = ùë§ (ùëÜùëö [ùëñ]) + ùë§ (ùëÖùëö [ ùëó]) otherwise (this distinction is needed simply to conform with the
way Theorem 7.9 is stated). Selection on these matrices is equivalent to selection on the query

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

31

answers of ùëÑ. By Theorem 7.9, if matrix ùëÄùëö has dimension ùëùùëö √ó ùëûùëö with ùëùùëö ‚â• ùëûùëö, we can achieve
ùëö=1 ùëûùëö log(2ùëùùëö/ùëûùëö)) ‚äÜ O ((cid:205)‚Ñì
selection in O ((cid:205)‚Ñì
ùëö=1 ùëõùëö) =
‚ñ°
O (ùëõ). Overall, the time spent is O (ùëõ log ùëõ) because of sorting.

ùëö=1 ùëûùëö ¬∑ 2ùëùùëö/ùëûùëö) = O ((cid:205)‚Ñì

ùëö=1 ùëùùëö) = O ((cid:205)‚Ñì

7.3 Intractability Proofs for Full CQs
Though selection is a special case of direct access, we show that for most full CQs, time
O (ùëõ polylog ùëõ) is still unattainable. We start from the cases covered by Lemma 5.7. To extend
that result to the selection problem, note that a selection algorithm can be repeatedly applied for
solving direct access. For queries with three free and independent variables, an O (ùëõ2‚àíùúñ ) selection
algorithm would imply a ‚ü®1, ùëõ2‚àíùúñ ‚ü© direct-access algorithm, which we showed to be impossible.
Therefore, the following immediately follows from Lemma 5.7:

Corollary 7.11. If a full CQ ùëÑ is self-join-free and ùõºfree (ùëÑ) ‚â• 3, then selection by SUM is not

possible in ‚ü®1, ùëõ2‚àíùúñ ‚ü© for any ùúñ > 0 assuming 3sum.

This leaves only a small fraction of full acyclic CQs to be covered: queries with two or fewer
independent variables and three or more maximal hyperedges. We next show that these queries all
contain a length-3 chordless path12, a property that we will use in order to prove a lower bound.

Lemma 7.12. The hypergraph of the maximal contraction of any full acyclic CQ with ùõºfree (ùëÑ) < 3

and mh(ùëÑ) > 2 contains a chordless path of four variables.

Proof. First, for ùõºfree (ùëÑ) = 1, we have by Lemma 5.4 that an atom contains all free variables,
thus mh(ùëÑ) = 1. For the case of ùõºfree(ùëÑ) = 2, let ùë•, ùë¶ be independent variables. We distinguish two
cases.

The first case is that each of ùë• and ùë¶ appear in exactly one maximal hyperedge. Denote the
maximal hyperedge containing ùë¶ by ùëíùë¶ and the maximal hyperedge containing ùë• by ùëíùë• . Since there
are at least 3 maximal edges, there is a hyperedge ùëí0 such that ùë•, ùë¶ ‚àâ ùëí0. Since ùëí0 is not absorbed
by ùëíùë¶, there exists ùëé ‚àà ùëí0 and ùëé ‚àâ ùëíùë¶. Thus, ùëé and ùë¶ are not neighbors. Since {ùëé, ùë•, ùë¶} is not an
independent set, we conclude that ùëé and ùë• are neighbors, and because only one maximal hyperedge
can contain ùë•, we get that ùëé ‚àà ùëíùë• . Similarly, since ùëí0 is not absorbed by ùëíùë• , we conclude that there
exists a neighbor ùëè of ùë¶ such that ùëè ‚àà ùëí0, ùëè ‚àâ ùëíùë• . Overall, we have a chordless path ùë• ‚àí ùëé ‚àí ùëè ‚àí ùë¶.

The second case is that ùë• or ùë¶ (or both) appear in at least two hyperedges. Assume WLOG
that two maximal hyperedges contain ùë•. According to the claim we shall prove next, this means
that there exist non-neighbors ùëé,ùëè that are both neighbors of ùë•. Then, since {ùëé, ùëè, ùë¶} is not an
independent set, we have that ùë¶ is a neighbor of ùëé or ùëè. Assume WLOG it is ùëé. Then, we have a path
ùë¶ ‚àí ùëé ‚àí ùë• ‚àí ùëè such that ùë¶ and ùë• are not neighbors and ùëé and ùëè are not neighbors. We conclude that
also ùë¶ and ùëè are not neighbors, otherwise this path is a chordless cycle contradicting acyclicity.

We now prove the claim that if two maximal hyperedges in an acyclic hypergraph both contain
a node ùë•, then there exists a chordless path ùëé ‚àí ùë• ‚àí ùëè for some vertices ùëé, ùëè. If there are two non-
neighboring neighbors of ùë•, then we are done. For the sake of contradiction, assume that there are
no such neighbors. We prove with induction on the number of neighbors that for every ùëò neighbors
of ùë•, there exists a hyperedge that contains all of them and ùë•. For the base of the induction, consider
2 neighbors of ùë•. By our assumption, they must necessarily be neighbors. Since the graph is acyclic,
every triangle must be covered by a hyperedge, so there exists a hyperedge containing both of them
and ùë•. For the inductive step, consider ùëò neighbors of ùë•. By the induction hypothesis, every subset

12The conference version of
these
CQs is the 3-path query ùëÑ (ùë•, ùë¶, ùëß, ùë¢) :‚àí ùëÖ (ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢). This is not correct because for example,
ùëÑ‚Ä≤ (ùë•, ùë¶, ùëß, ùë¢, ùëè) :‚àí ùëÖ (ùë•, ùëè, ùë¶), ùëÜ (ùë¶, ùëè, ùëß),ùëá (ùëß, ùëè, ùë¢) also satisfies ùõºfree (ùëÑ‚Ä≤) < 3 and mh(ùëÑ‚Ä≤) > 2. However, as we
show here, the same reduction that was used for the 3-path query ùëÑ can also work for any of these CQs.

[14] erroneously claims that

the maximal contraction of

this paper

, Vol. 1, No. 1, Article . Publication date: November 2023.

32

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

of these neighbors of size ùëò ‚àí 1 appears in a hyperedge together with ùë•. If there is no hyperedge that
contains all ùëò of them, then these neighbors (without ùë•) form a (ùëò, ùëò ‚àí 1)-hyperclique contradicting
acyclicity. If there is, then these ùëò neighbors along with ùë• form a (ùëò + 1, ùëò)-hyperclique. This
contradicts acyclicity unless there is a hyperedge containing all ùëò variables and ùë•. This concludes
the induction. Now consider all neighbors of ùë•. By the induction, one edge contains all of them and
ùë•. This contradicts the fact that ùë• appears in two maximal hyperedges.

‚ñ°

Now that we established the precise form of the queries we want to classify, we proceed to prove
their intractability. We approach this in a different way than the other hardness proofs: instead of
relying on the 3sum hypothesis, we instead show that tractable selection would lead to unattainable
bounds for Boolean cyclic queries.

Lemma 7.13. If a full CQ ùëÑ is self-join-free and the hypergraph of its maximal contraction contains
a chordless path of four variables, then selection by SUM is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü© assuming
Hyperclique.

Proof. We will show that if selection for ùëÑ can be done in O (ùëõ polylog ùëõ), then the Boolean
triangle query can be evaluated in the same time bound, which contradicts the Hypercliqe
hypothesis. Let ùëÑ ‚ñ≥ () :‚àí ùëÖ ‚Ä≤(ùë• ‚Ä≤, ùë¶ ‚Ä≤), ùëÜ ‚Ä≤(ùë¶ ‚Ä≤, ùëß ‚Ä≤),ùëá ‚Ä≤(ùëß ‚Ä≤, ùë• ‚Ä≤) be a query over a database ùêº ‚Ä≤ of size O (ùëõ). We
will construct a database ùêº for ùëÑ so that weight lookup (see Definition 5.5) for ùëÑ over ùêº will allow
us to answer ùëÑ ‚ñ≥ over ùêº ‚Ä≤.

Let ùë• ‚àí ùë¶ ‚àí ùëß ‚àí ùë¢ be the chordless path in the hypergraph of the maximal contraction of ùëÑ.
This implies that there are atoms ùëÖ(ùë•, ùë¶, XùëÖ), ùëÜ (ùë¶, ùëß, XùëÜ ),ùëá (ùëß, ùë¢, Xùëá ) in ùëÑ. We construct a database
ùêº where in all relations, we let ùë• and ùë¢ respectively take all the values that ùë• ‚Ä≤ can take in ùêº ‚Ä≤. We
repeat the same for ùë¶ with ùë¶ ‚Ä≤ and ùëß with ùëß ‚Ä≤. The values that all the other variables can take in ùêº are
set to a fixed domain value ‚ä•. Because the ùë• ‚àí ùë¶ ‚àí ùëß ‚àí ùë¢ path is chordless, we know that the pair
ùë• ‚àí ùëß never appears in a single atom, and so is the case for ùë• ‚àí ùë¢ and ùë¶ ‚àí ùë¢. Therefore, the size of
each relation in ùêº is bounded by |ùëÖ ‚Ä≤| or |ùëÜ ‚Ä≤| or |ùëá ‚Ä≤| and the size of ùêº is thus O (ùëõ). Now consider a
query answer ùëû ‚àà ùëÑ (ùêº ). If ùúãùë¢ (ùëû) = ùúãùë• (ùëû), then ùúãùë• ùë¶ùëß (ùëû) has to satisfy all three atoms of ùëÑ ‚ñ≥. This is
because an (ùë•, ùë¶) pair of values has to satisfy ùúãùë• ùë¶ (ùëÖ) which contains precisely the tuples of ùëÖ ‚Ä≤, and
similarly for (ùë¶, ùëß) with ùúãùë¶ùëß (ùëÜ). For a (ùëß, ùë•) pair of values, these are the same as (ùëß, ùë¢) and satisfy
ùúãùëßùë¢ (ùëá ) contains precisely the tuples of ùëá ‚Ä≤.

We now assign weights as follows: If dom ‚äÜ R, then ùë§ùë• (ùëñ) = ùëñ, ùë§ùë¢ (ùëñ) = ‚àíùëñ, and for all other
variables ùë°, ùë§ùë° (ùëñ) = 0. Otherwise, it is also easy to assign ùë§ùë• and ùë§ùë¢ in a way s.t. ùë§ùë• (ùëñ) = ùë§ùë• ( ùëó) if and
only if ùëñ = ùëó and ùë§ùë¢ (ùëñ) = ‚àíùë§ùë• (ùëñ). This is done by maintaining a lookup table for all the domain values
that we map to some arbitrary real number. Then, we perform weight lookup for ùëÑ to identify if a
query result with zero weight exists. If it does for some result ùëû, then ùë§ùë• (ùúãùë• (ùëû))+. . .+ùë§ùë¢ (ùúãùë¢ (ùë¢)) = 0
hence ùúãùë• (ùëû) = ùúãùë¢ (ùëû) and ùëÑ ‚ñ≥ is true, otherwise it is false. If the time to access the sorted array
of ùëÑ-answers takes O (ùëõ polylog ùëõ), then by Lemma 5.6 weight lookup also takes O (ùëõ polylog ùëõ),
‚ñ°
contradicting Hypercliqe.

For full CQs, the negative part of Theorem 7.3 for acyclic queries is proved by combining
Corollary 7.11 and Lemma 7.13 together with Lemma 7.12 and Lemma 7.7 which show that we
cover all queries. For self-join-free cyclic CQs, we once again resort to the hardness of their Boolean
version based on Hypercliqe.

So far we have proved the restriction of Theorem 7.3 to full CQs as summarized below.

Lemma 7.14. Let ùëÑ be a full CQ.
‚Ä¢ If mh(ùëÑ) ‚â§ 2, then selection by SUM is possible in ‚ü®1, ùëõ log ùëõ‚ü©.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

33

‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then selection by SUM is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü©.

assuming 3sum and Hyperclique.

7.4 CQs with Projections
To complete the proof of Theorem 7.3, we now show how the results from Sections 7.2 and 7.3
generalize to free-connex CQs. For that purpose, we mainly rely on Proposition 2.3, which allows
us to reduce a free-connex CQ to a full CQ. One difficulty that we encounter is that the full CQ that
we obtain by this reduction may not necessarily be unique, as it depends on the join tree of the
inclusion extension that we choose to use. For instance, the inclusion extension allows us to include
unary hyperedges {ùë• } for all query variables ùë•, if these do not exist already. Thus, the following
definition will be useful:

Definition 7.15 (Reduced Full CQs). For a free-connex CQ ùëÑ, RF(ùëÑ) is the set of all possible full

CQs we can obtain by the reduction of Proposition 2.3.

We now show that for our purposes, the tractability of a free-connex CQ ùëÑ coincides with that

of any of the CQs in RF(ùëÑ).

Lemma 7.16. Let ùëÑ be a free-connex CQ and ùëÑ ‚Ä≤ ‚àà RF(ùëÑ). Selection for ùëÑ by SUM is possible in
‚ü®1, ùëî(ùëõ)‚ü© if selection for ùëÑ ‚Ä≤ by SUM is possible in ‚ü®1, ùëî(ùëõ)‚ü©. The converse is also true if ùëÑ is self-join-free.

Proof. The ‚Äúif‚Äù direction is trivial from Proposition 2.3: If ùëÑ is over a database ùêº , we can use ùëÑ ‚Ä≤

over a modified database ùêº ‚Ä≤ to obtain exactly the same answers.

For the ‚Äúonly if‚Äù direction, we use selection on ùëÑ to answer selection on ùëÑ ‚Ä≤. If ùëÑ ‚Ä≤ is over a
database ùêº ‚Ä≤, then we construct a modified database ùêº for ùëÑ as follows. We copy all the relations of
ùêº ‚Ä≤ into ùêº and for every existential variable of ùëÑ, we add an attribute to the corresponding relations
that takes the same ‚ä• value in all tuples. The weight of all the new attributes is set to 0 for ‚ä•. Now,
the answers to ùëÑ over ùêº are the same as those of ùëÑ ‚Ä≤ over ùêº ‚Ä≤ if we ignore all the ‚ä• values from the
answers.

The above reductions take linear time, which is dominated by ùëî(ùëõ) since ùëî(ùëõ) is trivially in Œ©(ùëõ)
‚ñ°

for the selection problem.

From Lemma 7.14, we can decide the tractability of any (self-join-free) full CQ in RF(ùëÑ) by the
number of its maximal hyperedges. We now connect this measure to the free-maximal-hyperedges
fmh(ùëÑ), which is a measure easily computable from the original query ùëÑ.

Lemma 7.17. For a free-connex CQ ùëÑ, fmh(ùëÑ) = mh(ùëÑ ‚Ä≤) for any ùëÑ ‚Ä≤ ‚àà RF(ùëÑ).

Proof. Let ùëá be the ext-free(ùëÑ)-connex tree used to derive ùëÑ ‚Ä≤ and ùëá ‚Ä≤ be the connected subtree
containing exactly the free variables of ùëÑ (which are also the free variables of ùëÑ ‚Ä≤). Recall that the
nodes of ùëá ‚Ä≤ correspond to the atoms of ùëÑ ‚Ä≤.

First, we prove that every node of ùëá ‚Ä≤ is a subset of some hyperedge of Hfree (ùëÑ) and as a result
fmh(ùëÑ) ‚â§ mh(ùëÑ ‚Ä≤). Consider a node of ùëá ‚Ä≤ and let ùëâ be the corresponding set of variables. Note that
ùëâ are all free variables since they appear in ùëá ‚Ä≤. Since ùëá ‚Ä≤ is a subtree of ùëá , which in turn is a join-tree
of an inclusive extension of H (ùëÑ), there must exist an atom in ùëÑ that contains ùëâ . Let the set of
variables of that atom be ùëâ ‚à™ ùëâ1 ‚à™ ùëã , for some disjoint sets ùëâ , ùëâ1, ùëã , where ùëâ1 are free variables and
ùëã are existential. By the definition of Hfree (ùëÑ), there must exist a hyperedge ùëâ ‚à™ ùëâ1 in Hfree (ùëÑ).
Second, we prove that every maximal hyperedge in Hfree (ùëÑ) is a subset of some node of ùëá ‚Ä≤ and
as a result mh(ùëÑ ‚Ä≤) ‚â§ fmh(ùëÑ). Let ùëâ be the (free) variables of a hyperedge of Hfree (ùëÑ). Then, there
must exist an atom ùëí in ùëÑ that contains the ùëâ variables. If ùëí corresponds to a node in ùëá ‚Ä≤, then we
are done. Otherwise, ùëí corresponds to a node in ùëá \ ùëá ‚Ä≤. Let ùëâ ‚Ä≤ be the first node of ùëá ‚Ä≤ on the path

, Vol. 1, No. 1, Article . Publication date: November 2023.

34

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

from ùëâ to some node in ùëá ‚Ä≤. A path between ùëâ and any node of ùëá ‚Ä≤ must necessarily pass through
ùëâ ‚Ä≤, otherwise ùëá would contain a cycle. Since ùëâ contains only free variables, each one of them has
to appear in some node of ùëá ‚Ä≤ and by the running intersection property, in all the nodes on the path
‚ñ°
to ùëâ . Therefore, ùëâ ‚Ä≤ contains all the variables of ùëâ .

Lemmas 7.16 and 7.17 allow us to generalize the positive part of Lemma 7.14 from full CQs to
free-connex CQs by simply replacing the mh(ùëÑ) measure with fmh(ùëÑ). For the negative part, we
need three ingredients to cover the class of self-join-free CQs: The case of free-connex CQs with
fmh(ùëÑ) > 2 is also covered by the lemmas above. For acyclic CQs that are not free-connex, we
use Lemma 6.4 which applies to any ranking function, including SUM. Finally, the intractability of
cyclic CQs follows from Hypercliqe.

8 FUNCTIONAL DEPENDENCIES
In this section, we extend our results to apply to databases that are constrained by Functional
Dependencies (FDs). From the point of view of a CQ, if the allowed input databases are restricted
to satisfy an FD, an assignment to some of the variables uniquely determines the assignment to
another variable. Our positive results are not affected by this, since an algorithm can simply ignore
the FDs. However, certain CQs that were previously intractable may now become tractable in
the presence of FDs. Our goal is to investigate how the tractability landscape changes for all four
variants we have investigated so far: direct access and selection by LEX or SUM orders.

Concepts and Notation for FDs. In this section, we assume that the database schema S is
extended with FDs of the form ùëÖ : ùê¥ ‚Üí ùêµ, where ùê¥ and ùêµ are sets of integers. This means that if
the tuples of relation ùëÖ agree on the attributes indexed by ùê¥, then they also agree on those indexed
by ùêµ. Though FDs are usually defined directly on the schema of the database, we express them from
now on using the query variables for convenience. More specifically, we assume that an FD has the
form ùëÖ : X ‚Üí Y for some atom ùëÖ(Z) where X, Y ‚äÜ Z. We now briefly explain why this assumption
can be done without loss of generality. There are two factors that can render such a notation not
well-defined. The first is self-joins. However, our negative results apply only to self-join-free CQs
regardless of this issue, and positive results for self-join-free CQs naturally extend to CQs with self
joins: Self-joins can be reduced in linear time to a self-join-free form by replacing the ùëñth occurrence
of a relational symbol ùëÖ with a fresh relational symbol ùëÖùëñ and then copying relation ùëÖ into ùëÖùëñ . The
second factor is repeated appearances of a variable in an atom (e.g., ùëÖ(ùë•, ùë•)). Such an appearance
can be eliminated in a linear-time preprocessing step that performs the selection on the relation
and then removes the duplicate variable. For the other direction of the equivalence, the projected
relation can be transformed to one with the repeated variable by duplicating the relevant column in
the relation. We say that an FD X ‚Üí Y is satisfied by an input database ùêº if for all tuples ùë°1, ùë°2 ‚àà ùëÖùêº
we have that if ùë°1 [ùë•] = ùë°2 [ùë•], ‚àÄùë• ‚àà X, then ùë°1 [ùë¶] = ùë°2 [ùë¶], ‚àÄùë¶ ‚àà Y. For such an FD, we sometimes
say that X implies Y. WLOG, we assume that all FDs are of the form ùëÖ : X ‚Üí ùë¶ where ùë¶ is a single
variable because we can replace an FD of the form ùëÖ : X ‚Üí Y with a set of FDs {ùëÖ : X ‚Üí ùë¶ | ùë¶ ‚àà Y}.
If |X| = 1, we say that the FD is unary. In this paper, we focus only on unary FDs.

Complexity and Reductions. In all previous sections, the computational problem we were
considering was defined by a CQ and we were interested in the worst-case complexity over all
possible input databases. Now, the problem is defined by a CQ ùëÑ and a set of FDs Œî. Thus the input
is limited to databases that satisfy all the FDs Œî. Therefore, to determine the hardness of a problem,
we need to consider the complexity of the combination of CQ and FDs. In particular, the results in
the previous sections apply when the given FD set is empty. Our reductions from now on are from
a certain CQ and FD set to another CQ and another FD set.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

35

Definition 8.1 (Exact Reduction). We say that there is an exact reduction from a CQ ùëÑ with FDs Œî

to a CQ ùëÑ ‚Ä≤ with FDs Œî‚Ä≤ if for every database ùêº that satisfies Œî:

(1) We can construct a database ùêº ‚Ä≤ in O (|ùêº |) that satisfies the FDs Œî‚Ä≤.
(2) There is a bijection ùúè from ùëÑ ‚Ä≤(ùêº ‚Ä≤) to ùëÑ (ùêº ) that is computable in O (1).

Additionally, we say that an exact reduction is weight-preserving if for every weight function ùë§
given for ùëÑ, there is a weight function ùë§ ‚Ä≤ for ùëÑ ‚Ä≤ such that ùë§ (ùúè (ùëû‚Ä≤)) = ùë§ ‚Ä≤(ùëû‚Ä≤), ‚àÄùëû‚Ä≤ ‚àà ùëÑ ‚Ä≤(ùêº ‚Ä≤).

Known Results. Carmeli and Kr√∂ll [12] reasoned about the complexity of enumerating the
answers to a CQ by looking at an equivalent extended CQ over an extended schema and FDs. We
recall the definition of this extension here13 and then proceed to use it for our classification.

Definition 8.2 (FD-extension [12]). Given a self-join free CQ ùëÑ and a set of FDs Œî, we define two

types of extension steps. For an FD ùëÖ : X ‚Üí ùë¶:

(1) If X ‚äÜ Z for some atom ùëÜ (Z) and ùë¶ ‚àâ Z, then increase the arity of ùëÜ by one, replace ùëÜ (Z)

with ùëÜ (Z, ùë¶), and add ùëÜ : X ‚Üí ùë¶ to the FD set.

(2) If X ‚äÜ free(ùëÑ) and ùë¶ ‚àâ free(ùëÑ), then add ùë¶ to free(ùëÑ).

The FD-extension of ùëÑ and Œî is a CQ ùëÑ + and a set of FDs Œî+ that are obtained as the fixpoint of
the above two extension steps.

Example 8.3. Consider the CQ ùëÑ2ùëÉ (ùë•, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß). This CQ is not free-connex, therefore
selection (or direct access) is not possible by any order (Lemma 6.4). Now, if we know that the
database satisfies the FD ùëÜ : ùë¶ ‚Üí ùëß, we can take the unique ùëß-value for every ùë¶ from ùëÜ and
add it to every tuple of ùëÖ, while preserving the same query answers. Thus, we can extend the
2ùëÉ (ùë•, ùëß) :‚àí ùëÖ(ùë•, ùë¶, ùëß), ùëÜ (ùë¶, ùëß) and add the FD ùëÖ : ùë¶ ‚Üí ùëß. While the original CQ was not
CQ to ùëÑ +
free-connex, notice that ùëÑ +
2ùëÉ now is. This makes it tractable for all the tasks that we consider in
this article since it is acyclic and ùëÖ contains all the free variables (see Section 5).

Similarly,

the FD-extension may transform a cyclic CQ into an acyclic one. For
: ùë¶ ‚Üí ùëß, we get the FD-extension
ùëÑ ‚ñ≥ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë•) with the FD ùëÜ
‚ñ≥ (ùë•, ùë¶, ùëß) :‚àí ùëÖ(ùë•, ùë¶, ùëß), ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë•) with the additional FD ùëÖ : ùë¶ ‚Üí ùëß which is acyclic be-
ùëÑ +
cause ùëÖ contains all the variables. Like ùëÑ +
‚ñ≥ is tractable for all the tasks
that we consider. This is despite the fact that the cyclic ùëÑ ‚ñ≥ without FDs is intractable for all of
these tasks.

2ùëÉ (ùë•, ùëß), we have that ùëÑ +

Previous work [12] showed exact reductions between the original CQ (with the original FDs) and
its extension (with the extended FDs) in both directions, proving that the two tasks are essentially
equivalent for the task of enumeration.

Theorem 8.4 ([12]). Let ùëÑ be a self-join free CQ with FDs Œî. There are exact reductions between ùëÑ

with Œî and ùëÑ + with Œî+ in both directions.

This theorem alone implies that, if ùëÑ + has a tractable structure (free-connex for enumeration),
then the original CQ ùëÑ is tractable too. That is because according to the definition of an exact
reduction, an instance for the extended schema can be built in linear time, and answers to the
extension can be translated back to answers of the original CQ in constant time per answer.

We restate this result below in a slightly more general way, adding the fact that these reductions
are actually weight-preserving. Intuitively, this means that any SUM ordering of the answers in
one problem can be preserved through the reduction.

13The original definition is more involved since it also applies to self-joins. We only give the restriction of the definition
required for our purposes. We also state it for general FDs instead of unary FDs, which is useful for our discussion in
Section 8.3

, Vol. 1, No. 1, Article . Publication date: November 2023.

36

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

Lemma 8.5. Let ùëÑ be a self-join free CQ with FDs Œî. There are weight-preserving exact reductions

between ùëÑ with Œî and ùëÑ + with Œî+ in both directions.

Proof. The bijections between the answers in the exact reductions do not change the values of
the free variables of ùëÑ. For the reduction from the query to its extension, we set the weights of
the new free variables to zero. For the reduction from the extension to the original query, if the
extension has a free variable ùë¶ that is existential in the original query, then some free variable ùë• in
the original query implies ùë¶. To maintain the contribution of the ùë¶-weight in the query answers, we
simply increase the weight of every domain value of ùë• by adding the weight of the corresponding
‚ñ°
domain value of ùë¶ (i.e., the one that is implied by the FD).

Proving lower bounds using the extension is more tricky. If the extension has a structure that is
known to make a CQ intractable (e.g. not free-connex for enumeration), it is not necessarily the
case that it is intractable together with the FDs. Still, Carmeli and Kr√∂ll [12] were able to prove
lower bounds for the cases where the extension is not free-connex. We proceed to use the same
technique that they used in order to prove a more general statement.

Eliminating FDs. Our goal is to show that for the extension of a self-join-free CQ, unary FDs
essentially do not affect our classification. This result is similar in spirit to other results in database
theory where the complexities of problems with FDs were also identified to be the complexity of
the original complexity criterion applied to the FD extension after removing the FDs [22, 25, 33]. To
achieve that, we reduce a CQ without FDs to the same CQ with FDs, under the condition that the
CQ and the FDs we reduce to are the extension of some CQ.

Lemma 8.6. Let ùëÑ be a self-join free CQ with unary FDs Œî. There is a weight-preserving exact

reduction from ùëÑ + without FDs to ùëÑ + over Œî+.

Proof. We are given a database instance ùêº for ùëÑ + that does not necessarily satisfy any FDs and
we construct another database instance ùêº ‚Ä≤ with roughly the same answers (there is a bijection ùúè
such that ùëÑ +(ùêº ) = ùúè (ùëÑ +(ùêº ‚Ä≤))) that satisfies the extended FDs Œî+. Given a variable ùë£, denote by Xùë£
the set of all variables that are transitively implied by ùë£. By the definition of the extension, for
every variable ùë£, every atom of ùëÑ + that contains ùë£ also contains all Xùë£ variables. For every tuple in
the relation that corresponds to such an atom, we replace the ùë£-value with the concatenation of
Xùë£-values. We set the weight of a concatenated value to be equal to the weight of the ùë£ variable as
it was in the original database ùêº . This construction can be done in linear time, and the resulting
database satisfies the FDs.

We now claim that this construction preserves the answers through a bijection. Note that for
every free variable ùë£, by the definition of the extension, the variables in Xùë£ are all free. Every answer
to the original problem gives an answer to our construction by assigning every free variable ùë£ to
the concatenation of the assignments of Xùë£. Every answer to our construction gives an answer to
the original problem by keeping only the value that corresponds to the original variable for every
free variable. In both cases, the weights of the query answers are the same in the two instances. ‚ñ°

Example 8.7. We illustrate the reduction above through the CQ ùëÑ (ùë•, ùëß, ùë¢) :‚àí ùëÖ(ùë•, ùë¶),
ùëÜ (ùë¶, ùëß),ùëá (ùëß, ùë¢) with FD ùëá : ùëß ‚Üí ùë¢. The FD-extension is ùëÑ +(ùë•, ùëß, ùë¢) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ ‚Ä≤(ùë¶, ùëß, ùë¢),ùëá (ùëß, ùë¢)
with extended FDs ùëá : ùëß ‚Üí ùë¢ and ùëÜ ‚Ä≤ : ùëß ‚Üí ùë¢. Notice that ùëÑ +, like ùëÑ, is not free-connex. From
that structural property of ùëÑ +, we know that without any FDs it is intractable, e.g., for the task
of selection by Lemma 7.16. The reduction shows that this is still the case, even if we take the
extended FDs into account.

Concretely, the reduction takes a database that does not satisfy the extended FDs and constructs
another database that does. For example, ùëÜ ‚Ä≤ could contain tuples (1, 1, 1) and (1, 1, 2) where the

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

37

middle attribute (corresponding to ùëß) does not imply the third attribute (corresponding to ùë¢).
To modify this database, we replace the ùëß-values by values that pack ùëß and ùë¢ together as (ùëß, ùë¢).
Conceptually, and abusing the notation a little, ùëÜ ‚Ä≤(ùë¶, ùëß, ùë¢) is further replaced with ùëÜ ‚Ä≤‚Ä≤(ùë¶, (ùëß, ùë¢), ùë¢)
and the whole query with ùëÑ + ‚Ä≤(ùë•, (ùëß, ùë¢), ùë¢) :‚àí ùëÖ(ùë•, ùë¶), ùëÜ ‚Ä≤‚Ä≤(ùë¶, (ùëß, ùë¢), ùë¢),ùëá ‚Ä≤((ùëß, ùë¢), ùë¢). The aforemen-
tioned two tuples of ùëÜ ‚Ä≤ are thus replaced by (1, (1, 1), 1) and (1, (1, 2), 2). Now, the third attribute
is trivially dependent on the middle one because it is contained in the latter. This reduction is
only possible because, being an FD-extension of ùëÑ, ùëÑ + always contains ùë¢ in all of its atoms that
contain ùëß. The weights of the query answers are preserved if we only keep the weight of ùëß in the
concatenated (ùëß, ùë¢) values, i.e., ùë§ùëß ((1, 1)) = ùë§ùëß (1) and ùë§ùëß ((1, 2)) = ùë§ùëß (1).

Note that a reduction in the opposite direction is trivial since, given an instance that satisfies
the FDs, it is also a valid instance for the instance without the FDs. Thus, this lemma proves that
the two problems are equivalent. By combining this fact with the equivalence of CQs and their
FD-extensions (Lemma 8.5), we obtain the following result that is also useful for lower bounds and
allows us to classify queries based on the structure of their extension.

Theorem 8.8. Let ùëÑ be a self-join free CQ with unary FDs Œî. There are weight-preserving exact

reductions between ùëÑ over Œî and ùëÑ + without FDs in both directions.

8.1 Sum of Weights
For a sum-of-weights order, applying a weight-preserving exact reduction cannot reorder the query
answers since their weight is preserved. More formally, the classes of self-join-free CQs that are
tractable for selection and direct access are both closed under weight-preserving exact reductions.
Therefore, Theorem 8.8 immediately proves that for both problems, we can classify self-join-free
CQs by their FD-extension.

Theorem 8.9. Let ùëÑ be a CQ with unary FDs Œî.
‚Ä¢ If ùëÑ + is acyclic and an atom of ùëÑ + contains all the free variables, then direct access for ùëÑ by

SUM is possible in ‚ü®ùëõ log ùëõ, 1‚ü©.

‚Ä¢ Otherwise,

if ùëÑ is also self-join-free, direct access for ùëÑ by SUM is not possible in

‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, assuming 3sum and Hyperclique.

Theorem 8.10. Let ùëÑ be a CQ with unary FDs Œî.
‚Ä¢ If ùëÑ + is free-connex and fmh(ùëÑ +) ‚â§ 2, then selection for ùëÑ by SUM is possible in ‚ü®1, ùëõ log ùëõ‚ü©.
‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then selection for ùëÑ by SUM is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü©,

assuming 3sum, Hyperclique, and Seth.

8.2 Lexicographic Orders
We now move on to lexicographic orders, where we also provide dichotomies for unary FDs.
The analysis gets more intriguing compared to SUM since the FDs may interact with the given
lexicographic order in non-trivial ways that have not been explored by any previous work we know
of. Like before, we use as our main tool an extension of the query according to the FDs and show
an equivalence between the extension and the original problem with respect to tractability. The
key difference now is that the extension may also reorder the variables in the lexicographic order
according to the FDs.

8.2.1 Tractability Results. Our positive results rely on two ingredients. The first ingredient is to
have a reduction that preserves precisely the same lexicographic order that we begin with. This is
necessary because if the query answers after the reduction follow a different lexicographic order,

, Vol. 1, No. 1, Article . Publication date: November 2023.

38

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

then we cannot conclude anything about the position of a query answer in the original problem.
Thus, we define a stricter notion of an exact reduction.

Definition 8.11 (Lex-preserving exact reduction). Consider a CQ ùëÑ and FDs Œî, and a CQ ùëÑ ‚Ä≤ and
FDs Œî‚Ä≤ such that the free variables of ùëÑ are also free variables in ùëÑ ‚Ä≤. An exact reduction via a
bijection ùúè from ùëÑ and Œî to ùëÑ ‚Ä≤ and Œî‚Ä≤ is called lex-preserving if, for every partial lexicographic
order ùêø for ùëÑ and for all query answers ùëû1, ùëû2 of ùëÑ ‚Ä≤, we have that ùëû1 ‚â∫‚Ä≤ ùëû2 iff ùúè (ùëû1) ‚™Ø ùúè (ùëû2) where
‚™Ø and ‚™Ø‚Ä≤ are orders implied by ùêø.

In a lex-preserving exact reduction, we have the guarantee that even though the query answers
might not be exactly the same, those that are in a 1-1 correspondence will be placed in the same
position when ordered. Thus, such a reduction allows us to solve direct access or selection on a
different problem and translate the answers back to the original problem. Analogously to weight-
preserving exact reductions for SUM, our notions of tractability for lexicographic orders are
preserved under lex-preserving exact reductions.

Now notice that the forward reduction from ùëÑ with Œî to ùëÑ + with Œî+ in Lemma 8.5 is a lex-
preserving exact reduction. This is because as we argued before, the reduction to the extension does
not change the values of any of the free variables. The following lemma is, similarly to Lemma 8.5,
a slight generalization of the result of Carmeli and Kr√∂ll [12], this time suited to lexicographic
orders.

Lemma 8.12. Let ùëÑ be a self-join free CQ with FDs Œî. There is a lex-preserving exact reduction from

ùëÑ with Œî to ùëÑ + with Œî+.

Importantly, the other direction of Lemma 8.12 is not true in general, since the FD-extension
may contain additional free variables that do not appear in the original query ùëÑ. Similarly, the
reduction in Lemma 8.6 is also not lex-preserving. As an example, consider the simple example of
ùëÑ (ùë£1, ùë£2, ùë£3) :‚àí ùëÖ(ùë£1, ùë£2, ùë£3) with the FD ùëÖ : ùë£1 ‚Üí ùë£3. Sorting the constructed instance by ‚ü®ùë£1, ùë£2, ùë£3‚ü©
will actually result in an ordering according to ‚ü®(ùë£1, ùë£3), ùë£2, ùë£3‚ü© which is the same as ‚ü®ùë£1, ùë£3, ùë£2‚ü©. That
is precisely the reason why proving lower bounds for the case of lexicographic orders is not as
straightforward as the SUM case.

Going back to the positive side, we can now use Lemma 8.12 to reduce our problem to its
extension. But in order to cover all tractable cases, we need to modify the FD-extension so that the
FDs are also taken into account in the lexicographic order. In particular, if a variable ùë¢ is implied by
a variable ùë£ and ùë¢ comes after ùë£ in the order, then ùë¢ is placed right after ùë£ in the reordering.

Definition 8.13 (FD-reordered extension). Given a self-join-free CQ ùëÑ, a set of unary FDs Œî and a
partial lexicographic order ùêø, their FD-reordered extension is a CQ ùëÑ +, a set of unary FDs Œî+ and
a partial lexicographic order ùêø+. We take ùëÑ + and Œî+ to be as defined in Definition 8.2, and ùêø+ is
obtained from ùêø by applying the following reordering step iteratively from index ùëñ = 0 until we
reach the end of the list ùêø: Find all variables Xùêø [ùëñ ] that are transitively implied by ùêø[ùëñ] and place
them in consecutive indexes starting from ùëñ + 1. Note that ùêø may grow in this process to contain
variables that are free in ùëÑ + though they are not free in ùëÑ.

Example 8.14. Consider the CQ ùëÑ (ùë£1, ùë£2, ùë£3, ùë£4) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£3, ùë£2),ùëá (ùë£2, ùë£4) with the FD ùëÖ :
ùë£1 ‚Üí ùë£3 and the lexicographic order ùêø = ‚ü®ùë£1, ùë£2, ùë£3, ùë£4‚ü©. This order contains the disruptive trio
ùë£1, ùë£2, ùë£3 and is intractable for direct access according to the results of Section 3. When applying the
FD-extension, we get that ùëÑ + = ùëÑ because ùë£1 already appears with ùë£3 in ùëÖ. For the FD-reordered
extension, we reorder the lexicographic order into ùêø = ‚ü®ùë£1, ùë£3, ùë£2, ùë£4‚ü©, which contains no disruptive
trio and is tractable for direct access.

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

39

We next prove two important properties for the FD-reordered extension:

Lemma 8.15. For every variable ùë£ of an order ùêø+ of an FD-reordered extension, all variables transi-

tively implied by ùë£ that appear after ùë£ in ùêø+ have to appear consecutively after ùë£ in ùêø+.

Proof. The property holds at the end of the process due to the transitivity of implication.
Consider a variable ùë¶ implied by ùë£ that appears after ùë£ in ùêø+ and assume there is a variable ùë• that is
in-between ùë£ and ùë¶ but is not implied by ùë£. We can further assume that ùë• is the first variable in the
order with that property. Now, ùë• must have been inserted at that position when handling another
variable ùëß that is in-between ùë£ and ùë• in ùêø+ and that ùëß ‚Üí ùë•. Since ùë• is the first one not implied by ùë£,
we have that ùë£ ‚Üí ùëß which gives us ùë£ ‚Üí ùë•, contradicting our assumption.

‚ñ°

We next show that the reordering of the variables gives the same result because of the extended

FDs Œî+. As a consequence, we can study the complexity of the query with the FD-reordering.

Lemma 8.16. Given a self-join-free CQ ùëÑ, a set of unary FDs Œî and a partial lexicographic order ùêø,

for every database ùêº that satisfies Œî+, ordering ùëÑ +(ùêº ) by ùêø is the same as ordering it by ùêø+.

Proof. Once the value for a variable ùë£ is set, a variable implied by ùë£ can have at most one possible
value, so as long as it comes after ùë£ in the order, its exact position or whether it is free cannot
influence the answer ordering. Therefore, the reordered extension is equivalent to the original
‚ñ°
extension.

We now have what we need in order to show that if the reordered extension has a tractable
structure, then we can conclude tractability for the original problem. Specifically, if the CQ ùëÑ + of
the FD-reordered extension is free-connex, ùêø+-connex and has no disruptive trio, then we know it
is tractable with respect to direct access by Theorem 4.1. Lemma 8.16 shows that direct access to
the extension by ùêø+ is the same as direct access by ùêø, which is the order that we want. Finally, we
use the fact that the reduction given in Lemma 8.5 preserves lexicographic orders to conclude that,
given an input to ùëÑ, we can construct an FD-reordered extension where tractable direct access for
ùëÑ + by ùêø+ will give us tractable direct access for ùëÑ by ùêø. Following the same process for selection
and using Theorem 6.1, we conclude that if the CQ ùëÑ + is free-connex, then selection for ùëÑ by ùêø is
tractable.

Intractability Results. We begin by some negative results that can easily be inferred from the

8.2.2
results we have already proved in this paper or by past work.

Lemma 8.17. Let ùëÑ be a self-join-free CQ with unary FDs Œî. If ùëÑ + is not free-connex then for any
ranking function, direct access for ùëÑ is not possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü© assuming sparseBMM
and Hyperclique, and selection for ùëÑ is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü© assuming Seth and Hyper-
clique.

Proof. For direct access, the impossibility is implied by the hardness of enumeration. If we
could have direct access for ùëÑ, then we can also have enumeration with the same time bounds.
Then, by the exact reduction of Theorem 8.8, we would be able to enumerate the answers to the
non-free-connex CQ ùëÑ + with no FDs with quasilinear preprocessing and polylogarithmic delay,
which is known to contradict sparseBMM or Hypercliqe [5, 11].

For selection, we use Lemma 6.3 together with the simple observation that an exact reduction
preserves the number of query answers. Irrespective of the order, Theorem 8.8 tells us that counting
the answers to ùëÑ with Œî gives us the count of query answers of ùëÑ + with no FDs. Since a logarithmic
number of selections can be used to find the latter, the count of answers of the non-free-connex

, Vol. 1, No. 1, Article . Publication date: November 2023.

40

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

CQ ùëÑ + can be found in quasilinear time, contradicting Seth (if ùëÑ + is acyclic) or Hypercliqe (if
‚ñ°
ùëÑ + is cyclic).

It is left to handle the cases that the reordering of the extension is free-connex acyclic but has a
disruptive trio or is not ùêø+-connex. The case that the extension is not ùêø+-connex can be shown using
a reduction from enumeration for a non-free-connex CQ (Lemma 3.12) as we did in Section 4.2.

Lemma 8.18. Let ùëÑ be a self-join-free CQ with unary FDs Œî, and let ùêø be a partial lexicographic order.
If ùëÑ + is acyclic but not ùêø+-connex, then direct access for ùëÑ by ùêø is not possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©
assuming sparseBMM.

Proof. Using Lemma 3.12, it is enough to find a prefix ùêø‚Ä≤ of ùêø+ that is closed under implication
such that the extension ùëÑ + is not ùêø‚Ä≤-connex. We simply take ùêø‚Ä≤ = ùêø+. Then, we conclude that there
is efficient enumeration for the acyclic but not free-connex ùëÑ + with ùêø‚Ä≤ as free variables. Since ùêø‚Ä≤
is closed under implication, ùëÑ + is an extension of itself, so we can use Lemma 8.6 to conclude
that there exists efficient enumeration to ùëÑ + with ùêø‚Ä≤ as free variables even without FDs. This is a
‚ñ°
contradiction as it is not free-connex.

The case where the reordered extension has a disruptive trio ùë£1, ùë£2, ùë£3 is slightly more intricate
as we cannot directly use Lemma 8.6. One might hope that, as we did in the proof of Lemma 3.13,
we would be able to take a prefix of ùêø+ that ends in ùë£2 and then apply Lemma 8.6. However, that is
not always possible here because we have the additional restriction that the prefix we pick has to
be closed under implication. This is required so that the CQ we obtain when we restrict the free
variables to the prefix is a valid FD-extension. Unfortunately, a prefix that includes ùë£2 but not ùë£3
and is closed under implication does not necessarily exist. That is the case when some variable
implies both ùë£2 and ùë£3.

Example 8.19. Consider the CQ ùëÑ (ùë£1, ùë£2) :‚àí ùëÖ(ùë£1, ùë£3), ùëÜ (ùë£3, ùë£2) with the FD ùëÜ : ùë£2 ‚Üí ùë£3 and
the lexicographic order ùêø = ‚ü®ùë£1, ùë£2‚ü©. The extended reordering is ùêø+ = ‚ü®ùë£1, ùë£2, ùë£3‚ü© which contains
the disruptive trio ùë£1, ùë£2, ùë£3. To reuse our previous approach, we would want to claim that using
lexicographic direct access to ùëÑ +, we can enumerate the CQ with only ùë£1, ùë£2 as free variables
(which happens to be in this case the same as ùëÑ that we started with). However, this is not a
contradiction because ùëÑ is not known to be hard for enumeration as it has FDs and it is not an
extension (ùë£2 implies ùë£3 while ùë£2 is free and ùë£3 is existential). In fact, we cannot find any prefix ùêø‚Ä≤
of ùêø+ that is closed under implication such that ùëÑ + is not ùêø‚Ä≤-connex. To circumvent this issue, we
encode the enumeration of ùëÑ without FDs into the extension by combining the binary search
approach from Lemma 3.12 with the concatenation reduction from Lemma 8.6. The difference is
that before we used binary search to enumerate a prefix of the free variables, and now this prefix
might stop in the middle of a variable with concatenated values. Thus, ùë£2 will be assigned the
values (ùë£2, ùë£3), and we will use binary search to skip over the ùë£3 values.

Lemma 8.20. Let ùëÑ be a self-join-free CQ with unary FDs Œî, and let ùêø be a partial lexicographic
order. If ùëÑ + is acyclic and ùêø+ contains a disruptive trio in ùëÑ +, then direct access for ùëÑ by ùêø is not
possible in ‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü© assuming sparseBMM.

Proof. Consider a disruptive trio ùë£1, ùë£2, ùë£3 in ùëÑ + with respect to ùêø+. Let ùêø‚Ä≤ be the prefix of ùêø+
ending in ùë£2, and let ùëÑ ‚Ä≤ be the query with the body of ùëÑ + and the free variables ùêø‚Ä≤. As ùë£1, ùë£3, ùë£2 is an
ùêø‚Ä≤-path, we know that ùëÑ ‚Ä≤ is acyclic but not free-connex, and so it cannot be enumerated efficiently
without FDs assuming sparseBMM.

We first claim that the reordering ùêø+ is stable with respect to the first occurrences of implying
variables. More precisely, let ùëé and ùëè be variables in ùêø+ such that ùëé appears before ùëè in ùêø+. We

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

41

claim that the first variable implying ùëè does not appear before the first variable implying ùëé. Indeed,
consider the first variable ùë£ùëè implying ùëè. If ùë£ùëè appears before ùëé, by Lemma 8.15, ùë£ùëè also implies ùëé. So,
the first variable that implies ùëé is ùë£ùëè or a variable before it. As a consequence, due to the reordering,
the first variable implying a value that appears after ùë£2 appears after all first variables implying
values before (and including) ùë£2.

We can now claim that we can enumerate the answers to ùëÑ ‚Ä≤ without FDs using lexicographic
direct access to ùëÑ + with FDs. We use the same construction as we did in Lemma 8.6 by assigning
each variable a concatenation of the variables it implies, except that now we need to be careful
about the order in which we concatenate: we start with any variables in ùêø+, ordered by ùêø+. The
constructed database satisfies the FDs. It is only left to use binary search, similarly to Lemma 3.12,
in order to enumerate the distinct values of the variables of ùêø‚Ä≤. Due to the previous paragraph, we
‚ñ°
know that these appear as a prefix, before the first value of a variable after ùë£2.

The results of this section regarding lexicographic orders are summarized as follows.

Theorem 8.21. Let ùëÑ be a CQ with unary FDs Œî and ùêø be a partial lexicographic order.
‚Ä¢ If ùëÑ + is free-connex and ùêø+-connex and does not have a disruptive trio with respect to ùêø+, then

direct access for ùëÑ by ùêø is possible in ‚ü®ùëõ log ùëõ, log ùëõ‚ü©.

‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then direct access for ùëÑ by ùêø is not possible in

‚ü®ùëõ polylog ùëõ, polylog ùëõ‚ü©, assuming sparseBMM and Hyperclique.

Theorem 8.22. Let ùëÑ be a CQ with unary FDs Œî and ùêø be a partial lexicographic order.
‚Ä¢ If ùëÑ + is free-connex, then selection for ùëÑ by ùêø is possible in ‚ü®1, ùëõ‚ü©.
‚Ä¢ Otherwise, if ùëÑ is also self-join-free, then selection for ùëÑ by ùêø is not possible in ‚ü®1, ùëõ polylog ùëõ‚ü©,

assuming Seth and Hyperclique.

8.3 A Note on General FDs
We discussed only unary FDs, where a single variable implies another. The positive side of our
results also holds for general FDs where a combination of variables may imply a variable. We
simply need to take the general form of the extension (given an FD ùë•1, . . . , ùë•ùëö ‚Üí ùë¶, we add ùë¶
wherever all of ùë•1, . . . , ùë•ùëö appear). If the extension has a tractable form, Lemma 8.5 and Lemma 8.12
show that the original query is tractable too. However, extending the negative results requires a
much more intricate analysis that goes beyond the scope of this work. Already for enumeration,
even though Carmeli and Kr√∂ll [12] showed a classificiation for general FDs when the extension is
acyclic, the cyclic case is not resolved, and they provide a specific example of a CQ and FDs where
the complexity is unknown.

9 CONCLUSIONS
We investigated the task of constructing a direct-access data structure to the output of a query
with an ordering over the answers, as well as the restriction of the problem to accessing a single
answer (the selection problem). We presented algorithms for fragments of the class of CQs for
lexicographic and sum-of-weights orders. The direct access algorithms take quasilinear construction
time in the size of the database, and logarithmic time for access. For selection, our algorithms
take quasilinear or even linear time. We further showed that within the class of CQs without self-
joins, our algorithms cover all the cases where these complexity guarantees are feasible, assuming
conventional hypotheses in the theory of fine-grained complexity. We were also able to precisely
capture how the frontier of tractability changes under the presence of unary FDs.

This work opens up several directions for future work, including the generalization to more
expressive queries (CQs with self-joins, union of CQs, negation, etc.), other kinds of orders (e.g.,

, Vol. 1, No. 1, Article . Publication date: November 2023.

42

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

min/max over the tuple entries), and a continuum of complexity guarantees (beyond ‚ü®quasilinear,
logarithmic time‚ü©).

Generalizing the question posed at the beginning of the Introduction, we view this work as
part of a bigger challenge that continues the line of research on factorized representations in
databases [37, 38]: how can we represent the output of a query in a way that, compared to the
explicit representation, is fundamentally more compact and efficiently computable, yet equally
useful to downstream operations?

ACKNOWLEDGMENTS
We thank the anonymous reviewers for their constructive comments and Florent Capelli for
his input on simplifying the proof of Lemma 6.6. Nofar Carmeli and Nikolaos Tziavelis were
supported by Google PhD Fellowships. Nofar Carmeli and Benny Kimelfeld were supported by the
German Research Foundation (DFG) Project 412400621 (DIP program). Nikolaos Tziavelis, Wolfgang
Gatterbauer, and Mirek Riedewald were supported by the National Science Foundation (NSF) under
award number IIS-1956096. Wolfgang Gatterbauer was supported by NSF under award number
CAREER IIS-1762268. Nofar Carmeli was supported by the French government under management
of Agence Nationale de la Recherche as part of the ‚ÄúInvestissements d‚Äôavenir‚Äù program, reference
ANR-19-P3IA-0001 (PRAIRIE 3IA Institute).

REFERENCES
[1] Amir Abboud and Virginia Vassilevska Williams. 2014. Popular Conjectures Imply Strong Lower Bounds for Dynamic

Problems. In FOCS. 434‚Äì443. https://doi.org/10.1109/FOCS.2014.53

[2] Nir Ailon and Bernard Chazelle. 2005. Lower Bounds for Linear Degeneracy Testing. J. ACM 52, 2 (2005), 157‚Äì171.

https://doi.org/10.1145/1059513.1059515

[3] Noga Alon, Raphael Yuster, and Uri Zwick. 1997. Finding and Counting Given Length Cycles. Algorithmica 17, 3

(1997), 209‚Äì223. https://doi.org/10.1007/BF02523189

[4] Guillaume Bagan, Arnaud Durand, and Etienne Grandjean. 2007. On Acyclic Conjunctive Queries and Constant Delay

Enumeration. In CSL. 208‚Äì222. https://doi.org/10.1007/978-3-540-74915-8_18

[5] Guillaume Bagan, Arnaud Durand, Etienne Grandjean, and Fr√©d√©ric Olive. 2008. Computing the jth solution of a first-
order query. RAIRO-Theoretical Informatics and Applications 42, 1 (2008), 147‚Äì164. https://doi.org/10.1051/ita:2007046
[6] Ilya Baran, Erik D. Demaine, and Mihai PÀáatra≈ücu. 2005. Subquadratic Algorithms for 3SUM. In Algorithms and Data

Structures. 409‚Äì421. https://doi.org/10.1007/11534273_36

[7] Christoph Berkholz, Fabian Gerhardt, and Nicole Schweikardt. 2020. Constant delay enumeration for conjunctive

queries: a tutorial. SIGLOG 7, 1 (2020), 4‚Äì33. https://doi.org/10.1145/3385634.3385636

[8] Christoph Berkholz, Jens Keppeler, and Nicole Schweikardt. 2017. Answering Conjunctive Queries under Updates. In

PODS (PODS ‚Äô17). 303‚Äì318. https://doi.org/10.1145/3034786.3034789

[9] Manuel Blum, Robert W. Floyd, Vaughan Pratt, Ronald L. Rivest, and Robert E. Tarjan. 1973. Time bounds for selection.

JCSS 7, 4 (1973), 448 ‚Äì 461. https://doi.org/10.1016/S0022-0000(73)80033-9

[10] Pierre Bourhis, Alejandro Grez, Louis Jachiet, and Cristian Riveros. 2021. Ranked Enumeration of MSO Logic on Words.

In ICDT, Vol. 186. 20:1‚Äì20:19. https://doi.org/10.4230/LIPIcs.ICDT.2021.20

[11] Johann Brault-Baron. 2013. De la pertinence de l‚Äô√©num√©ration: complexit√© en logiques propositionnelle et du premier ordre.

Ph.D. Dissertation. U. de Caen. https://hal.archives-ouvertes.fr/tel-01081392

[12] Nofar Carmeli and Markus Kr√∂ll. 2020. Enumeration Complexity of Conjunctive Queries with Functional Dependencies.

TCS 64, 5 (2020), 828‚Äì860. https://doi.org/10.1007/s00224-019-09937-9

[13] Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald. 2021. Tractable
Orders for Direct Access to Ranked Answers of Conjunctive Queries. , 325‚Äì341 pages. https://doi.org/10.1145/3452021.
3458331

[14] Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald. 2021. Tractable
Orders for Direct Access to Ranked Answers of Conjunctive Queries. In PODS. 325‚Äì341. https://doi.org/10.1145/
3452021.3458331

[15] Nofar Carmeli, Shai Zeevi, Christoph Berkholz, Benny Kimelfeld, and Nicole Schweikardt. 2020. Answering (Unions
of) Conjunctive Queries Using Random Access and Random-Order Enumeration. In PODS. 393‚Äì409. https://doi.org/
10.1145/3375395.3387662

, Vol. 1, No. 1, Article . Publication date: November 2023.

Tractable Orders for Direct Access to Ranked Answers of CQs

43

[16] Shaleen Deep and Paraschos Koutris. 2021. Ranked Enumeration of Conjunctive Query Results. In ICDT, Vol. 186.

5:1‚Äì5:19. https://doi.org/10.4230/LIPIcs.ICDT.2021.5

[17] Arnaud Durand. 2020. Fine-Grained Complexity Analysis of Queries: From Decision to Counting and Enumeration. In

PODS (PODS‚Äô20). 331‚Äì346. https://doi.org/10.1145/3375395.3389130

[18] Jeff Erickson. 1995. Lower Bounds for Linear Satisfiability Problems. In SODA. 388‚Äì395. https://dl.acm.org/doi/10.

5555/313651.313772

[19] Robert W. Floyd and Ronald L. Rivest. 1975. Expected Time Bounds for Selection. Commun. ACM 18, 3 (1975), 165‚Äì172.

https://doi.org/10.1145/360680.360691

[20] Greg N. Frederickson. 1993. An Optimal Algorithm for Selection in a Min-Heap. Inf. Comput. 104, 2 (1993), 197‚Äì214.

https://doi.org/10.1006/inco.1993.1030

[21] Greg N. Frederickson and Donald B. Johnson. 1984. Generalized Selection and Ranking: Sorted Matrices. SIAM J.

Comput. 13, 1 (1984), 14‚Äì30. https://doi.org/10.1137/0213002

[22] Cibele Freire, Wolfgang Gatterbauer, Neil Immerman, and Alexandra Meliou. 2015. The Complexity of Resilience and
Responsibility for Self-Join-Free Conjunctive Queries. PVLDB 9, 3 (2015), 180‚Äì191. https://doi.org/10.14778/2850583.
2850592

[23] Anka Gajentaan and Mark H Overmars. 1995. On a class of O(n2) problems in computational geometry. Computational

Geometry 5, 3 (1995), 165 ‚Äì 185. https://doi.org/10.1016/0925-7721(95)00022-2

[24] Wolfgang Gatterbauer and Dan Suciu. 2015. Approximate Lifted Inference with Probabilistic Databases. PVLDB 8, 5

(2015), 629‚Äì640. https://doi.org/10.14778/2735479.2735494

[25] Wolfgang Gatterbauer and Dan Suciu. 2017. Dissociation and propagation for approximate lifted inference with standard
relational database management systems. VLDB J. 26, 1 (2017), 5‚Äì30. https://doi.org/10.1007/s00778-016-0434-5
[26] Martin Charles Golumbic. 1980. Algorithmic Graph Theory and Perfect Graphs. Academic Press, Chapter 4, 81 ‚Äì 104.

https://doi.org/10.1016/C2013-0-10739-8

[27] Georg Gottlob, Gianluigi Greco, Nicola Leone, and Francesco Scarcello. 2016. Hypertree Decompositions: Questions

and Answers. In PODS. 57‚Äì74. https://doi.org/10.1145/2902251.2902309

[28] Etienne Grandjean. 1996. Sorting, linear time and the satisfiability problem. Annals of Mathematics and Artificial

Intelligence 16, 1 (1996), 183‚Äì236. https://doi.org/10.1007/BF02127798

[29] Egbert Harzheim. 2006. Ordered sets. Vol. 7. Springer Science & Business Media. https://doi.org/10.1007/b104891
[30] Russell Impagliazzo and Ramamohan Paturi. 2001. On the Complexity of K-SAT. J. Comput. Syst. Sci. 62, 2 (2001),

367‚Äì375. https://doi.org/10.1006/jcss.2000.1727

[31] Donald B Johnson and Tetsuo Mizoguchi. 1978. Selecting the Kth element in ùëã + ùëå and ùëã1 + ùëã2 + ¬∑ ¬∑ ¬∑ + ùëãùëö. SIAM J.

Comput. 7, 2 (1978), 147‚Äì153. https://doi.org/10.1137/0207013

[32] Jens Keppeler. 2020. Answering Conjunctive Queries and FO+MOD Queries under Updates. Ph.D. Dissertation. Humboldt-

Universit√§t zu Berlin, Mathematisch-Naturwissenschaftliche Fakult√§t. https://doi.org/10.18452/21483

[33] Benny Kimelfeld. 2012. A dichotomy in the complexity of deletion propagation with functional dependencies. In PODS.

191‚Äì202. https://doi.org/10.1145/2213556.2213584

[34] Andrea Lincoln, Virginia Vassilevska Williams, and R. Ryan Williams. 2018. Tight Hardness for Shortest Cycles and

Paths in Sparse Graphs. In SODA. 1236‚Äì1252. https://doi.org/10.1137/1.9781611975031.80

[35] Stefan Mengel. 2021. A short note on the counting complexity of conjunctive queries. CoRR abs/2112.01108 (2021).

https://arxiv.org/abs/2112.01108

[36] A. Mirzaian and E. Arjomandi. 1985. Selection in X + Y and matrices with sorted rows and columns. Inform. Process.

Lett. 20, 1 (1985), 13 ‚Äì 17. https://doi.org/10.1016/0020-0190(85)90123-1

[37] Dan Olteanu and Maximilian Schleich. 2016. Factorized Databases. SIGMOD Rec. 45, 2 (2016), 5‚Äì16. https://doi.org/10.

1145/3003665.3003667

[38] Dan Olteanu and Jakub Zavodny. 2012. Factorised representations of query results: size bounds and readability. In

ICDT. 285‚Äì298. https://doi.org/10.1145/2274576.2274607

[39] Mihai Patrascu. 2010. Towards polynomial lower bounds for dynamic problems. In STOC. 603. https://doi.org/10.

1145/1806689.1806772

[40] Mihai PƒÉtra≈ücu and Ryan Williams. 2010. On the Possibility of Faster SAT Algorithms. In SODA. 1065‚Äì1075. https:

//doi.org/10.1137/1.9781611973075.86

[41] Nikolaos Tziavelis, Deepak Ajwani, Wolfgang Gatterbauer, Mirek Riedewald, and Xiaofeng Yang. 2020. Optimal
Algorithms for Ranked Enumeration of Answers to Full Conjunctive Queries. PVLDB 13, 9 (2020), 1582‚Äì1597. https:
//doi.org/10.14778/3397230.3397250

[42] Nikolaos Tziavelis, Wolfgang Gatterbauer, and Mirek Riedewald. 2020. Optimal Join Algorithms Meet Top-k. In

SIGMOD. 2659‚Äì2665. https://doi.org/10.1145/3318464.3383132

[43] Nikolaos Tziavelis, Wolfgang Gatterbauer, and Mirek Riedewald. 2021. Beyond Equi-joins: Ranking, Enumeration and

Factorization. PVLDB 14, 11 (2021), 2599‚Äì2612. https://doi.org/10.14778/3476249.3476306

, Vol. 1, No. 1, Article . Publication date: November 2023.

44

Nofar Carmeli, Nikolaos Tziavelis, Wolfgang Gatterbauer, Benny Kimelfeld, and Mirek Riedewald

[44] Nikolaos Tziavelis, Wolfgang Gatterbauer, and Mirek Riedewald. 2022. Any-k Algorithms for Enumerating Ranked

Answers to Conjunctive Queries. CoRR abs/2205.05649 (2022). https://doi.org/10.48550/arXiv.2205.05649

[45] Virginia Vassilevska Williams. 2015. Hardness of Easy Problems: Basing Hardness on Popular Conjectures such as the
Strong Exponential Time Hypothesis (Invited Talk). In IPEC, Vol. 43. 17‚Äì29. https://doi.org/10.4230/LIPIcs.IPEC.2015.17
[46] Xiaofeng Yang, Mirek Riedewald, Rundong Li, and Wolfgang Gatterbauer. 2018. Any-ùëò Algorithms for Exploratory

Analysis with Conjunctive Queries. In ExploreDB. 1‚Äì3. https://doi.org/doi.org/10.1145/3214708.3214711

[47] Mihalis Yannakakis. 1981. Algorithms for Acyclic Database Schemes. In VLDB. 82‚Äì94. https://dl.acm.org/doi/10.5555/

1286831.1286840

[48] Zhuoyue Zhao, Robert Christensen, Feifei Li, Xiao Hu, and Ke Yi. 2018. Random Sampling over Joins Revisited. In

SIGMOD. 1525‚Äì1539. https://doi.org/10.1145/3183713.3183739

A NOMENCLATURE

Definition
relation
atom/hyperedge/node of join tree
schema
database (instance)
size of ùêº (number of tuples)
domain
list of variables/attributes
tuple
variable
CQ
query answer of CQ ùëÑ over database ùêº
set of answers of ùëÑ over ùêº
projection of ùëÖ on X
free variables of query ùëÑ
variables of query or atom
set of query atoms
hypergraph associated with query ùëÑ

Symbol
ùëÖ, ùëÜ,ùëá , ùëà , ùëÖ1, ùëÖ2
ùëí, ùëâ , ùëâ1, ùëâ2
S
ùêº
ùëõ
dom
X, Y, Z
ùë°
ùë•, ùë¶, ùëß, ùë¢, ùë£1, ùë£2
ùëÑ
ùëû ‚àà ùëÑ (ùêº )
ùëÑ (ùêº )
ùúãX (ùëÖ)
Xùëì , free(ùëÑ)
var(ùëÑ), var(ùëí)
atoms(ùëÑ)
H (ùëÑ) = (ùëâ , ùê∏)
Hfree (ùëÑ) = (ùëâ , ùê∏) restriction of H (ùëÑ) to free variables only
ùëá
V
ùõºfree (ùëÑ)
mh(ùëÑ)
fmh(ùëÑ)
ùêø = ‚ü®ùë£1, . . . , ùë£ùëö‚ü©
ùë§ùë•
ùë§ùëÑ
ùë§
Œ£ùë§
ùúÜ
‚™Ø
Œ†
order
ordering
ùëÖ : X ‚Üí Y
Œî
‚ü®ùëõ log ùëõ, log ùëõ‚ü©
‚ü®1, ùëõ log ùëõ‚ü©

join tree
set of join tree nodes
maximum number of independent free variables of ùëÑ
number of maximal hyperedges (with respect to containment) in H (ùëÑ)
number of free-maximal hyperedges = maximal hyperedges in Hfree (ùëÑ)
lexicographic order of variables
weight function for variable ùë•: dom ‚Üí R
weight function for query answers
short form for all ùë§ùë• and ùë§ùëÑ
sum-of-weights order
a real-valued weight
total order over query answers
family of orders
a binary relation as in partial/total order
a sorted list according to an order
FD where X implies Y in ùëÖ
set of FDs
direct access with O (ùëõ log ùëõ) preprocessing and O (log ùëõ) per access
selection in O (ùëõ log ùëõ)

, Vol. 1, No. 1, Article . Publication date: November 2023.

