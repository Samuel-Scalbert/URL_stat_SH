High-performance Web-Audio applications, the
challenges of writing a DAW
Michel Buffa, Antoine Vidal-Mazuy

To cite this version:

Michel Buffa, Antoine Vidal-Mazuy. High-performance Web-Audio applications, the challenges of
writing a DAW. Réunion de lancement du projet ANR DOTS, IRCAM, Oct 2023, paris, France.
￿hal-04337523￿

HAL Id: hal-04337523

https://inria.hal.science/hal-04337523

Submitted on 12 Dec 2023

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Distributed under a Creative Commons Attribution 4.0 International License

Applications Web-Audio hautes performances, 
challenges à relever pour écrire un DAW 

Journée ANR DOTS

13 Octobre 2023
(Lien de la présentation : 
https://tinyurl.com/4yj2ppkt)

Michel Buffa, Antoine Vidal-Mazuy
 Université Côte d’Azur / Laboratoire I3S / INRIA, WIMMICS group,
michel.buffa@univ-cotedazur.fr, @micbuffa

Qui suis-je ?

● Professeur à l’Université Côte d’Azur (UCA), France

○ Membre de l’équipe WIMMICS commune à INRIA et au laboratoire I3S du CNRS
○ W3C Advisory Committee Representative pour UCA
○ Membre du W3C WebAudio Working 

Group depuis 2014 

○ michel.buffa@univ-cotedazur.fr, @micbuffa

● Membre du groupe qui a créé les

Web Audio Modules aka
“Plugins audio pour la plateforme Web”

○ Sorte de “VST pour le Web”

WebAudio, WebMidi, etc.

Concepts de l’API WebAudio

Opérations audio dans un Audio Context

let ctx = new AudioContext();

Conception modulaire :

● Opérations audio : audio nodes
…qui forment un graphe audio 

let osc1 = ctx.createOscillator();
osc1.frequency.value = 440;
let gain1 = ctx.createGain();
gain1.gain.value = 0.1;

osc1.connect(gain1).connect(ctx.destination);

Architecture interne

● Un thread de rendu appelé "audio thread" est seul en charge du rendu 

sonore du graphe audio 

○ Contraintes temps réel fortes : thread de haute priorité. Si il ne parvient pas à fournir le 

prochain bloc d’échantillons sonores à temps : glitches, dropouts etc. 

● Un thread de contrôle, exécutant en général du code JavaScript code pour 
la GUI, fait les appels à l’API WebAudio, gère la création et modification du 
graphe audio. 

○

connexion/déconnexion des nœuds,  modifications de leurs paramètres. 

● Les noeuds “standards” traitent le son dans l’audio thread

○

Les algorithmes DSP sont fixes, seuls les paramètres peuvent être modifiés. 

● Le nœud AudioWorklet (2018) fournit une solution pour implémenter des 

traitements DSP personnalisés dans l’audio thread.

○
○

AudioWorkletNode code: main thread
AudioWorkletProcessor code: audio thread (avec constraintes/limitations)

WebAudioModules (WAM)
audio plugins pour le Web

WAMs dans des logiciels hôtes

https://ampedstudio.com

https://sequencer.party/

https://mainline.i3s.unice.fr/wam2/packages/_/

DAWs commerciaux

Soundtrap.com (spotify)

Bandlab.com

Ampedstudio.com

Soundation.com

DAWs: le photoshop de l’audio

Enregistrer, éditer, 
mixer des pistes 
audio et MIDI

Pistes associées à 
des plugins (effets 
audio, instruments)

Automation des 
paramètres

Gérer le temps-réel 
et la latence!

WAM-Studio: un DAW open source compatible WAM 
!

Motivation:

● Démonstrateur 
des APIs du 
W3C

● Pas de DAW 
web open 
source complet 
disponible

● Développer un 
DAW web: 
problèmes 
spécifiques lié à 
l’environnement 
sandboxé

https://wam-studio.i3s.univ-cotedazur.fr

Challenge 1: concevoir un framework host/plugin Web

Challenge 2 : host/plugin communication (i.e 44.1Khz)
Contrôle bas-niveau de la lecture nécessaire.
Chaque piste est un AudioWorklet 
(WAMNode+WAMProcessor)

● Le processeur d’une piste communique 

avec les plugins à la fréquence 
d'échantillonnage (WAM SDK) sans 
quitter le thread audio !

○
○

Automation des paramètres : DEMO
Envoyer des notes MIDI : DEMO

No need to schedule ahead in 
time like in the famous article “A 
tale of two clocks” by C.Wilson.

Challenge 3 : gérer la latence

Latence = RETARD ! 

1 - Latency Round-trip: la durée qu'il faut pour qu'un signal, tel qu'une voix chantée ou un solo de guitare, passe 
d'une entrée analogique sur une interface audio, à travers les convertisseurs analogique-numérique, jusqu'au DAW, puis 
retourne ressorte par l'interface audio. Si cette durée est élevée, cela impacte négativement la capacité du musicien à jouer 
en rythme, par exemple. Elle devrait être < 20 ms.

2 - Latence de sortie : temps mis à un son émis par le DAW pour atteindre la sortie audio

3 - latence d’entrée : temps écoulé avant que l'enregistrement ne démarre dans le DAW lorsque l'on joue d'un 
instrument ou que l'on chante dans un microphone.  Doit être prise en compte lors de l'enregistrement !

Latence d’entrée = latence round-trip - latence de sortie

Challenge 3: compenser la latence d’entrée

1. Mesurer la latence round-trip :

a. Solution matérielle (micros en entrée et en sortie, enregistreur numérique),
b. Solution logicielle : emmetre un son du DAW, l’enregistrer et mesurer le 

temps écoulé (vidéo ci-dessous)

2. La latence de sortie est fournie

 par la WebAudio API,
3. Calculer la latence d’entrée,

Entrée = Round-trip - Sortie

4. Décaler en arrière dans le temps
 les buffers audio enregistrés.

SOLUTION INTÉGRÉE DANS LE DAW !

Challenge 4: enregistrer plusieurs pistes en même temps 
de manière robuste, pendant la lecture d’autres pistes…

A small projet from recording to mixing

CONCLUSION + WAM-Studio disponibilité

WAM-Studio est en développement mais fonctionnel et stable
● Bonne démonstration des technologies du W3C pour développeurs audio
● La conception et le code montrent des bonnes pratiques pour enregistrer et gérer 

la latence dans un environnement sandboxé.

WAM-Studio a des mises à jour hebdomadaires…

● Code source et image Docker disponibles sur GitHub (front-end et back-end sont 

dans le même projet, image docker fournie, prêt à déployer)

● Démo en ligne
● Les parties principales de WAM-studio font l’objet de tutoriaux en ligne.

● Tous les plugins présents dans WAM-Studio sont open-source et publiés sur le 
dépôt GitHub wam-community. Ils sont aussi disponibles dans d’autres hôtes 
(sequencer.party par ex.), et via URLs prêts à l’emploi demo ici!

● WAM-Studio plugin manager aussi disponible séparément (source and demo)

WAM-Studio travail en cours…

Fini 

● Sauvegarde des projets dans le cloud,
● Viewports sur les pistes (zoom, support pour pistes de longues durées)
● Macros par type de piste (presets voix/guitare etc.)
● Grilles de mesures + tempo et key signatures
●

(presque fini) : split/merge, normalize, reverse sur pistes audio

A venir (S4 2023)

● CTRL-Z / undo
● GUI pour le routage audio (support de cartes sons > 4 entrées/sorties)
● Pistes MIDI (déjà fonctionnelles en dehors du DAW)
● Smart cache (PouchDB/IndexedDB) pour sauvegarde plus rapide des projets

Plus tard (2024)

● Support des WebCodecs
●

Fonctionnalités collaboratives

