Spade: A Modular Framework for Analytical
Exploration of RDF Graphs
Yanlei Diao, Pawel Guzewicz, Ioana Manolescu, Mirjana Mazuran

To cite this version:

Yanlei Diao, Pawel Guzewicz, Ioana Manolescu, Mirjana Mazuran. Spade: A Modular Frame-
work for Analytical Exploration of RDF Graphs. Proceedings of the VLDB Endowment (PVLDB),
2019, Proceedings of the VLDB Endowment, Vol.
12, 12 (12), pp.1926-1929.
￿10.14778/3352063.3352101￿. ￿hal-02152844v2￿

12, No.

HAL Id: hal-02152844

https://inria.hal.science/hal-02152844v2

Submitted on 3 Feb 2020

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Spade: A Modular Framework for Analytical Exploration of
RDF Graphs

Yanlei Diao1,2

Paweł Guzewicz1,3
1 LIX (UMR 7161, CNRS and Ecole polytechnique), France
2University of Massachusetts Amherst
3 Inria, France

Ioana Manolescu1,3

Mirjana Mazuran1,3

yanlei.diao@polytechnique.edu, {pawel.guzewicz,ioana.manolescu,mirjana.mazuran}@inria.fr

ABSTRACT
RDF data is complex; exploring it is hard, and can be done
through many diﬀerent metaphors. We have developed and
propose to demonstrate Spade, a tool helping users discover
meaningful content of an RDF graph by showing them the
results of aggregation (OLAP-style) queries automatically
identiﬁed from the data. Spade chooses aggregates that are
visually interesting, a property formally based on statistic
properties of the aggregation query results.

While well understood for relational data, such explo-
ration raises multiple challenges for RDF: facts, dimensions
and measures have to be identiﬁed (as opposed to known be-
forehand); as there are more candidate aggregates, assessing
their interestingness can be very costly; ﬁnally, ontologies
bring novel speciﬁc challenges but also novel opportunities,
enabling ontology-driven exploration from an aggregate ini-
tially proposed by the system.

Spade is a generic, extensible framework, which we instan-
tiated with: (i) novel methods for enumerating candidate
measures and dimensions in the vast space of possibilities
provided by an RDF graph; (ii) a set of aggregate inter-
estingness functions; (iii) ontology-based interactive explo-
ration, and (iv) eﬃcient early-stop techniques for estimating
the interestingness of an aggregate query.

The demonstration will comprise interactive scenarios on

a variety of large, interesting RDF graphs.

PVLDB Reference Format:
Y. Diao, P. Guzewicz, I. Manolescu, M. Mazuran. Spade: A Mod-
ular Framework for Multi-Dimensional RDF Exploration. PVLDB,
12(12): 1926-1929, 2019.
DOI: https://doi.org/10.14778/3352063.3352101

1.

INTRODUCTION

RDF graphs are increasingly being published and shared,
as part of the Linked Open Data (LOD) movement. How-
ever, given their size, heterogeneity and complexity, their
information content is hard to grasp, in particular for non-
expert users. Figure 1 shows a portion of an RDF graph

licensed under

This work is
the Creative Commons Attribution-
NonCommercial-NoDerivatives 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/. For
any use beyond those covered by this license, obtain permission by emailing
info@vldb.org. Copyright is held by the owner/author(s). Publication rights
licensed to the VLDB Endowment.
Proceedings of the VLDB Endowment, Vol. 12, No. 12
ISSN 2150-8097.
DOI: https://doi.org/10.14778/3352063.3352101

about food, recipes, ingredients, etc.
from the Foodista
dataset1. It illustrates the heterogeneity frequently encoun-
tered in RDF. Here, n4 and n9 are labeled with the Recipe
type; n2 and n11 are Food; n3 lacks a type, but its outgoing
properties suggest that it is a Recipe; n8’s outgoing proper-
ties hint that it is probably Food. This example also shows
that logically similar resources do not always have the same
structure, e.g., n4, n5 and n9 are all Recipe, have a title and
a country, but only n5 has a depiction. Similarly, n5 has two
categories while n4 has only one and n9 none at all.

This small portion of data shows RDF’s ﬂexibility and
heterogeneity. Its ﬂip side is the diﬃculty, especially for ca-
sual users, in approaching the data, that is, viewing and un-
derstanding its content and discovering, at a glance, useful
insights. This fundamental issue indicates a need for auto-
matic (or very low-eﬀort) tools to guide users in exploring
RDF graphs for insight discovery.

The automatic extraction of interesting aggregates is one
among the data exploration techniques that have been stud-
ied recently [11, 12, 13, 9]. All of these systems assume a
ﬁxed relational data warehouse schema, which is not avail-
able for RDF graphs. Some recent works [2] consider graphs,
and use entropy to identify interesting portions of the graph.
However, they assume that the graph has a very regular and
simple structure, and that a cube over the data has been
computed. In contrast, we seek to work with any graphs,
and aim to compute only interesting aggregates. Dagger [4]
was an earlier version of our work that was designed to iden-
tify only mono-dimensional aggregates and evaluate them in
a naive time-consuming fashion. In [10] sampling was used
to speed up the evaluation process but the aggregate selec-
tion accuracy is sensitive to the chosen sampling strategies.
As we show below, our work explores rich multi-dimensional
aggregates from RDF graphs, which drastically expands the
computation space and calls for novel techniques.

Spade outline We have developed Spade, a system that
provides users with top-k most interesting aggregate queries
identiﬁed automatically in a given RDF graph. For instance,
from the Foodista dataset, Spade recommends “the num-
ber of recipes by category” (Figure 2(a)) and “the number
of recipes by ingredient and category” (Figure 2(b)). Fig-
ure 2(b) is interesting as there is a peak of sugar usage in
fruits and desserts (the two yellow cells), leading to a huge
variance among ingredients/categories. Users may further
reﬁne a given aggregate, e.g., selecting the dessert category
allows zooming on its semantic subclass thaiDesserts etc.

1https://old.datahub.io/dataset/foodista

Figure 1: Sample data inspired from the Foodista dataset.

Figure 2: Aggregates from Foodista.

Inspired by classical data warehousing, we deﬁne a (po-
tentially multi-dimensional) aggregate centered around a
set of facts, which are nodes of the RDF graph, e.g., recipes
in the above example. An aggregate comprises: (i) a set of
dimensions along which the facts are studied, e.g., category
and country; (ii) a set of measures, e.g., the time to cook,
the ingredients, and (iii) a set of aggregate functions which
deﬁne how the measures should be aggregated, e.g., the av-
erage cooking time, the number of ingredients, etc. Given
an integer k, identifying automatically the k most interest-
ing aggregates in a given RDF graph raises many challenges.
We outline them below, and highlight Spade’s contributions.
1. Identifying candidate facts sets In the absence of
a relational data warehouse schema, it is not clear where
“the facts” are in an RDF graph. Spade uses a variety of
methods to identify candidate fact sets (CFS, in short). Be-
sides type and user input based methods as in Dagger [4],
Spade also identiﬁes CFS automatically based on their in-
coming and outgoing properties, with the help of an RDF
graph summary [5]. This new feature is crucial as in some
graphs, e.g. Foodista, many nodes of interest have no type.
2. Identifying candidate dimensions and measures
The dimensions and measures, according to which a given
CFS is analyzed, need to be automatically found. Besides
the properties or derived properties (e.g., “the number of
ingredients in each recipe”) of CFS nodes, Spade is also ca-
pable of using keywords extracted from text nodes as dimen-
sions, e.g., “group recipes by the keywords in their titles”
(“Ricotta” in the title of n3), or paths as dimensions or mea-
sures, e.g., “group recipes by the names of their ingredients”
(“Beef” is the name of n11, an ingredient for n9). In addi-
tion, multi-dimensional aggregates that combine the variety
of dimensions signiﬁcantly increase the richness, as well as
the computation complexity, of such RDF exploration.
3. Interestingness functions There is no standard view
of what makes an aggregate “interesting”; intuitively, it cor-
responds to a trend, peak, outlier, etc.
in the aggregation
query result. To capture this, we rely on statistic moments
(variance, skew or kurtosis) but we provide an open archi-
tecture to accommodate more measures as user needs arise.
4. Eﬃcient aggregate evaluation The above extensions
lead to an explosion in the number of aggregates to be eval-
uated in order to ﬁnd the most interesting ones. To address
this, Spade employs key techniques including new extensions
of lattice-based computation for multi-dimensional aggre-
gates [14], and new extensions of online aggregation [8] to

stop the computation of an aggregate as soon as it is deemed
not in the top-k, which distinguishes from our prior work [4,
10] with formal guarantees of the correctness of pruning.
5. Handling and exploiting semantics An RDF graph
may feature an ontology, stating relationships that may ex-
ist between types and properties, e.g., any FrenchRecipe is
a Recipe, or a recipe with a correction is a ModiﬁedRecipe.
An ontology may lead to implicit data:
for instance, if r1
is of type FrenchRecipe in an RDF graph, r1 is also of type
Recipe, even though this is not explicitly part of the graph.
Spade handles implicit data when exploring CFS, dimen-
sions and measures by relying on an ontology-aware RDF
platform. Further, based on the ontology, users may navi-
gate from an interesting aggregate to another through gen-
eralization, e.g., changing the CFS from FrenchRecipes to
Recipes, or on the countrary through specialization, e.g., go-
ing from FrenchRecipes to BourgogneRecipes to see how the
aggregate results (and thus, its interestingness) vary.

2. Spade DESIGN AND ARCHITECTURE

We explain the concepts and operations underlying Spade

(Figure 3), before outlining our algorithms.

2.1 Spade Concepts

A candidate fact set (CFS) is a set of RDF resources
on which we may build an interesting aggregate; we call
candidate fact (CF) a member of this set.

We call attribute (A) a property attached to CFS nodes,
which can be used as a dimension (to group facts by the
value of this property) or as a measure (for each fact group,
the values of this property will be aggregated). An attribute
is either an RDF property (denoted P) that some CFS nodes
have, or a derived property (denoted DP). As aggregation
function (Agg), we rely on the common set of sum, aver-
age, count, max and min.

A multi-dimensional aggregate (MDA) is determined
by a CFS, one or several dimensions (which are attributes),
a measure (also an attribute), and an aggregation func-
tion. The MDA’s semantics [1] accounts for: (i) dimensions
and/or measures which may be missing for some CFs; such
CFs do not contribute to the aggregate; (ii) each attribute
that is deﬁned multiple times for some CFs; it contributes
to several aggregate groups (if used as a dimension) or con-
tributes with several values (if used as a measure).

An interestingness function (IF) takes as input a set of
( ¯di, Aggi) pairs; each ¯di is a vector of dimension values (e.g.,

Figure 3: The architecture of Spade.

vegan Italian recipes) and Aggi is the result of the aggrega-
tion function on the corresponding group, e.g., the number
of such recipes. An IF returns a positive real number, re-
ﬂecting some measure of interestingness of the aggregate.

2.2

Interesting MDA Selection Framework
Spade is designed as a framework (see Figure 3) where op-
erations are chained to identify the most interesting MDAs.
We implemented it as a Java-based tool (circa 40 classes and
10K lines of code) running on top of OntoSQL2, a Java and
Postgres-based platform we developed [3] for eﬃcient RDF
storage and query answering. Spade stores RDF graphs in
OntoSQL; it builds an RDFQuotient [5] summary; it also
ﬁnds CFS, enumerates and analyzes their properties, cre-
ates and stores derived properties directly in Postgres.

For exploration, the ﬁrst operation, after an RDF graph
has been loaded, is Candidate Fact Selection. Spade con-
siders the following CFS: (i) for each type T in the graph,
the set of resources of type T ; (ii) for a (user-speciﬁed) set
of properties, all the resources having those outgoing prop-
erties; (iii) each set of resources identiﬁed as equivalent by
the RDFQuotient summary.
In the third case, the sum-
mary divides RDF graph nodes in equivalence classes based
on ﬂexible criteria on their incoming/outgoing properties
and/or their types (when present). Nodes in the same class
tend to have many common properties, making them inter-
esting candidates to be analyzed together as a CFS. Other
CFS selection criteria, e.g. based on another summary or
the results of a given query, can be easily plugged in here.

Next, for each CF, Direct Properties and Derived
Properties are Enumerated to obtain all possible CF
attributes. The (possibly missing, or multiple) values of
these attributes are computed for each CF and stored in
the RDF database (RDF-DB in Figure 3). A null is used to
record absent values. Spade derives the following properties:
(i) counts, e.g., how many ingredients a recipe has; (ii) key-
words, e.g., if a recipe is called “Apple and Cinnamon Rolls”,
we consider the keywords “Apple”, “Cinnamon” and “Rolls”
as values of the property kw-title for the same resource;
(iii) the language obtained by analyzing text attributes;
(iv) paths, e.g., a recipe with an ingredient whose name is
“Beef”, has the attribute ingredient-name with the value
“Beef”; (v) types, sub-types and super-types: when CFS are
typed, we pre-compute (from the ontology which may come
with the graph) their possible more/less general types, to
prepare for semantic navigation; (vi) discretized values, e.g.,
transforming the minutes needed to cook a recipe into buck-
ets: [0-10], [10-20], [20-100], [>100] etc.

Then we have Attribute Analysis which computes a set
of statistics: number of CFs having an attribute, type (e.g.,

2https://ontosql.inria.fr

String, Integer, Date) of the attribute values, their number
of distinct values, lowest and highest value etc. Spade ex-
ploits these statistics in various ways in diﬀerent steps, e.g.,
to guide the choice of dimensions, measures and aggregation
functions, and to improve the aggregate evaluation.

Next, we move to Aggregate Enumeration to ﬁnd com-
binations of a set of dimensions, a measure, and an aggre-
gation function. To avoid meaningless aggregates, e.g., “the
number of ingredients for each recipe ingredient”, we ap-
ply rule-based pruning to restrict the measure to diﬀer from
each dimension, choose the aggregate function based on the
measure type (e.g., only average numeric measures), etc.

Finally, in Aggregate Evaluation the enumerated can-
didate aggregates are actually evaluated and their interest-
ingness measures are computed based on the chosen IF.
Spade supports variance, skewness and kurtosis (second to
fourth statistic moments) computed over the set of Aggi
values. In Figure 2, (b) and (c) show two bi-dimensional ag-
gregates. There is a cell for each dimension value pair, e.g.,
ingredient=“sugar” and category=“dessert”. The colors of
the cells represent the measure, i.e., the number of recipes.
Values in (b) vary a lot, e.g., the two yellow cells represent
peaks of values; thus this aggregate is considered interesting.
In contrast, in (c), cells have a very mixed color pattern, and
hence this result is deemed not interesting. The interesting-
ness of highly dimensional aggregates (3, 4 or more dimen-
sions), when statistic moments are considered, is harder for
users to interpret. More sophisticated strategies for insight
detection, e.g., such as proposed in [11], can be plugged in.

2.3 Optimization for Improved Efﬁciency

In this section, we discuss optimization of expensive op-
erations in Spade. Aggregate evaluation is a very expensive
operation because our rich variety of ways to derive prop-
erties and enumerate multi-dimensional aggregates leads to
an explosion of the space of aggregates for evaluation. Thus,
we introduce novel techniques to improve eﬃciency.
Lattice-based computations MDAs can be captured in
lattices [7], e.g., the attributes {category, diﬃculty, keyword}
lead to a lattice of 23 = 8 nodes (that is, MDAs), from the
top (group by the three attributes) to intermediary levels
(group by two, successively by one attribute) to the bottom
node that does not group at all. To optimize the computa-
tion we build on the eﬃcient technique [14], which takes a
known set of dimensions, a ﬁxed measure and an aggregate
function, and computes the whole lattice in one pass over the
data, sharing computation across all the nodes. The tech-
nique also relies on a smart spatial data storage layout. Our
new RDF scenario raises several challenges: (i) a lattice’s
dimensions are not known at the start and hence we cannot
pre-load the data as in [14]; (ii) we may recommend MDAs
from diﬀerent lattices; (iii) a given set of dimensions can be

associated to diﬀerent measures and aggregate functions.

We extend the technique described in [14] to address these
challenges as follows. (1) We adapt maximal frequent pat-
tern mining [6] to ﬁnd, inside each CFS, the sets of dimen-
sions to be used for MDAs. For recipes, the sets of frequent
attributes can be: {{nrOfIngredients}, {country, category},
{category, diﬃculty, keyword}}. Each corresponds to a lat-
tice of MDAs. (2) While materializing each lattice, we adapt
the multidimensional data structure to keep track of several
measures, e.g.
the number of recipes, the maximum and
average time of cooking, etc. (3) In the same step as (2),
we aggregate not only along the measures, but also oppor-
tunistically along the dimensions, e.g., while computing the
number of recipes in the {category, diﬃculty, keyword} lat-
tice, we also compute the average diﬃculty per category,
the number of keywords by category, etc. In this way we
make the best use of each pass on the data and maximize
the number of MDAs that are computed.
Novel early-stop techniques are used to stop the evalua-
tion of an aggregate as soon as we can determine (with high
probability) that it will not be among the k most interest-
ing. We build on top of [8], which approximately computes
aggregation query results in a given conﬁdence interval. Our
problem is harder because we want to approximate the IF
computed over the aggregation results. Using advanced sta-
tistical tools such as the Delta Method3, we construct con-
ﬁdence intervals for variance, skewness and kurtosis over
partially evaluated results of candidate aggregates. This al-
lows us to prune a large set of aggregates early, and focus
computation on the interesting ones.

While the above techniques signiﬁcantly improve the ef-
ﬁciency of aggregate evaluation, Spade also optimizes the
order in which all tasks in Figure 3 are executed.

3. DEMONSTRATION SCENARIOS

We will use publicly available graphs, including: Foodista;
NobelPrizes4 (90K triples) and DBLPArticle (20M triples)5.
The RDFQuotient summary is shown as a ﬁrst overview of
the data as it provides a quick glance on their content and
might inspire users during the demonstration steps. Our
interactive scenarios enable users to get insights from large
RDF graphs, reﬁne them and deepen their analysis through
semantic-based roll-ups and drill-down.

• MDA recommendation Users choose a dataset, an
IF and k, the number of desired aggregates, and visualize
the top-k results. A speciﬁc CFS, among those found by
Spade, can also be chosen.

• Customized CFS selection Guided by the summary,
users can select nodes and/or properties to specify a cus-
tomized set of data. Resources that comply with the given
criteria will be considered as a CFS and processed by Spade.
• Reﬁning discovered insights Users can reﬁne a MDA
returned by Spade by focusing on some of its groups, e.g.,
from a recipe aggregate with dimensions {Category, Diﬃ-
culty, Keyword}, they may drill-down to speciﬁc values of
one or more of the dimensions and visualize the results.

• Ontology-driven navigation Let (S, ¯D, m, Agg) be
an interesting MDA returned by Spade over the CFS S,
dimensions ¯D, with the measure m and aggregation func-
tion Agg, such that a large fraction (> 80%) of the S nodes

3https://en.wikipedia.org/wiki/Delta_method
4https://old.datahub.io/dataset/nobelprizes
5http://www.rdfhdt.org/datasets/

have a common RDF type, e.g., FrenchRecipe. Recall the
ontology triples we assumed, stating that Recipe has the
subclass FrenchRecipe which in turn has the subclass Bour-
gogneRecipe. Users may request navigating through gener-
alization to replace S with all the resources of type Recipe,
evaluate the same aggregate on this modiﬁed CFS, and visu-
alize the result. Similarly, they may request specialization to
replace S with the nodes having the type BourgogneRecipe.
The variance in the number of FrenchRecipes by ingredient
is high because of peaks in the use of sour cream, cheese, etc.
If we generalize to Recipes the variance is much lower; if we
specialize to BourgogneRecipe, the variance remains high.
This is reminiscent of roll-up/drill-down, but diﬀers in that
the super/sub-type may not have the same dimensions due
to the diﬀerent attributes in the data. Therefore, navigation
along the subclass structure can signiﬁcantly change the set
of MDAs. Similar to the navigation based on subclass re-
lationships, subproperty can be used to replace a dimension
(or the measure) deﬁned by a graph property with a more
general/more speciﬁc related property from the data.

4. ACKNOWLEDGMENT

This work was funded in part by Agence Nationale de la
Recherche (ANR) under grant ANR-16-CE23-0010-01 and a
research gift from the Universit´e of Paris Saclay. M. Mazu-
ran is supported by the H2020 research program under grant
agreement nr. 800192.

5. REFERENCES
[1] E. A. Azirani, F. Goasdou´e, I. Manolescu, and A. Roatis.
Eﬃcient OLAP operations for RDF analytics. In ICDE
Workshops, pages 71–76, 2015.

[2] D. Bleco and Y. Kotidis. Using entropy metrics for pruning

very large graph cubes. Inf. Syst., 81:49–62, 2019.

[3] D. Bursztyn, F. Goasdou´e, and I. Manolescu. Teaching an

RDBMS about ontological constraints. PVLDB,
9(12):1161–1172, 2016.

[4] Y. Diao, I. Manolescu, and S. Shang. Dagger: Digging for
interesting aggregates in RDF graphs. In ISWC Posters &
Demonstrations and Industry Tracks, 2017.

[5] F. Goasdou´e, P. Guzewicz, and I. Manolescu. Incremental
structural summarization of RDF graphs. In EDBT, pages
566–569, 2019.

[6] K. Gouda and M. J. Zaki. Eﬃciently mining maximal
frequent itemsets. In ICDM, pages 163–170, 2001.
[7] V. Harinarayan, A. Rajaraman, and J. D. Ullman.

Implementing data cubes eﬃciently. In SIGMOD, pages
205–216, 1996.

[8] J. M. Hellerstein, P. J. Haas, and H. J. Wang. Online

aggregation. In SIGMOD, pages 171–182, 1997.

[9] Y. Luo, X. Qin, N. Tang, G. Li, and X. Wang. Deepeye:
Creating good data visualizations by keyword search. In
SIGMOD, pages 1733–1736, 2018.

[10] I. Manolescu and M. Mazuran. Speeding up RDF aggregate
discovery through sampling. In EDBT Workshops, 2019.

[11] B. Tang, S. Han, M. L. Yiu, R. Ding, and D. Zhang.

Extracting top-k insights from multi-dimensional data. In
SIGMOD, pages 1509–1524, 2017.

[12] M. Vartak, S. Rahman, S. Madden, A. G. Parameswaran,

and N. Polyzotis. SEEDB: eﬃcient data-driven
visualization recommendations to support visual analytics.
PVLDB, 8(13):2182–2193, 2015.

[13] Y. Wen, X. Zhu, S. Roy, and J. Yang. Qagview:

Interactively summarizing high-valued aggregate query
answers. In SIGMOD, pages 1709–1712, 2018.

[14] Y. Zhao, P. Deshpande, and J. F. Naughton. An

array-based algorithm for simultaneous multidimensional
aggregates. In SIGMOD, pages 159–170, 1997.

