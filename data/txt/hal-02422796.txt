Énumération des occurrences d’une chronique
Thomas Guyet, Philippe Besnard, Ahmed Samet, Nasreddine Ben Salha,

Nicolas Lachiche

To cite this version:

Thomas Guyet, Philippe Besnard, Ahmed Samet, Nasreddine Ben Salha, Nicolas Lachiche. Énuméra-
tion des occurrences d’une chronique. EGC 2020 - 20ème édition de la Conférence Extraction et
Gestion des Connaissances, Jan 2020, Bruxelles, Belgique. pp.253-260. ￿hal-02422796￿

HAL Id: hal-02422796

https://inria.hal.science/hal-02422796

Submitted on 23 Dec 2019

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Énumération des occurrences d’une chronique

Thomas Guyet∗, Philippe Besnard∗∗, Ahmed Samet∗∗∗,
Nasreddine Ben Salha∗∗∗, Nicolas Lachiche∗∗∗∗

∗AGROCAMPUS-OUEST/IRISA UMR 6074 IRISA
∗∗CNRS/IRIT
∗∗∗INSA Strasbourg/Laboratoire ICube
∗∗∗∗Université de Strasbourg/Laboratoire ICube

Résumé. Une chronique est une représentation du comportement d’un système
dynamique formalisée comme un ensemble d’événements liés par des contraintes
temporelles. Dans cet article, nous nous intéressons à l’énumération des occur-
rences exactes ou approchées d’une chronique en comparant différentes straté-
gies de reconnaissances. Nous proposons un algorithme de reconnaissance de
chroniques avec différentes heuristiques et sa version approchée. L’efﬁcacité de
ces différentes approches est évaluée sur des données synthétiques.

1

Introduction

Pour un grand nombre de contextes applicatifs, des données de nature séquentielle sont col-
lectées. Par exemple, il peut s’agir d’une séquence de soins dont un patient a bénéﬁcié, d’une
séquence d’achats qu’a effectué un client dans un supermarché ou encore de log de fonction-
nement d’une machine industrielle. Il est intéressant d’explorer ces données pour extraire de
l’information sur les situations qui se sont effectivement déroulées.

L’approche présentée dans cet article cherche à interroger une base de séquences avec un
motif déﬁni par l’utilisateur. Un motif correspond à une situation dont l’utilisateur cherche les
occurrences. Généralement un motif tient compte de l’ordre des événements mais rarement de
l’intervalle de temps entre ces évènements. Pourtant, cette dimension temporelle peut contenir
une information pertinente. Par exemple, les occurrences d’une situation où une hospitalisa-
tion survient après qu’une personne ait fait une chute est moins informatif qu’une situation
correspondant à une hospitalisation survenue moins de 24h après la chute.

Dans la littérature, certaines approches retrouvent les occurrences d’une situation complexe
dans des séquences d’événements en prenant en compte la dimension temporelle. Les mé-
thodes de raisonnement temporel ou les logiques d’action répondent en particulier au problème
de la reconnaissance de situations (Ulus et Maler, 2018; Artikis et al., 2012). Ces approches
sont très expressives mais manquent d’efﬁcacité. Les méthodes efﬁcaces de reconnaissance
font appel à des méthodes d’indexation (Kostakis et Papapetrou, 2017), mais sont peu expres-
sives. Dans le domaine de la surveillance automatique, les approches basées sur les automates
temporisés (Alur et Dill, 1994; Carle et al., 2011) permettent de spéciﬁer des comportements
avec des modèles formels. Ces représentations peuvent être difﬁciles à appréhender par des

Énumération des occurrences d’une chronique

utilisateurs et les algorithmes sont dédiés à la reconnaissance en ligne. Finalement, la fonc-
tionnalité de recherche de motifs temporels est souvent rencontrée dans des outils d’analyse
interactive de données temporelles (Monroe et al., 2013; Barazzutti et al., 2016).

Dans tous ces travaux, la reconnaissance est menée de manière exacte. Ainsi, même un
écart inﬁme sur les dates des événements ne permet pas d’informer l’utilisateur de la pré-
sence d’une occurrence proche du motif recherché. Pourtant, l’intérêt de telles occurrences est
double : 1) elles permettent à un utilisateur de retrouver des occurrences d’un motif dont il ne
peut pas spéciﬁer avec certitude les contraintes temporelles, 2) cela permet d’identiﬁer dans
une séquence des occurrences qui seraient altérées par rapport au motif nominatif.

La contribution principale de cet article est la proposition d’un algorithme pour l’énumé-

ration des occurrences exactes et approchées d’une chronique dans une séquence.

2 Chroniques

Soit E un ensemble de types d’événements totalement ordonné. Cet ordre est dénoté ≤E.
Un événement est un couple (e, t) où e ∈ E est un type d’événement et t ∈ R est une étiquette
temporelle. Une collection ordonnée d’événements forme une séquence. Plus formellement,
une séquence (cid:104)(e1, t1), (e2, t2), . . . , (em, tm)(cid:105) est une succession d’événements ordonnés par
leur date puis leur type. On a alors pour tout couple i, j ∈ [1..m], i < j ⇔ ti ≤ tj et si ti = tj
alors ei ≤E ej. |s| dénote la longueur de la séquence s.

Une chronique est une représentation du comportement d’un système dynamique comme
un ensemble d’événements liés par des contraintes temporelles (Besnard et Guyet, 2019). Les
premiers algorithmes d’énumération de chronique ont été proposés par Ghallab (1996) et ont
des connexions fortes avec les réseaux de contraintes temporisés de Dechter et al. (1991).

Déﬁnition 1 (Chronique). Une chronique est un couple (E, T ) tel que

— E est un multi-ensemble ordonné, i.e., E est de la forme {{e1, . . . , en}} (les répétitions

sont permises) tel que ei ∈ E pour i = 1, . . . , n et e1 ≤E · · · ≤E en ;

— T est un ensemble de contraintes temporelles. Une contrainte temporelle est une ex-
pression de la forme (e, oe)[t−, t+](e(cid:48), oe(cid:48)) telle que toutes les conditions suivantes
sont satisfaites : e, e(cid:48) ∈ E, t−, t+ ∈ R, oe, oe(cid:48) ∈ [n], oe < oe(cid:48), eoe = e et eoe(cid:48) = e(cid:48).

La taille d’une chronique est la cardinalité de son multi-ensemble, ici n.

Déﬁnition 2 (Occurrence). Une occurrence d’une chronique C = ({{e1, . . . , en}}, T ) dans une
séquence s = (cid:104)(s1, t1), . . . , (sm, tm)(cid:105) est une liste de positions ((cid:15)i)i∈[n] telle que

i. s(cid:15)i = ei pour tout i ∈ [n], et
ii. t(cid:15)o(cid:48) − t(cid:15)o ∈ [l, u] pour toute contrainte temporelle (e, o)[l, u](e(cid:48), o(cid:48)) ∈ T
On dénote par OC(s) l’ensemble des occurrences d’une chronique C dans une séquence s.
Une chronique C apparaît dans une séquence s, dénoté C (cid:22) s, si et seulement si il existe au
moins une occurrence de C dans s (i.e., OC(s) est non vide).

On introduit à présent la notion d’occurrence approchée avec les (α, λ)-occurrences. Cette
notion s’appuie sur l’idée que si les contraintes temporelles de la chronique sont sufﬁsamment
proches des délais d’une occurrence alors il faut reconnaître cette occurrence. Le paramètre
α ∈ [0, 1] précise la tolérance admise sur les contraintes temporelles, tandis que le paramètre
λ ∈ R∗

+ module la mesure de similarité entre contrainte temporelle et occurrence.

T. Guyet et al.

Déﬁnition 3 ((σ, λ)-occurrence). Soit σ ∈ [0, 1], λ ∈ R∗
+, une (σ, λ)-occurrence d’une chro-
nique C = (E = {{e1, . . . , en}}, T ) dans une séquence s = (cid:104)(s1, t1), . . . , (sm, tm)(cid:105) est une
liste de positions ((cid:15)i)i∈[n] telle que :
i. s(cid:15)i = ei pour tout i ∈ [n], et
ii. σ ≤ (cid:81)

(e,o)[l,u](e(cid:48),o(cid:48))∈T ς(t(cid:15)o(cid:48) − t(cid:15)o, [l, u])

avec

ς(d, [l, u]) =

(cid:26) 1

e−λ min(|l−d|,|u−d|)

si d ∈ [l, u],
sinon.

Lemme 1. Pour λ ∈ R∗
(1, λ)-occurrence de C dans s.

+, ((cid:15)i) est une occurrence de C dans une séquence s ssi c’est une

On introduit maintenant la notion de relaxation d’une chronique. La relaxation d’une chro-

nique est une chronique dont les contraintes temporelles sont étendues.

Déﬁnition 4 (Relaxation de chronique). Soit α ∈ R∗
relaxation de C, notée Rα(C) est la chronique (E, T (cid:48)) telle que

+. Pour une chronique C = (E, T ), la α-

(e, oe)[t−, t+](e(cid:48), oe(cid:48)) ∈ T ⇔ (e, oe)[t− − α, t+ + α](e(cid:48), oe(cid:48)) ∈ T (cid:48)

Lemme 2. Pour tout λ ∈ R∗
une séquence s alors ((cid:15)i) est une occurrence de R− 1

+ et tout σ ∈ [0, 1], si ((cid:15)i) est une (σ, λ)-occurrence de C dans
λ ln(σ)(C) dans s.

3 Énumération des occurrences d’une chronique

L’algorithme 1 énumère toutes les occurrences d’une chronique dans une séquence. On
verra ensuite comment adapter cet algorithme pour les (σ, λ)-occurrences. On propose une
heuristique de parcours qui vise à identiﬁer au plus tôt la non-reconnaissance d’une occur-
rence en explorant prioritairement les contraintes les plus dures : évaluation prioritaire des
événements dont les types sont les moins fréquents et évaluation prioritaire des contraintes
temporelles les plus restrictives.

Déﬁnition 5 (Région admissible). Étant données C de taille n et s = (cid:104)(s1, t1), . . . , (sm, tm)(cid:105),
une région admissible est une séquence de n intervalles (cid:104)[r−
n ](cid:105) telle qu’il
existe ((cid:15)i), une occurrence de C dans s, avec t(cid:15)i ∈ [r−

1 ], . . . , [r−
i ] pour tout i ∈ [n].

i , r+

1 , r+

n , r+

Le principe est d’explorer un à un les événements du multi-ensemble en réduisant progres-
sivement l’étendue des régions admissibles jusqu’à obtenir une région dont tous les intervalles
sont des singletons. Une région admissible induit ainsi une occurrence de la chronique. L’ordre
d’exploration des événements du multi-ensemble est donné par γ qui est construit dans l’algo-
rithme par la fonction next. Nous reviendrons plus loin sur cette fonction.

L’algorithme 1 initie la récursion en identiﬁant toutes les occurrences du premier événe-
ment de la chronique dans la séquence. Lorsqu’une apparition du premier événement à traiter
eγ1 a été trouvée, une nouvelle région admissible est créée comme un intervalle singleton
utilisant la date de l’événement dans la séquence. Puis, les lignes 8–13 propagent toutes les

Énumération des occurrences d’une chronique

Algorithme 1 : Énumération des occurrences d’une chronique.

Input : C = (E = {{e1, . . . , en}}, T ), s = (cid:104)(s1, t1) . . . (sm, sm)(cid:105) (cf. Déﬁnitions 1-2)
Output : occs : Ensemble d’occurrences

1 adm ← {[−∞, ∞], . . . , [−∞, ∞]} // Région admissible de taille m
2 occs ← ∅;
3 γi ← next(γ, C, s) // Choix du premier événément
4 foreach (s, t) ∈ s do
if s = eγ1 then
5

// Création d’une nouvelle occurrence
o ← adm;
oγ1 ← [t, t];
// Propagation des contraintes temporelles
foreach (eγ1 , γ1)[t−, t+](e, p) ∈ T do

op = [max(0, t + t−), min(t + t+, |s| − 1)];

foreach (e, p)[t−, t+](eγ1 , γ1) ∈ T do

op = [max(0, t − t+), min(t − t−, |s| − 1)];

loccs ← RecRecognition(o, γ, 2, C, s);
loccs ← occs ∪ loccs;

6

7

8

9

10

11

12

13
14 return occs

contraintes temporelles de la chroniques concernant eγ1 pour restreindre les régions admis-
sibles. La ligne 11 réalise ensuite un appel récursif pour poursuivre l’exploration du multi-
ensemble de la chronique. Cette fonction retourne la liste des occurrences de la chronique qui
associe l’événement γ1 du multi-ensemble avec la date t dans la séquence.

L’algorithme 2 présente la fonction récursive d’énumération des occurrences de la chro-
nique. Les préconditions de la fonction sont que la région admissible en entrée contient des
intervalles singletons pour tous les événements aux positions γ1..(k−1). La fonction effectue la
recherche des positions pour les type d’événements cγk dans la région admissible correspon-
dante. Si de tels événements sont trouvés (ligne 7), alors la fonction propage les contraintes
temporelles de la chronique qui impliquent eγk (lignes 11 à 24) et poursuit la recherche d’oc-
currences jusqu’à avoir exploré tous les éléments du multi-ensemble (ligne 1 à 3) ou que les
régions admissibles soient vides.

La fonction next représente l’heuristique de recherche. L’heuristique la plus simple est
celle qui consiste à prendre tous les événements dans l’ordre du multi-ensemble. La seconde
heuristique consiste à utiliser prioritairement les types d’événements qui apparaissent le moins
dans la séquence. La troisième heuristique consiste à prioriser le traitement des événements
du multi-ensemble qui sont les plus contraints en tenant compte de la fréquence d’apparition
des événements dans la séquence, mais également la taille de la région d’admissibilité, suivant
j − r−
l’équation : argminj∈[n] f (ej) × (r+
j ) où f (ej) est le nombre d’occurrences du type
d’événements ej ∈ E dans la séquence et [r−
j , r+
j ] est la région admissible pour l’événement
j ∈ [n] de la chronique.

4 Énumération des occurrences approchées d’une chronique

L’énumération des occurrences approchées d’une chronique consiste à énumérer toutes les

(σ, λ)-occurrence d’une chronique pour des valeurs de σ et λ données.

Le principe de l’algorithme est très similaire à l’algorithme 1 pour lequel une occurrence
est construite progressivement. Le calcul de la similarité entre une occurrence et la chronique

Algorithme 2 : RecRecognition(o, k, C, s).

Input : adm : Région admissible, γ : ordre d’exploration, k : niveau de récursion, C = (E = {{e1, . . . , en}}, T ),

s = (cid:104)(s1, t1) . . . (sm, sm)(cid:105) (cf. Déﬁnitions 1-2)

T. Guyet et al.

Output : occs
1 if k = m + 1 then
return adm// Cas terminal
2
3 occs ← ∅ // Ensemble d’occurrences
4 γk ← next(γ, C, s);
5 foreach (s, t) ∈ s tel que t ∈ admk do
6

if s = eγk then

7

8

9

10

11

12

13

14

15

16

17

18

// Création d’une nouvelle occurrence
o ← adm;
oγk ← [t, t];
// Propagation des contraintes temporelles
satisf iable ← true;
foreach (eγk , γk)[t−, t+](e, p) ∈ T , p (cid:54)∈ γ1..(k−1) do

p , t + t−), min(o+

p , t + t+)];

op ← [max(o−
if o−
p > o+
p then
goto 6;

foreach (e, p)[t−, t+](eγk , γk) ∈ T , p (cid:54)∈ γ1..(k−1) do

p , t − t+), min(o+

p , t − t−)];

op ← [max(o−
p > o+
if o−
p then
goto 6;

loccs ← RecRecognition(o, γ, k + 1, C, s);
loccs ← occs ∪ loccs;

19
20 return occs

(cf. Déﬁnition 3) est réalisé également récursivement et dès que cette mesure est inférieure à la
valeur σ, alors la région admissible courante est invalidée.

Pour réutiliser la stratégie d’exploration de l’algorithme 1, il est nécessaire de déﬁnir les
limites d’exploration pour la recherche d’un événement de la chronique (région admissible).
Dans le cas de la reconnaissance exacte d’une chronique, dès que l’événement sort de l’inter-
valle déﬁni par les contraintes, il est écarté. Dans le cas de la reconnaissance approchée, une
approche naïve nécessiterait d’explorer systématiquement l’intégralité de la séquence pour
évaluer ς, la similarité entre une contrainte temporelle et l’occurrence d’un événement.

Le Lemme 2 nous indique que l’exploration exhaustive n’est pas nécessaire. Seules les
λ ln(σ)(C) sont nécessaires. L’algorithme de re-
régions déﬁnies par la chronique relaxée R− 1
connaissance approchée utilise ainsi les bornes de cette chronique pour afﬁner les régions
admissibles à chaque étape de la reconnaissance (ligne 12 et 13 de l’algorithme 2). Lorsqu’une
occurrence de R− 1
λ ln(σ)(C) est trouvée, alors la similarité est comparée à σ pour valider ou
non l’occurrence comme une (σ, λ)-occurrence de C.

5 Expérimentations

Dans cette section, on présente les résultats d’efﬁcacité en temps de calcul obtenus sur des
données synthétiques. L’utilisation de données synthétiques permet de mener des expérimenta-
tions contrôlées et pouvant représenter un large panel de l’utilisation possible de l’énumération
de chroniques. L’algorithme a été implémenté en Python. 1

1. Dépôt PIP : https://pypi.org/project/pychronicles/ et Git : https://gitlab.inria.

fr/tguyet/pychronicles

Énumération des occurrences d’une chronique

FIG. 1 – Colonnes de gauche : Comparaison des temps de calcul entre les trois heuristiques
(1 : ordre du multi-ensemble, 2 : ordre de fréquence, 3 : probabilité d’apparition) en fonction
de différentes caractéristiques : en haut à gauche, de la variabilité des fréquences des événe-
ments (φ) ; au haut à droite, de la taille du vocabulaire (v) ; en bas à gauche, de la longueur
des séquences (n) ; en bas à droite, de la durée des contraintes d’une chronique (σT ). Colonne
de droite : Temps de calcul (en haut) et nombre de (σ, λ)-occurrences (en bas) en fonction de
σ et de λ.

2

Une séquence est générée comme une suite aléatoire de m types d’événements dans un
vocabulaire de taille v (v = 5 et m = 2000 par défaut). Le tirage aléatoire des types d’évé-
nement se fait selon une loi multinomiale. La probabilité du i-ème type est donnée par 1
m +
φ × i− m−1
m×(m−1) où φ ∈ [0, 2] est un paramètre qui quantiﬁe l’uniformité du tirage des types.
Les dates des événements de la séquence sont générées en respectant une distribution nor-
male N (µT , σT ) des délais entre événements successifs (µT = 4 et σT = 1 par défaut). Le
multi-ensemble d’une chronique de taille n est généré comme un tirage aléatoire selon une loi
multinomiale équiprobable sur le vocabulaire (n = 4 par défaut). La borne inférieure d’une
contrainte temporelle est générée selon une loi normale N (µT , σT ), comme pour les délais
entre événements et la durée est obtenue comme la valeur absolue d’un tirage selon la loi
N (0, 5 × µT ). Le paramètre δ ∈ [0, 1] donne la probabilité d’avoir une contrainte temporelle
entre deux événements (loi uniforme). On a ainsi en moyenne δ × n × (n − 1) contraintes dans
une chronique (δ = 0.4 par défaut).

5.1 Comparaison des stratégies

La Figure 1 (2 colonnes de gauche) présente les temps de calcul obtenus pour des énumé-
rations exactes d’une chronique aléatoire dans 100 séquences aléatoires. On observe d’une part
que les temps de calcul sont assez faibles. Énumérer une chronique dans une séquence de 2000
événements prend moins de 0.01s. D’autre part, on peut constater que l’heuristique naïve se
montre plus performante que les deux autres.

lllllllll012300.40.81.62Variabilité des fréquences d'événements ( F )Temps (s)llllllllllllllllllllllllllllllllll01234552550250Taille du vocabulaire (v)Temps (s)lllllllllllllllllllllllllllllllllllllllll0510150.30.40.50.60.70.80.91sTemps (s)llllllllllllllllllllllllllllllllllllllllllllllll05101562512502500500010000Longueur de séquence (n)Temps (s)lllllllllllllllllll024651015203040Durée d'une contrainte ( s )Temps (s)lllllllllllllllllllllllllll0500010000150000.30.40.50.60.70.80.91sNb occurrences123l =0.01l =0.03l =0.3l =3T. Guyet et al.

Le graphique en haut à gauche illustre les temps de calcul en fonction de φ. On constate que
la première heuristique est plus performante que les deux autres pour toutes les valeurs de φ <
2. Plus φ est grand et plus les écarts de temps d’exécution sont petits, et c’est uniquement dans
le cas où φ = 2 que les seconde et troisième heuristiques se montrent plus performantes. Une
explication possible à cette observation est que le temps nécessaire pour calculer les fréquences
n’est pas compensé par la réduction du nombre de régions admissibles.

À partir de contraintes temporelles générées avec σT = 30, la seconde heuristique devient
plus performante que la première. C’est une situation où peu de régions admissibles sont éli-
minées du fait des contraintes temporelles (assez faibles) et, dans ce cas, la stratégie consistant
à limiter leur génération en s’appuyant sur la fréquence des événements devient plus efﬁcace.
Les deux autres graphiques montrent des comportements attendus de la reconnaissance
de chroniques. Les temps de calcul décroissent très rapidement avec le taille du vocabulaire
(graphique en haut à gauche). En revanche, les temps de calcul augmentent avec la taille des
séquences (graphique en bas à gauche).

5.2 Approche exacte vs. approche approchée

Dans cette section, on étude l’impact des valeurs de σ et λ sur les (σ, λ)-occurrences d’une

chronique. On utilise l’heuristique basée sur l’ordre des événements dans le multi-ensemble.

La Figure 1 (troisième colonne en haut) montre que les temps de calcul augmentent lorsque
σ diminue. Plus λ est faible et plus cette augmentation est rapide. Ce comportement corres-
λ ln(σ)(C). Plus les régions
pond à l’augmentation de la taille des régions admissibles de R− 1
admissibles sont étendues et plus il faut parcourir la séquence à la recherche d’occurrences et
donc plus les temps de calcul sont importants.

Les temps de calcul sont partiellement liés au nombre d’occurrences (Figure 1, en bas). On
le constate bien sur l’évolution du nombre d’occurrences pour λ = 0.01 : pour σ = 1 à 0.5,
l’évolution du temps de calcul suit celui du nombre d’occurrences : plus on relaxe la contrainte
de proximité et plus il y a d’occurrences. Passé un certain seuil, toutes les occurrences du multi-
ensemble sont reconnues comme (σ, λ)-occurrence et le nombre d’occurrences n’augmente
plus, bien qu’on élargisse les régions de recherche (et donc les temps de calcul).

6 Conclusion

Nous avons introduit un algorithme pour l’énumération d’occurrences exactes d’une chro-
nique et introduit les (σ, λ)-occurrences qui sont des occurrences admettant que les dates ne
respectent pas exactement les contraintes temporelles d’une chronique. L’algorithme d’énumé-
ration exacte peut alors être utilisé pour identiﬁer efﬁcacement les (σ, λ)-occurrences.

Nous avons expérimentalement évalué trois différentes heuristiques pour l’algorithme d’énu-

mération et constaté que l’heuristique la plus simple se montre la plus efﬁcace (sauf conﬁgu-
ration extrême). Les améliorations du parcours par les heuristiques exploitant les distributions
des types d’événements semblent ne pas compenser le temps de calcul nécessaire pour cal-
culer ces distributions. Les expérimentations sur l’énumération des occurrences approchées
d’une chronique montrent que cette tâche peut être réalisée avec des temps de calcul au plus
supérieurs d’un ordre de grandeur pour λ ≈ 0.1 et qui augmentent linéairement avec σ, le seuil
de reconnaissance.

Énumération des occurrences d’une chronique

Financements

Ce travail a été partiellement ﬁnancé par INTERREG Upper Rhine (Fond Européen de
Développement Régional), les ministères de la recherche de Baden-Württemberg, Rheinland-
Pfalz (Allemagne) et de la Région Grand Est dans le cadre du projet HALFBACK.

Références

Alur, R. et D. L. Dill (1994). A theory of timed automata. Theoretical computer science 126(2),

183–235.

Artikis, A., A. Skarlatidis, F. Portet, et G. Paliouras (2012). Logic-based event recognition.

The Knowledge Engineering Review 27(4), 469–506.

Barazzutti, P.-L., A. Cordier, et B. Fuchs (2016). Transmute : un outil interactif pour assister
In Actes de la conférence Extraction et

l’extraction de connaissances à partir de traces.
Gestion des Connaissances (EGC), pp. 463–468.
Besnard, P. et T. Guyet (2019). Chronicles. à paraître.
Carle, P., C. Choppy, et R. Kervarc (2011). Behaviour recognition using chronicles. In Pro-
ceedings of the International Conference on Theoretical Aspects of Software Engineering,
pp. 100–107.

Dechter, R., I. Meiri, et J. Pearl (1991). Temporal constraint networks. Artiﬁcial Intelli-

gence 49(1-3), 61–95.

Ghallab, M. (1996). On chronicles : Representation, on-line recognition and learning.

In
L. Aiello, J. Doyle, et S. Shapiro (Eds.), Proceedings of the 5th International Conference on
Principles of Knowledge Representation and Reasoning (KR), pp. 597–606.

Kostakis, O. et P. Papapetrou (2017). On searching and indexing sequences of temporal inter-

vals. Data mining and knowledge discovery 31(3), 809–850.

Monroe, M., R. Lan, J. Morales del Olmo, B. Shneiderman, C. Plaisant, et J. Millstein (2013).
The challenges of specifying intervals and absences in temporal queries : A graphical lan-
guage approach. In Proceedings of the SIGCHI Conference on Human Factors in Computing
Systems, pp. 2349–2358. ACM.

Ulus, D. et O. Maler (2018). Specifying timed patterns using temporal logic. In M. Prandini et
J. Deshmukh (Eds.), Proceedings of the 21st International Conference on Hybrid Systems :
Computation and Control (HSCC), pp. 167–176.

Summary

A chronicle is a set of events related by temporal constraints. It represents the behavior
of a dynamic system. This temporal model has been studied in the context of monitoring and
pattern mining. In this article, a chronicle is used to query a static database of sequences.
We are interested in enumerating the exact or approximate occurrences of a chronicle. We pro-
pose a chronicle recognition algorithm with different heuristics and its version for approximate
occurrences. The efﬁciency of the algorithm is evaluated on synthetic data.

