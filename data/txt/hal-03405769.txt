Cardinality Queries over DL-Lite Ontologies
Meghyn Bienvenu, Quentin Manière, Michaël Thomazo

To cite this version:

Meghyn Bienvenu, Quentin Manière, Michaël Thomazo. Cardinality Queries over DL-Lite Ontologies.
IJCAI 2021 - 30th International Joint Conference on Artificial Intelligence, Aug 2021, Montreal,
Canada. ￿hal-03405769￿

HAL Id: hal-03405769

https://inria.hal.science/hal-03405769

Submitted on 27 Oct 2021

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Cardinality Queries over DL-Lite Ontologies

Meghyn Bienvenu1 , Quentin Mani`ere1 and Micha¨el Thomazo2
1CNRS, University of Bordeaux, Bordeaux INP, LaBRI, Talence, France
2Inria, DI ENS, ENS, CNRS, University PSL, Paris, France
{meghyn.bienvenu, quentin.maniere}@u-bordeaux.fr, michael.thomazo@inria.fr

Abstract
Ontology-mediated query answering (OMQA) em-
ploys structured knowledge and automated reason-
ing in order to facilitate access to incomplete and
possibly heterogeneous data. While most research
on OMQA adopts (unions of) conjunctive queries
as the query language, there has been recent inter-
est in handling queries that involve counting.
In
this paper, we advance this line of research by in-
vestigating cardinality queries (which correspond
to Boolean atomic counting queries) coupled with
DL-Lite ontologies. Despite its apparent simplic-
ity, we show that such an OMQA setting gives rise
to rich and complex behaviour. While we prove
that cardinality query answering is tractable (TC0)
in data complexity when the ontology is formulated
in DL-Litecore, the problem becomes coNP-hard as
soon as role inclusions are allowed. For DL-LiteH
pos
(which allows only positive axioms), we establish a
P-coNP dichotomy and pinpoint the TC0 cases; for
DL-LiteH
core (allowing also negative axioms), we
identify new sources of coNP complexity and also
exhibit L-complete cases. Interestingly, and in con-
trast to related tractability results, we observe that
the canonical model may not give the optimal count
value in the tractable cases, which led us to develop
an entirely new approach based upon exploring a
space of strategies to determine the minimum pos-
sible number of query matches.

1 Introduction
In ontology-mediated query answering (OMQA) [Poggi et
al., 2008; Bienvenu and Ortiz, 2015; Xiao et al., 2018], data
is enriched with an ontology, which serves both to provide a
user-friendly vocabulary for query formulation and to capture
domain knowledge that is exploited at query time to obtain a
more complete set of answers. While the OMQA approach
offers many advantages, it also makes the query answering
task more challenging than ‘plain’ query evaluation. Indeed,
instead of having to evaluate the query over the single ex-
plicitly given data instance, one must identify the certain an-
swers, i.e.
those holding in all possible situations (models)
compatible with the data and the ontology.

A major topic in OMQA research has thus been to under-
stand the complexity of OMQA and identify tractable set-
tings. Nowadays, for the most commonly considered query
language, namely, conjunctive queries (CQs), we have an al-
most complete picture of the complexity landscape for on-
tologies formulated in a wide range of different description
logics (DLs) [Baader et al., 2017] and rule-based languages
[Baget et al., 2011; Cal`ı et al., 2012]. In particular, it has
been shown that CQ answering is tractable in data complex-
ity for ontologies expressed in the most commonly consid-
ered dialects of the DL-Lite family [Calvanese et al., 2007;
Artale et al., 2009], which are often employed in OMQA.
A well-known and frequently used property of such DL-Lite
dialects and other Horn DLs is that they admit a canoni-
cal model, which is a single (possibly inﬁnite) model that,
by virtue of being homomorphically embeddable into every
model, is guaranteed to give the correct answers to all CQs.

While CQs are a natural and well-studied class of queries,
there are many other relevant forms of database queries that
could be potentially be employed in OMQA. In the present
paper, our focus will be on counting queries, which together
with other forms of aggregate queries, are widely used for
data analysis, yet still not well understood in the context of
OMQA. A natural way to equip CQs with counting is to count
the number of distinct query matches for each answer. As the
count value may differ between models, Kostylev and Reut-
ter (2015) advocated a form of certain answer semantics that
considers lower and upper bounds on the count value across
different models. Their work provided the ﬁrst investigation
of the complexity of answering counting CQs in the presence
of ontologies, revealing such queries to be much more chal-
lenging to handle than plain CQs: coNP-complete in data
complexity for the well-known DL-Litecore and DL-LiteH
core
dialects. A recent work by Bienvenu et al. (2020) reﬁned and
generalized the complexity results from Kostylev and Reut-
ter to a wider class of counting queries and identiﬁed a re-
stricted scenario with very low (TC0-complete) data com-
rooted CQs coupled with DL-Litecore ontologies.
plexity:
A similar tractability result for connected rooted CQs was
proven independently by Calvanese et al. (2020a), who also
initiated a study of the impact of other restrictions on query
shape and developed the ﬁrst query rewriting procedure for
counting CQs. Notably, both the aforementioned TC0 result
and the rewriting procedure crucially relied upon showing

that the canonical model gives the right answers under the
considered restrictions. We brieﬂy mention two alternative
approaches to counting queries: an epistemic semantics for
aggregate queries (which only counts query matches over the
data constants, ignoring unnamed elements) was explored by
Calvanese et al. (2008), while another very recent study by
Feier et al. (2021) classiﬁes the complexity of counting the
number of certain answers (rather than the number of ways a
certain answer is obtained) for guarded existential rules.

While recent studies have improved our understanding
of the complexity of counting CQs, there nevertheless re-
In this paper, we focus
main many unanswered questions.
on Boolean atomic counting queries of the form ∃z.A(z)
and ∃z1, z2.R(z1, z2), which we term cardinality queries as
they correspond to the natural task of determining (bounds
on) the cardinality of a given concept or role name. The
data complexity of answering such basic counting queries
remains completely open for DL-Litecore ontologies, whilst
for DL-LiteH
core, the problem is known to be P-hard and in
coNP [Calvanese et al., 2020a]. The main results of our in-
vestigation are displayed in Table 1. We show that when on-
tologies are expressed in DL-Litecore, cardinality query an-
swering is tractable in data complexity and enjoys the lower
possible complexity (TC0-complete). For cardinality queries
based upon a concept atom, TC0 membership holds even for
the fragment of DL-LiteH
core obtained by disallowing negative
role inclusions. By contrast, for role cardinality queries, we
show that coNP-hard situations arise in DL-LiteH
pos, which al-
lows only positive concept and role inclusions. In fact, we ob-
tain a complete data complexity classiﬁcation for DL-LiteH
pos,
showing that every ontology-mediated query is either TC0-
complete, coNP-complete, or is in P and logspace-equivalent
to the complement of PERFECT MATCHING (whose precise
complexity is a longstanding open problem). The preced-
ing classiﬁcation does not extend to DL-LiteH
core: we iden-
tify new sources of coNP-hardness and further exhibit L-
complete cases. We ﬁnd it intriguing that such complex be-
haviour arises in what appears at ﬁrst glance to be a sim-
ple OMQA setting. Moreover, in all of the tractable cases
we identify, the canonical model may not yield the minimum
cardinality, and query answering involves solving non-trivial
optimization problems. This led us to devise an entirely new
approach based upon exploring a space of strategies to ﬁnd
the optimal way of merging witnesses for existential axioms.
The paper is organized as follows. Section 2 recalls rele-
vant background material and presents the considered OMQA
setting. Section 3 introduces strategies and uses them to es-
tablish TC0 membership. Our complexity classiﬁcation for
DL-LiteH
pos is the topic of Section 4, while Section 5 presents
our results for DL-LiteH
core. Section 6 concludes with a brief
discussion of related and future work.

An appendix with full proofs can be found in the long ver-

sion of this paper, available on arXiv.

2 Preliminaries
We recall standard deﬁnitions and notation for OMQA in DL-
Lite and introduce the particular setting studied in this paper.

DL-Litecore
DL-LiteH
pos

DL-LiteH

core

Concept
TC0-c
TC0-c†
TC0-c | L-c
| coNP-c | ?

Role
TC0-c
TC0-c | co-PM-c | coNP-c
TC0-c | L-c
| co-PM-c | coNP-c | ?

Table 1: Data complexity of cardinality queries based upon concept
and role atoms for various DL-Lite dialects. †: upper bound holds
for all DL-LiteH

core ontologies without negative role inclusions.

Knowledge Bases. We assume mutually disjoint sets NC of
concept names (unary predicates), NR of role names (binary
predicates), and NI of individual names (constants). We de-
note by N±
R the set NR ∪ {R− | R ∈ NR} of role names and
their inverses. A knowledge base (KB) K = (T , A) consists
of an ABox (dataset) A and a TBox (ontology) T . An ABox is
a ﬁnite set of concept assertions A(b) (with A ∈ NC, b ∈ NI)
and role assertions P(a, b) (with P ∈ NR, a, b ∈ NI), while
the TBox consists of a ﬁnite set of axioms, whose forms are
dictated by the considered description logic.

In this paper, our focus will be on DL-LiteH

core (alterna-
tively referred to as DL-LiteR), which is the logic underly-
ing the OWL 2 QL proﬁle. DL-LiteH
core TBoxes contain four
types of axioms: positive concept inclusions B1 (cid:118) B2, neg-
ative concept inclusions B1 (cid:118) ¬B2, positive role inclusions
R1 (cid:118) R2, and negative role inclusions R1 (cid:118) ¬R2, where the
Bi and Ri are positive concepts and roles given by:
(A ∈ NC, P ∈ NR)
Bi := A | ∃Ri
The sublogic DL-Litecore allows only concept inclusions
(which may be either positive or negative), while DL-LiteH
pos
is restricted to positive (concept and role) inclusions.

Ri : = P | P−

C (resp. Σ±

We denote by Ind(A) the set of individuals occurring in an
ABox A. A signature is a ﬁnite set of concept and role names.
Given a signature Σ, we denote by Σ±
R ) the set of
positive concepts (resp. roles) built from Σ. The signature of a
TBox T (resp. ABox A) is the set of concept and role names
it contains, denoted sig(T ) (resp. sig(A)). To simplify the
presentation, we will assume w.l.o.g. that sig(A) ⊆ sig(T ).
Semantics of KBs. An interpretation takes the form I =
(∆I, ·I), where ∆I is a non-empty set (called the domain)
and ·I is the interpretation function that maps each A ∈ NC
to AI ⊆ ∆I, each P ∈ NR to PI ⊆ ∆I × ∆I, and each
a ∈ NI to aI. In this paper, we will make the Standard Names
Assumption by setting aI = a. Note however that our results
only rely upon the weaker Unique Names Assumption (UNA),
which stipulates that aI (cid:54)= bI whenever a (cid:54)= b. The UNA is
commonly adopted for DL-Lite KBs and enables more inter-
esting reasoning in the context of counting queries.

The function ·I is extended to general concepts and roles
as follows: (P−)I = {(e, d) | (d, e) ∈ PI}, (∃R)I = {d |
(d, e) ∈ RI}, and (¬G)I = ∆I \GI. An inclusion G (cid:118) H is
satisﬁed in I if GI ⊆ HI; an assertion A(b) (resp. P(a, b)) is
satisﬁed in I if b ∈ AI (resp. (a, b) ∈ PI). An interpretation
is a model of a TBox T (resp. ABox A)) if it satisﬁes all
axioms in T (resp. assertions in A), and it is a model of a
KB K = (T , A) if it is a model of both T and A. A KB

···

◦
a1T1S

···

···

b1S
◦

S

b1R1S
◦

S

R 1

• a1

b1

•

S

◦
b1R1

T

1

S

R
1

S

S

◦
a1T1

···

◦

a2S

◦
b1R1S−

T 2

• a2

b2

•

S

◦
a2T2S

◦
a2T2

·

·

·

S

◦
a2S−

R

2

◦

b2R2

S

S

·

·

·

◦
b2R2S

◦
b2R2S−

S

◦ α

S

◦

β

1

T

S

a1

•

R
1
,
S

2,S

T

a2

•

S

◦ ⊥1

1

T

• b1

a1

•

S

• b1

1

R

S
,
2
R

R
1

• b2

a2

•

S

S

T

2

1,S

R

◦

⊥2

S
,
2
R

• b2

(a) Initial portion of the canonical model of Ke.

(b) Another model of Ke.

(c) Interpretation of strategy σe.

Figure 1: Models of the example KB Ke. For readability, we have omitted concepts and highlighted the role S from the cardinality query.

is satisﬁable if it has at least one model. An inclusion (resp.
assertion) Φ is entailed from T (resp. K), written T |= Φ
(resp. K |= Φ), if Φ is satisﬁed in every model of T (resp.
K). We use K |= ∃R(a) (resp. K |= R(a, b) with R ∈ N±
R ) to
indicate a ∈ ∃RI (resp. (a, b) ∈ RI) for every model I of K.
Example 1. As a running example, we will consider the KB
Ke = (Te, Ae) whose TBox contains the following inclusions

A1 (cid:118) ∃T1 A2 (cid:118) ∃T2 ∃T−
∃R−
1 (cid:118) ∃S
B1 (cid:118) ∃R1 B2 (cid:118) ∃R2 ∃R−
1 (cid:118) ∃S− ∃R−
2 (cid:118) ∃S ∃S− (cid:118) ∃S ∃R−
∃T−
2 (cid:118) ∃S−
and whose ABox contains the assertions

1 (cid:118) ¬∃R−
2
1 (cid:118) ¬∃T−
1

{A1(a1), A2(a2), B1(b1), B2(b2), R1(a1, a2), S(b2, b1)}
Two ﬁnite models of Ke are displayed in Figures 1b and 1c.
Canonical Model. Every satisﬁable DL-LiteH
core KB K =
(T , A) has a canonical model CK, deﬁned as follows. The
domain of CK contains Ind(A) and all words aR1 . . . Rn, with
R , and n (cid:62) 1, such that:
a ∈ Ind(A), Ri ∈ N±
• K |= ∃R1(a) and there is no R1(a, b) ∈ A;
• for 1 ≤ i < n, T |= ∃R−
i (cid:118) ∃Ri+1 and R−
Concept and role names are interpreted as follows:
ACK = {a ∈ Ind(A) | K |= A(a)}

(cid:54)= Ri+1.

i

∪ {aR1 . . . Rn ∈ ∆CK \ Ind(A) | T |= ∃R−

n (cid:118) A}

PCK = {(a, b) | P(a, b) ∈ A}

∪ {(e1, e2) | e2 = e1R and T |= R (cid:118) P}
∪ {(e2, e1) | e2 = e1R and T |= R (cid:118) P−}
We use genK to refer to the set of generated roles, i.e. those
R ∈ N±
Example 2. An initial portion of (the inﬁnite) canonical
model of Ke is displayed in Figure 1a. Observe that genK =
{S, S−, R1, R2, T1, T2}.

R such that ∆CK contains an element wR.

It is well known (see e.g. [Calvanese et al., 2007]) that,
for every model I of K, there is a homomorphism from CK
to I, i.e. a function f : ∆CK → ∆I such that (i) f (a) = a
for all a ∈ Ind, (ii) e ∈ ACK implies f (e) ∈ AI, and (iii)
(d, e) ∈ PCK implies (f (d), f (e)) ∈ PI.

Cardinality Queries. A cardinality query is either a con-
cept cardinality query ∃z.C(z) or a role cardinality query
∃z1, z2.S(z1, z2). Throughout the paper, we use qC (resp. qS)
as a shorthand for the cardinality query based upon C (resp.
S). A match for a cardinality query qC (resp. qS) in an in-
terpretation I is an element of CI (resp. SI). We deﬁne the
answer to a cardinality query q in an interpretation I, de-
noted qI, as the number of matches of q in I, or equivalently,
as the cardinality of FI, with F the concept or role name in q.
A certain answer to q w.r.t. K is an interval [m, M ] ∈ N × N
such that qI ∈ [m, M ] for every model I of K.
Example 3. Consider the role cardinality query qS. The an-
swer to qS is +∞ in CKe , 6 in the model from Figure 1b, and 5
in the model from Figure 1c. The latter implies that [6, +∞]
is not a certain answer. We leave it is an exercise to ﬁnd a
model with 3 matches and show there is no model with fewer
matches, which means that [m, +∞] is a certain answer to
qS over Ke if and only if m ≤ 3.

Observe that since DL-LiteH

Cardinality queries as deﬁned above correspond to a spe-
cial case of the counting queries considered in [Kostylev and
Reutter, 2015; Bienvenu et al., 2020; Calvanese et al., 2020a].
core cannot restrict the size of
models, the value M in a certain answer [m, M ] must be
+∞ whenever the query predicate F is satisﬁable w.r.t. T (i.e.
there is a model I of T such that FI (cid:54)= ∅). For this reason,
we assume the latter condition holds and focus on identifying
certain answers of the form [m, +∞].
Complexity. We will be interested in classifying the com-
plexity of the following problem:

OMQA(q, T ): Given A and an integer m ≥ 1 (in binary),
decide whether [m, +∞] is a certain answer to q w.r.t. K.

where (q, T ) is an ontology-mediated query (OMQ) based
upon a cardinality query q and a TBox T formulated in
DL-LiteH
core or one of its sublogics. Note that we are adopting
the data complexity measure as (q, T ) is ﬁxed.

Beyond well-known complexity classes such as P and
coNP, we will refer to the following classes: TC0 is the
class of problems solvable by families of constant-depth

polynomial-size circuits based upon AND, OR, NOT, and
threshold gates, and L (resp. NL) is the class of problems
solvable in deterministic (resp. nondeterministic) logarithmic
space. It is known that: TC0 ⊆ L ⊆ NL ⊆ ... ⊆ P ⊆ coNP.

3 Tractable Cases
In this section, we identify two settings in which cardinality
queries can be answered with the lowest possible complexity:
Theorem 1. OMQA(q, T ) is TC0-complete if either (i) q is
a role cardinality query and T a DL-Litecore TBox, or (ii) q
is a concept cardinality query and T is a DL-LiteH
core TBox
without negative role inclusions.

The remainder of this section is devoted to establishing
TC0 membership for case (i) where our query is qS =
∃z1, z2.S(z1, z2). A similar but simpler argument can be
used for the membership half of case (ii), while TC0-
hardness is easily shown by reduction from the TC0-complete
NUMONES problem [Aehlig et al., 2007] asking, given a bi-
nary string X and k ≥ 1, whether X contains at least k 1-bits.
Existing proofs of sub-polynomial data complexity for re-
stricted classes of counting queries rely on the canonical
model minimizing the number of matches [Bienvenu et al.,
2020; Calvanese et al., 2020a]. However, for the class of
cardinality queries, the canonical model may not yield the
minimum value. Therefore, we develop a different approach
based upon a systematic exploration of a set of models that is
guaranteed to contain an optimal model and whose size de-
pends only on the TBox. This special set of models will be
induced from strategies that dictate how to merge elements of
the canonical model. To show such models contain the op-
timal value, we show that if we extract a strategy σ from an
arbitrary model I and consider any model J induced by σ,
then J has at most as many matches as the initial model I.

We now formalize this approach. In order to abstract from

speciﬁc ABox individuals, we introduce types.
Deﬁnition 1. A type for a TBox T is a subset of sig(T )±
C .
The set of all types is ΘT = 2sig(T )±
C . We denote by θK(d) the
type of a domain element d w.r.t. K and deﬁne it by: θK(d) =
C | K |= B(d)(cid:9) if d ∈ Ind(A), else θK(d) = ∅.
(cid:8)B ∈ sig(T )±
running example,
θKe(a1) =
Example 4.
{A1, ∃R1, ∃T1} and θKe (α) = ∅ (since α (cid:54)∈ Ind(Ae)).

In our

Strategies indicate for each generated role R the type onto
which all elements wR should merge. Several copies of a type
might be required to comply with negative inclusions (e.g. R1
and R2 associated to the same type but T |= ∃R−
1 (cid:118) ¬∃R−
2 ).
Deﬁnition 2. A strategy σ for the KB K is a function from
genK to ΘT × {1, . . . , (cid:12)
(cid:12)sig(T )±
R
1. ∀R ∈ genK : σ(R) = (t, i) ∧ B ∈ t ⇒ T (cid:54)|= ∃R− (cid:118) ¬B.
1 (cid:118) ¬∃R−
2. ∀R1, R2 ∈ genK : σ(R1) = σ(R2) ⇒ T (cid:54)|= ∃R−
2 .
3. ∀t ∈ ΘT , if t (cid:54)= ∅, then |{i | ∃R ∈ genK, σ(R) = (t, i)}|

(cid:12)
(cid:12)}, that satisﬁes:

≤ |{a | a ∈ Ind(A) ∧ θK(a) = t}|.
Conditions 1 and 2 ensure that merging will not violate any
negative inclusions. Condition 3 ensures the ABox provides
at least as many individuals of a non-empty type as the strat-
egy requires copies of this type.

Example 5. The following mapping σe is a strategy for Ke:

T1
T2
R1

(cid:55)→ (∅, 1)
(cid:55)→ (∅, 2)
(cid:55)→ (∅, 2)

(cid:55)→ ({B1, ∃R1, ∃S, ∃S−}, 1)
(cid:55)→ (∅, 2)

R2
S
S− (cid:55)→ ({A1, ∃R1, ∃T1}, 1)

(cid:12)sig(T )±
R

To construct a model from a strategy σ, the basic idea is to
merge elements wR with an element of type σ(R), with the
latter selected according to a choice of well-typed elements:
Deﬁnition 3. A mapping ch : genK → Ind(A) (cid:93) {⊥i | i =
1, . . . , (cid:12)
(cid:12)
(cid:12)}, is a choice of well-typed elements for σ
over K if it satisﬁes the following conditions:
1. ∀R ∈ genK, ∃i such that σ(R) = (θK(ch(R)), i)
2. ∀R1, R2 ∈ genK, ch(R1) = ch(R2) ⇔ σ(R1) = σ(R2).
Example 6. The function che, deﬁned as below, is a choice
of well-typed elements for σe over Ke:

T1
R2

(cid:55)→ ⊥1 T2
(cid:55)→ b1

S

(cid:55)→ ⊥2 R1
(cid:55)→ ⊥2
(cid:55)→ ⊥2 S− (cid:55)→ a1

It turns out however that when R = S or R = S−, it is use-
ful to depart from this guideline in order to reduce the number
of query matches, as this stand-alone example illustrates:
Example 7. Consider T = {A (cid:118) ∃S, B (cid:118) ∃S−} and
If we merge a1S with
A = {A(a1), A(a2), B(b1), B(b2)}.
a2S, and b1S− with b2S−, then there will be at least three
matches of qS, no matter which further merges are performed.
However, by ‘pairing’ a1 with b1 and a2 with b2, we can ob-
tain a model with only two matches: (a1, b1), (a2, b2).

The next three deﬁnitions serve to identify the critical ele-

K = (cid:8)a | a ∈ Ind(A) ∧ aS ∈ ∆CK(cid:9)

ments for which such a pairing operation is useful.
Deﬁnition 4. We set D+
K = (cid:8)a | a ∈ Ind(A) ∧ aS− ∈ ∆CK (cid:9).
and D−
Deﬁnition 5. Given a strategy σ, we set D+
σ = {R | R ∈
dom(σ) \ {S, S−} ∧ T |= ∃R− (cid:118) ∃S ∧ ∃S /∈ t if σ(R) =
σ = {R | R ∈ dom(σ)\{S, S−}∧T |= ∃R− (cid:118)
(t, k)} and D−
∃S− ∧ ∃S− /∈ t if σ(R) = (t, k)}.
Deﬁnition 6. Let ch be a choice of well-typed elements for σ.
We set crit+ = D+
K ∪ ch(D−
σ )
and use critical elements to refer to the elements of these sets.
Example 8. For σe and che as deﬁned in Examples 5 and 6,
we have crit+ = {a2, b1, ⊥1, ⊥2} and crit− = {a2, ⊥2}.

σ ) and crit− = D−

K ∪ ch(D+

Intuitively, a pairing matches critical elements from crit+
(which require an outgoing S) with those from crit− (which
require an incoming S).
Deﬁnition 7. A pairing for ch and σ consists of two partial
functions p+ : crit+ → crit− and p− : crit− → crit+ such
that one of the functions is total and injective, and the other
is its partial inverse.
Example 9. A pairing for che and σe is given by p+
{a2 (cid:55)→ a2, b1 (cid:55)→ ⊥2} and p−

e = {a2 (cid:55)→ a2, ⊥2 (cid:55)→ b1}.

e =

We are now ready to deﬁne the interpretation of a strategy.
Deﬁnition 8. Consider a strategy σ, choice of well-typed
elements ch, and pairing (p+, p−) for ch. For every R ∈
sig(T )±
R , pick a function sR that maps every individual in

{a | K |= R(a, b) for some b ∈ NI} to an individual sR(a)
such that K |= R(a, sR(a)). Deﬁne function χ as follows:
∆CK → Ind(A) ∪ {⊥i | i = 1, . . . , (cid:12)

(cid:12)sig(T )±
R

(cid:12)
(cid:12)}

a

(cid:55)→ a

wS (cid:55)→

wS− (cid:55)→

(cid:40) sS(χ(w))
p+(χ(w))
ch(S)
sS−(χ(w))
p−(χ(w))
ch(S−)






if sS(χ(w)) is deﬁned
else if p+(χ(w)) is deﬁned
otherwise
if sS− (χ(w)) is deﬁned
else if p−(χ(w)) is deﬁned
otherwise

wR (cid:55)→ ch(R)

The interpretation of σ (according to ch, (p+, p−) and the sR)
has domain χ(∆CK ) and interpretation function χ ◦ ·CK .
Example 10. With choice che and pairing (p+
e ), we get
χ(b2R2) = ch(R2) = b1, χ(b2R2S) = p+
e (b1) = ⊥2, and
χ(b2R2S−) = sS− (b1) = b2 (observe that on our example,
the function sS− is uniquely deﬁned, and the same is true for
the other roles). Figure 1c displays the interpretation of σe.

e , p−

Observe that the interpretation of a strategy σ depends
not only on σ but also on the functions ch, p+, p−, sR. Im-
portantly, however, the key property of such interpretations
(stated in Lemma 1 later in this section) holds for any partic-
ular choice of these functions.

It remains to prove that a model minimizing the number of
matches can be found among the interpretations of strategies.
The ﬁrst step is to to extract a strategy from a model.
Deﬁnition 9. Let I be a model of K, f : CK → I be a
homomorphism, and repr be a function mapping each role
R ∈ genK to an element with shape wR from ∆CK . Then
P = {P1, . . . , Pk}, deﬁned by

{P1, . . . , Pk} = {(f ◦ repr)−1(w) | w ∈ ∆I} \ {∅}

is a partition of genK. The strategy extracted from I (for f
and repr) is deﬁned as:

genK → ΘT × {1, . . . , (cid:12)

(cid:12)sig(T )±
R

(cid:12)
(cid:12)}

R (cid:55)→ ((θK ◦ f ◦ repr)(R), i) with R ∈ Pi

Example 11. In our running example, there is a unique ho-
momorphism fe from CKe to the model displayed in Fig-
ure 1b. Let repre be:

T1
S

(cid:55)→ a1T1
(cid:55)→ b1SSS

R2
R1

(cid:55)→ b2R2 T2
(cid:55)→ a2T2
(cid:55)→ b1R1 S− (cid:55)→ a2S−

The strategy extracted from this model (for fe and repre) is
the strategy provided in Example 5.

By applying the next lemma to a model I having the fewest
possible number of matches, we obtain the desired conclu-
sion:
there is a model minimizing the number of matches
among the models obtained by interpreting a strategy.
Lemma 1. Let I be a model of K, and J an interpretation of
a strategy extracted from I. J is a model of K and qJ
S ≤ qI
S .
We now sketch how to construct a family of TC0 circuits
(one for each size of ABox) to decide OMQA(qS, T ). Each
such circuit ﬁrst computes the set genK and the type of each

(cid:12)sig(T )±
R

ABox individual. Next, for each function (cid:37) : genK →
(cid:12)
ΘT × {1, . . . , (cid:12)
(cid:12)} satisfying Conditions 1 and 2 of
Deﬁnition 2, the circuit decides whether (cid:37) is a strategy for K
(i.e. Condition 3 holds), and if so, computes the number of
matches of qS in interpretations induced by (cid:37). Importantly,
this can be done without actually building interpretations: in
the appendix we give an explicit formula for this number and
show it can be computed with a TC0 circuit. Moreover, the
number of strategies depends only on |T |, so is constant w.r.t.
data complexity. Finally, the circuit computes the minimum
value across strategies and compares it with the input number.

4 Complexity Classiﬁcation for DL-LiteH
pos
In this section, we consider DL-LiteH
pos TBoxes. We show
that coNP-hard OMQs exist and prove a complexity tri-
chotomy which precisely delineates the tractability boundary.

We begin by exhibiting a coNP-complete1 situation.
Example 12. OMQA(qS, {B (cid:118) ∃R1, R1 (cid:118) S, ∃R−
1 (cid:118)
∃R2, R2 (cid:118) S}) is coNP-complete. We consider the NP-
complete SET COVER problem: given a set U, set of subsets
S ⊆ 2U whose union is U, and number k, decide whether
there exists a k-cover, i.e. a subset C of S with |C| ≤ k
whose union is U. We prove that there exists a k-cover iff
[Σs∈S |s| + k + 1, +∞] is not a certain answer on the follow-
ing ABox: {B(u) | u ∈ U} ∪ {S(u, s) | u ∈ s, s ∈ S}. Intu-
itively, from a k-cover C, we obtain a countermodel in which
role R1 contains pairs (u, s) such that u ∈ s and s ∈ C, and
there is one outgoing R2 role from each s ∈ C.

The following deﬁnition abstracts the preceding example.
Deﬁnition 10. A TBox T admits a propagation of role W by
a concept B ∈ sig(T )±
C and roles R1, R2 if T entails {B (cid:118)
∃R1, R1 (cid:118) W, ∃R−

1 (cid:118) ∃R2, R2 (cid:118) W}.

A propagation of S (or S−) is not sufﬁcient to ensure coNP-
hardness: the reduction sketched in Example 12 will fail in
the presence of ‘interferences’, which can be of three types.
Deﬁnition 11. A role U interferes with the propagation of W
by B, R1, R2 if it satisﬁes one of the following conditions:
1. T |= {B (cid:118) ∃U, U (cid:118) W, U (cid:118) W−};
2. T |= {∃W− (cid:118) ∃U, U (cid:118) W} and either T |= U (cid:118) W−

or T (cid:54)|= R2 (cid:118) W−;

3. if B = ∃T and T (cid:118) W, then T |= {∃T− (cid:118) ∃U, U (cid:118) W}

and either T |= U (cid:118) W− or T (cid:54)|= R2 (cid:118) W−.
Remarkably, the existence of a propagation without any
interfering role (which we call a non-trivial propagation)
ensures coNP-hardness, while its absence ensures that
OMQA(qS, T ) is in P. We further distinguish two tractable
cases, depending on the existence of a non-trivial pairing.
Deﬁnition 12. A TBox T admits a non-trivial pairing of S if
there exist B ∈ sig(T )±
T |= B (cid:118) ∃R T |= R (cid:118) S T |= R (cid:118) S− T (cid:54)|= S (cid:118) S−
and if B = ∃T, then either T (cid:54)|= T (cid:118) S or T (cid:54)|= T (cid:118) S−.

C and R ∈ sig(T )±

R such that

1A P upper bound for atomic counting queries in DL-LiteH
pos
erroneously appears in Table 1 of [Calvanese et al., 2020a], but was
corrected in a later arXiv version [Calvanese et al., 2020b].

To formulate our trichotomy result, we recall that a match-
ing in a graph (V, E) is a set of edges that are pairwise vertex-
disjoint. The PERFECT MATCHING problem (abbreviated to
PM) asks whether there exists a matching such that every ver-
tex is incident to one of its edges. Despite being the focus of
intensive research, its exact complexity remains open: in P
[Edmonds, 1965] and NL-hard [Chandra et al., 1984].
Theorem 2. Let T be a DL-LiteH
pos TBox. OMQA(qS, T )
is coNP-complete if T admits a non-trivial propagation of
either S or S−, is L-equivalent to the complement of PM if
it does not admit such a non-trivial propagation but admits a
non-trivial pairing of S, and is in TC0 otherwise.

Proof sketch. The coNP-hardness proof generalizes the re-
duction sketched in Example 12.
If there is a non-trivial
pairing (but no non-trivial propagation), we show that, up to
trivial cases solvable in TC0, the existence of a model with
few matches is equivalent to the existence of a large match-
ing between critical individuals. This yields L-equivalence
with the MAXIMUM MATCHING decision problem, which
is L-equivalent to the better-known PM problem [Rabin and
Vazirani, 1989]. TC0 membership is proven by case analysis,
where we exhibit for each case a model with an optimal (and
easily computable) number of matches.

5 First Look at DL-LiteH
We now turn to DL-LiteH
core and exhibit new situations that
are not captured by the preceding complexity classiﬁcation.

core

First, we observe that negative concept and role inclusions

introduce two new sources of coNP-hardness.
Theorem 3. For T = {B (cid:118) ∃U, U (cid:118) S, C (cid:118) ∃V, V (cid:118)
S, ∃U− (cid:118) ¬∃V− }, OMQA(qS, T ) is coNP-complete.

Proof sketch. Let (U, S, k) be an instance of SET COVER,
and consider the ABox A = {B(u) | u ∈ U} ∪ {S(u, s∗) |
u ∈ s, s ∈ S} ∪ {C(s) | s ∈ S} ∪ {S(s, s∗) | s ∈ S}. It can
be shown that no k-cover exists iff every model of (T , A) has
at least |S| + (cid:80)

s∈S |s| + k + 1 matches.

Theorem 4. For T = { B (cid:118) ∃U, U (cid:118) S, ∃U− (cid:118) ∃V, V (cid:118)
S−, V (cid:118) ¬W }, OMQA(qS, T ) is coNP-complete.

Perhaps more surprising, we show that there exist coNP-

hard OMQs based upon concept cardinality queries.
Theorem 5. For T = {A (cid:118) ∃U, ∃U− (cid:118) C, U (cid:118) ¬U(cid:48), B (cid:118)
∃V, ∃V− (cid:118) C, V (cid:118) ¬V(cid:48), ∃U− (cid:118) ¬∃V−}, OMQA(qC, T )
is coNP-complete.

Proof sketch. Hardness is shown by reducing the tautology
problem. Three individuals are introduced per propositional
variable (one for the variable itself with concept A, two for
its possible truth values), as well as one individual per clause
(with concept B). Each variable should have a truth value
given by U (whose possible values in the ABox are restricted
through the use of U(cid:48)), and each clause should have a falsi-
ﬁed literal given by V (whose possibles values in the ABox
are restricted, according to the input formula, with V(cid:48)). The
input formula is a tautology iff every model introduces a new
element marked C (as a witness for either ∃U or ∃V).

Moreover, we further show that L-complete OMQs exist.
The next result employs a role cardinality query, but a similar
result can be obtained using a concept cardinality query.
Theorem 6. For T = { B (cid:118) ∃R, R (cid:118) S, R (cid:118) ¬R− },
OMQA(qS, T ) is L-complete.

Proof. Hardness is by reduction from the L-complete prob-
lem UNDIRECTED FOREST ACCESSIBILITY (UFA) [Cook
and McKenzie, 1987], which takes as input an undirected
acyclic graph (V, E) with two connected components, ver-
tices s, t ∈ V, and asks if t is reachable from s. We
set A = {B(u) | u ∈ V} ∪ {S(u, v) | {u, v} ∈ E} ∪
{S(s, v∗), S(t, v∗)} ∪ {R(s, v∗), R(t, v∗)} and observe that
((V, E), s, t) ∈ UFA iff [2|E| + 3, +∞] is a certain answer.
Indeed, there are 2|E| + 2 matches in the ABox, and a further
match arises if we add R-atoms to satisfy B (cid:118) ∃R in a con-
nected component that contains neither s nor t (such a match
can be avoided if it contains s or t). For the upper bound,
we characterize the minimum number of matches based upon
the graph structure of the ABox and show it can be computed
in L, by using an oracle for undirected reachability.

Our results imply that, under standard complexity-theoretic
assumptions, at least four different complexities are possible
for cardinality queries coupled with DL-LiteH
core ontologies.

6 Conclusion
In this paper, we investigated the complexity of answering
cardinality queries in the presence of DL-Lite ontologies.
Our study provides several novel insights into the challenge
of adopting counting queries in OMQA. On the one hand,
we identiﬁed new sources of coNP-hardness, showing that
even single-atom counting queries can be difﬁcult to handle
(which closes some questions about restricted forms of count-
ing queries left open in [Calvanese et al., 2020a]). On the
other hand, we exhibited several settings in which cardinal-
ity queries can be answered with (sub-)polynomial data com-
plexity; in particular, the problem is in TC0 when the ontol-
ogy is formulated in DL-Litecore. Interestingly, our tractabil-
ity results do not rely on the canonical model yielding the
minimum number of matches, but instead involve a sophis-
ticated analysis of how to best merge witnesses for existen-
tial axioms. Differently from [Kostylev and Reutter, 2015;
Calvanese et al., 2020a; Bienvenu et al., 2020], we conducted
our complexity analysis on the level of ontology-mediated
queries, and notably obtained a full classiﬁcation of the com-
plexity of OMQs based upon DL-LiteH

pos ontologies.

We ﬁnd it promising that very low data complexity can be
obtained even for settings in which non-trivial optimization is
required, and we plan to explore how to extend and adapt our
techniques to identify further tractability results for counting
queries. Another important topic for future work is to trans-
form our TC0 procedures into more practical algorithms that
are suitable for implementation on top of database systems.

Acknowledgements
This work was partially supported by ANR project CQFD
(ANR-18-CE23-0003).

[Cook and McKenzie, 1987] Stephen A. Cook and Pierre
McKenzie. Problems complete for deterministic logarith-
mic space. Journal of Algorithms, 8(3):385–394, 1987.
[Edmonds, 1965] Jack Edmonds. Paths, trees and ﬂowers.
Canadian Journal of Mathematics, 17:449–467, 1965.
[Feier et al., 2021] Cristina Feier, Carsten Lutz, and Marcin
In
Przybylko. Answer counting under guarded TGDs.
Proc. of the 24th International Conference on Database
Theory (ICDT), 2021.

[Kostylev and Reutter, 2015] Egor V. Kostylev and Juan L.
Reutter. Complexity of answering counting aggregate
queries over DL-Lite. Journal of Web Semantics (JWS),
33:94–111, 2015.

[Poggi et al., 2008] Antonella Poggi, Domenico Lembo,
Diego Calvanese, Giuseppe De Giacomo, Maurizio Lenz-
erini, and Riccardo Rosati. Linking data to ontologies.
Journal of Data Semantics, 10:133–173, 2008.

[Rabin and Vazirani, 1989] Michael O. Rabin and Vijay V.
Vazirani. Maximum matchings in general graphs through
Journal of Algorithms, 10(4):557–567,
randomization.
1989.

[Xiao et al., 2018] Guohui Xiao, Diego Calvanese, Roman
Kontchakov, Domenico Lembo, Antonella Poggi, Ric-
cardo Rosati, and Michael Zakharyaschev. Ontology-
based data access: A survey. In Proc. of the 27th Interna-
tional Joint Conference on Artiﬁcial Intelligence (IJCAI),
pages 5511–5519, 2018.

References

[Aehlig et al., 2007] Klaus Aehlig, Stephen A. Cook, and
Phuong Nguyen. Relativizing small complexity classes
and their theories. In Proc. of the 21st International Work-
shop on Computer Science Logic (CSL), pages 374–388,
2007.

[Artale et al., 2009] Alessandro Artale, Diego Calvanese,
Roman Kontchakov, and Michael Zakharyaschev. The
DL-Lite family and relations. Journal of Artiﬁcial Intel-
ligence Research (JAIR), 36:1–69, 2009.

[Baader et al., 2017] Franz Baader, Ian Horrocks, Carsten
Lutz, and Ulrike Sattler. An Introduction to Description
Logic. Cambridge University Press, 2017.

[Baget et al., 2011] Jean-Franc¸ois Baget, Michel Lecl`ere,
Marie-Laure Mugnier, and Eric Salvat. On rules with exis-
tential variables: Walking the decidability line. Journal of
Artiﬁcial Intelligence (JAR), 175(9-10):1620–1654, 2011.

[Bienvenu and Ortiz, 2015] Meghyn Bienvenu and Mag-
dalena Ortiz. Ontology-mediated query answering with
In Tutorial Lectures of
data-tractable description logics.
the 11th Reasoning Web International Summer School,
pages 218–307, 2015.

[Bienvenu et al., 2020] Meghyn

Quentin
Mani`ere, and Micha¨el Thomazo.
Answering count-
ing queries over DL-Lite ontologies. In Proc. of the 29th
International Joint Conference on Artiﬁcial Intelligence
(IJCAI), pages 1608–1614, 2020.

Bienvenu,

[Cal`ı et al., 2012] Andrea Cal`ı, Georg Gottlob, and Thomas
Lukasiewicz. A general datalog-based framework for
tractable query answering over ontologies. Journal of Web
Semantics (JWS), 14:57–83, 2012.

[Calvanese et al., 2007] Diego Calvanese, Giuseppe De Gi-
acomo, Domenico Lembo, Maurizio Lenzerini, and Ric-
cardo Rosati. Tractable reasoning and efﬁcient query an-
swering in description logics: The DL-Lite family. Journal
of Automated Reasoning (JAR), 39(3):385–429, 2007.

[Calvanese et al., 2008] Diego Calvanese, Evgeny Khar-
lamov, Werner Nutt, and Camilo Thorne. Aggregate
queries over ontologies. In Proc. of the 2nd International
Workshop on Ontologies and Information Systems for the
Semantic Web (ONISW), pages 97–104, 2008.

[Calvanese et al., 2020a] Diego Calvanese, Julien Corman,
Davide Lanti, and Simon Razniewski. Counting query
answers over a DL-Lite knowledge base. In Proc. of the
29th International Joint Conference on Artiﬁcial Intelli-
gence (IJCAI), pages 1658–1666, 2020.

[Calvanese et al., 2020b] Diego Calvanese, Julien Corman,
Davide Lanti, and Simon Razniewski. Counting query an-
swers over a DL-Lite knowledge base (extended version).
arXiv:2005.05886v3, 2020.

[Chandra et al., 1984] Ashok K. Chandra, Larry J. Stock-
meyer, and Uzi Vishkin. Constant depth reducibility. SIAM
Journal on Computing, 13(2):423–439, 1984.

A Proof of Theorem 1.
Theorem 1 will be proven in stages. First, we will give the proof of TC0 membership for the case where q is a role cardinality
query and T a DL-Litecore TBox (Appendix A.1), and show how to adapt it to the case where q is a concept cardinality query
core TBox without negative role inclusions (Appendix A.2). The TC0 lower bound is given in Appendix
and T is a DL-LiteH
A.3. To prepare for the membership proofs in A.1 and A.2, we give some additional technical preliminaries and insights that
are relevant for both proofs.

We ﬁrst slightly modify the notion of strategy as deﬁned in Deﬁnition 2, by splitting it into a more ABox-independent notion
of strategy (Deﬁnition 13), coupled with a notion of legal strategy for a particular K (Deﬁnition 14). This enables us to speak
about the underlying set of abstract strategies we will explore (which depends only on the TBox), among which only some
strategies are relevant, that is legal, for a particular ABox.
Deﬁnition 13 (Strategy). A strategy σ for the TBox T is a partial function from sig(T )±
the following two conditions:

R to ΘT × {1, . . . (cid:12)

(cid:12)
(cid:12)}, satisfying

(cid:12)sig(T )±
R

1. Type compatibility: ∀R ∈ dom(σ) : σ(R) = (t, i) ∧ B ∈ t ⇒ T (cid:54)|= ∃R− (cid:118) ¬B.
1 (cid:118) ¬∃R−
2. Pseudo-injectivity: ∀R1, R2 ∈ dom(σ), σ(R1) = σ(R2) ⇒ T (cid:54)|= ∃R−
2 .

We denote by dom(σ) the subset of sig(T )±
Deﬁnition 14 (Legal strategy). Let A be an ABox and K := (T , A). A strategy σ for T is legal for K if it satisﬁes the following
two conditions:

R on which σ is deﬁned.

1. Coverage: genK = dom(σ)

2. Availability: ∀t ∈ ΘT \ {∅}, |{i | ∃R ∈ genK, σ(R) = (t, i)}| ≤

(cid:26)

a

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

a ∈ Ind(A)
θK(a) = t

(cid:27)(cid:12)
(cid:12)
.
(cid:12)
(cid:12)

Note that legal strategies from the preceding deﬁnition correspond precisely to the strategies of Deﬁnition 2.
We further introduce the following useful lemma, stating that a choice of well-typed elements for a strategy σ extracted from

a model provides, as one would expect, elements with the same type as those used in the ﬁrst place to extract the strategy σ.
Lemma 2 (Properties of extracted strategies). Let A be an ABox and K := (T , A). Let reprK be a function mapping each role
R ∈ genK to an element with shape wR from ∆CK. Let I be a model of K, and let f : CK → I be a homomorphism. Let ch be
a choice of well-typed elements for σf ◦reprK over A. The strategy σf ◦reprK extracted from I (for f and reprK) preserves both:

1. ∀R ∈ genK, θK(ch(R)) = θK(f (reprK(R)))
2. ∀R, T ∈ genK, ch(R) = ch(T) ⇔ f (reprK(R)) = f (reprK(T))

Proof.

1. Let R ∈ genK. By deﬁnition of σf ◦reprK, there exists i ∈ {1, . . . |sig(T )|} such that σf ◦reprK (R) = ((θK ◦ f ◦
reprK)(R), i) with R ∈ Pi. From Condition 1 of Deﬁnition 3, we get σf ◦reprK (R) = (θK(ch(R)), i), which gives the
desired equality of types.

2. From Condition 2 of Deﬁnition 3, ch(R) = ch(T) iff σf ◦reprK (R) = σf ◦reprK(T). If f (reprK(R)) = f (reprK(T)),
then by the deﬁnition of the extracted strategy, we have σf ◦reprK (R) = σf ◦reprK(T), so we are done. Conversely, if
ch(R) = ch(T), then σf ◦reprK(R) = σf ◦reprK(T). This implies in particular that R and T belong to the same Pi, hence
f (reprK(R)) = f (reprK(T)).

We extend the functions sR from Deﬁnition 8 as follows and introduce terminology to speak about such functions.

Deﬁnition 15 (Certain successor preference, successor preference). The family of functions (sR)R from Deﬁnition 8 is called a
certain successor preference and will also be denoted (succK
R)R
mapping an element d ∈ (∃R)I to an element e ∈ ∆I such that (d, e) ∈ RI is a successor preference in I.

R)R. For a given interpretation I, a family of functions (succI

Finally, before diving into the details of the proof, we give an idea for why this OMQA setting requires such an involved
construction. Recall that our construction involves exploring a set of strategies, whose size is constant w.r.t data complexity.
In the end, we prove that for each KB, there exists some best strategies among this set, which provide the minimum amount
of matches. One might ask, starting from our input KB, why don’t we simply exhibit one of these best strategies, instead of
exploring all possible ones? First, this is due to the set of legal strategies varying according to the ABoxes: deciding if a given
strategy is legal already requires computing statistics on the input ABox (see both conditions from Deﬁnition 14). Furthermore,
even with a ﬁxed ABox, deciding if a legal strategy is “the best” is in general a coNP-complete problem w.r.t the TBox. This is
formalized by the following two results which concern single-individual ABoxes.

Theorem 7. Given a DL-Litecore TBox T and an integer m, deciding if [m, +∞] is a certain answer to q := ∃z1, z1.S(z1, z2)
over K := (T , {A(a)}) is coNP-complete.

Proof. Let G := (V, E) be an undirected graph. Consider the TBox given by:

TG :=

(cid:91)

v∈V

{A (cid:118) ∃V, ∃V− (cid:118) ∃S} ∪

(cid:91)

{v1,v2}∈E

{∃V−

1 (cid:118) ¬∃V−

2 }.

It is easily veriﬁed that G ∈ 3COL ⇐⇒ [4, +∞] /∈ qKG for KG := (TG, {A(a)}), where 3COL is the well-known NP-complete
problem of determining if a graph has a 3-colouring.

An analogous statement holds for concept cardinality queries.

Theorem 8. Given a DL-Litecore TBox T and an integer m, deciding if [m, +∞] is a certain answer for q := ∃z.C(z) over
K := (T , {A(a)}) is coNP-complete.

Proof. Let G := (V, E) be an undirected graph. Consider the TBox given by:

TG :=

(cid:91)

v∈V

{A (cid:118) ∃V, ∃V− (cid:118) C} ∪

(cid:91)

{v1,v2}∈E

We have G ∈ 3COL ⇐⇒ [4, +∞] /∈ qKG for KG := (TG, {A(a)}).

{∃V−

1 (cid:118) ¬∃V−

2 }.

A.1 Proof of Theorem 1.i: Role Cardinality Queries and DL-Litecore.
We prove TC0 membership for OMQA based upon a DL-Litecore TBox T and a role cardinality query qS.
Proof of Lemma 1.
We ﬁrst prove the ﬁrst point of Lemma 1, stating the interpretation of a strategy extracted from a model is also a model, in the
following stronger form, which does not require the strategy to be extracted from a model in the ﬁrst place.
Lemma 3. Let A be an ABox and K := (T , A) a satisﬁable KB. Let (succK
R)R be a certain successor preference. Let σ be a
legal strategy for K. Let ch be a choice of well-typed elements for σ over K. Let p := (p+, p−) be a pairing for ch and σ. Then
the interpretation J of σ (according to ch, p, and (succK
R)R) is a model.
Proof. Assertions from the ABox and positive inclusions from T are satisﬁed since the interpretation J is built from CK.
Indeed, suppose that B (cid:118) C ∈ T and d ∈ BJ . Then from the deﬁnition of J , there exists w ∈ ∆CK such that w ∈ BCK and
d = χ(w). Since CK satisﬁes B (cid:118) C, we have w ∈ CCK. If C ∈ NC, this immediately gives d ∈ CJ . If C = ∃R, there exists
w(cid:48) such that (w, w(cid:48)) ∈ RCK , and hence we will have (χ(w), χ(w(cid:48))) ∈ RJ , which yields w ∈ CCK .

Consider now a negative axiom of the form B (cid:118) ¬C. By contradiction assume there is an element d such that d ∈ BJ ∩ CJ .

In what follows, χ is the function used in the deﬁnition of J .

1. If K |= B(d) and K |= C(d), then this contradicts K being satisﬁable.
2. If K |= B(d) and K (cid:54)|= C(d), then d = χ(wT) with T ∈ genK and T |= ∃T− (cid:118) C. Indeed K (cid:54)|= C(d) ensures d is not
the image through χ of some individual certainly satisﬁying C. Nevertheless, since d ∈ CJ , it must be that d is the image
through χ of some anonymous element, say wT, such that wT ∈ CCK. By deﬁnition of CCK , it yields T |= ∃T− (cid:118) C.
(a) If d = succK
(b) If d = p+(χ(w)) with T = S, then in particular d ∈ crit−
ch.

T(χ(w)) with T ∈ {S, S−}, then T(χ(w), d) ∈ A, contradicting K (cid:54)|= C(d).

• If d ∈ D−
• If d = ch(T0) with T0 ∈ D−

K, then in particular K |= ∃S−(d), contradicting K (cid:54)|= C(d).

0 (cid:118) ¬B. Condition 1 in
the deﬁnition of a choice of well-typed elements ensures σ(T0) = (θK(d), i). Condition 1 in the deﬁnition of a
strategy ensures B /∈ θK(d), contradicting K |= B(d).

σ , then in particular T |= ∃T−

0 (cid:118) ∃S−. Hence T |= ∃T−

(c) If d = p−(χ(w)) with T = S−. Same argument as in Case 2.b, based on d ∈ crit+
ch.
(d) If d = ch(T). Condition 1 from the deﬁnition of choice of well-typed elements ensures σ(T) = (θK(d), i). Condi-

tion 1 from the deﬁnition of a strategy ensures B /∈ θK(d), contradicting K |= B(d).

3. If K (cid:54)|= B(d) and K |= C(d). Symmetric to Case 2.
4. If K (cid:54)|= B(d) and K (cid:54)|= C(d), then d = χ(wR) = χ(w(cid:48)T) with R, T ∈ genK such that T |= ∃R− (cid:118) B and T |= ∃T− (cid:118)

C, due to the same reason than in Case 2, applied here to both concepts B and C.
(a) If d = succK
(b) If d = p+(χ(w)) with R = S, then in particular d ∈ crit−
ch.
K, then it contradicts K (cid:54)|= B(d).

R(χ(w)) with R ∈ {S, S−}, then R(χ(w), d) ∈ A, contradicting K (cid:54)|= B(d).

• If d ∈ D−
• If d = ch(R0) with R0 ∈ D−
i. If d = succK

σ , then in particular T |= ∃R−
T(χ(w(cid:48))) with T ∈ {S, S−}, then it contradicts K (cid:54)|= C(d).

0 (cid:118) ∃S−.

ii. If d = p+(χ(w(cid:48))) with T = S, then T |= ∃S− (cid:118) ¬∃S−. Contradiction.
iii. If d = p−(χ(w(cid:48))) with T = S−, in particular d ∈ crit+
ch.
K then it contradicts K (cid:54)|= C(d).

– If d ∈ D+
– If d = ch(T0) with T0 ∈ D+

0 (cid:118) ∃S. Condition 2 in the deﬁnition of the
choice of well-typed elements ensures: σ(R0) = σ(T0). Condition 2 in the deﬁnition of a strategy ensures:
T (cid:54)|= ∃R−

σ , then in particular T |= ∃T−

0 , contradicting T |= B (cid:118) ¬C.

0 (cid:118) ¬∃T−

iv. If d = ch(T). Condition 2 in the deﬁnition of the choice of well-typed elements ensures: σ(R0) = σ(T).

Condition 2 in the deﬁnition of a strategy ensures: T (cid:54)|= ∃R−
(c) If d = p−(χ(w)) with R = S−. Analogous argument to Case 4.b.
(d) If d = ch(R).

0 (cid:118) ¬∃T−, contradicting T |= B (cid:118) ¬C.

T(χ(w(cid:48))) with T ∈ {S, S−}, then it contradicts K (cid:54)|= C(d).

i. If d = succK
ii. If d = p+(χ(w(cid:48))) with T = S. Symmetric to Case 4.b.iv.
iii. If d = p−(χ(w(cid:48))) with T = S−. Symmetric to Case 4.c.iv.
iv. If d = ch(T). Condition 2 in the deﬁnition of the choice of well-typed elements ensures: σ(R) = σ(T). Condi-

tion 2 in the deﬁnition of a strategy ensures: T (cid:54)|= ∃R− (cid:118) ¬∃T−, contradicting T |= B (cid:118) ¬C.

In order to prove the second point of Lemma 2, stating that the interpretation J of the strategy extracted from a model I
has at most as many matches as the initial model I, we need to understand which pairs appear in the role of interest S in an
interpretation of our strategy. This is is the purpose of the following result.
Lemma 4 (Matches in a model interpreting a strategy). Let A be an ABox and K := (T , A). Let (succK
R)R be a certain
successor preference. Let σ be a legal strategy for K. Let ch be a choice of well-typed elements for σ over K. Let p := (p+, p−)
be a pairing for ch. Denote by J the interpretation of σ (according to ch, p, and (succK

R)R)

SJ = {(a, b) | K |= S(a, b) }
(cid:26)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ crit+
p+(x) = y

ch × crit−

ch

(cid:27)

∪

(x, y)

∪ (cid:8)(x, ch(S)) (cid:12)
∪ (cid:8)(ch(S−), y) (cid:12)

(ch(S), ch(S))











∪

∪

ch \ dom(p+) (cid:9)
(cid:12) x ∈ crit+
ch \ dom(p−) (cid:9)
(cid:12) y ∈ crit−
(cid:12)
(cid:12)
(cid:12) > (cid:12)
(cid:12)

(cid:12)
(cid:12)crit−
(cid:12)crit+
(cid:12)
(cid:12)
ch
ch

(cid:12)
T |= ∃S− (cid:118) ∃S
(cid:12)
(cid:12)
∃S /∈ θK(ch(S))
(cid:12)
ch(S) /∈ ch(D+
(cid:12)
σ )
(cid:12)
(cid:12) > (cid:12)
(cid:12)
(cid:12)
(cid:12)crit+
(cid:12)crit−
(cid:12)
ch
ch
(cid:12)
T |= ∃S (cid:118) ∃S−
(cid:12)
(cid:12)
∃S− /∈ θK(ch(S−))
(cid:12)
ch(S−) /∈ ch(D−
(cid:12)
σ )


(cid:12)
(cid:12)

(ch(S−), ch(S−))

(Shape 1)

(Shape 2)

(Shape 3+)
(Shape 3−)

(Shape 4+)

(Shape 4−)






Notice there can be no overlap between two distinct shapes and that shapes with opposite superscripts cannot coexist.

Proof. The ﬁrst inclusion (⊆) is rather straightforward. We focus on the other way around.
(⊇) We consider each of the shapes in turn and show their elements belong to SJ .

1. Let (a, b) such that K |= S(a, b).

Therefore (a, b) ∈ CK. By deﬁnition: χ(a) = a and χ(b) = b, hence (a, b) ∈ SJ .

2. Let (x, y) such that (x, y) ∈ crit+

ch × crit−
ch and p+(x) = y.
Distinguish two cases based on x ∈ crit+
ch:

• If x ∈ D+

K. By deﬁnition, we must have x ∈ Ind(A), so χ(x) = x. Moreover, xS ∈ CK, hence succK
deﬁned. Together with x ∈ dom(p+), this gives χ(xS) = p+(x). Since (x, xS) ∈ SCK , we have (x, p+(x)) ∈ SJ .

S (x) is not

• If x = ch(R) with R ∈ D+

σ . By deﬁnition of genK, there exists wR ∈ CK. Since R /∈ {S, S−}, we have χ(wR) =
ch(R). From R ∈ D+
σ further tells
us that ∃S /∈ θK(ch(R)). As χ(wR) = x ∈ dom(p+), we must have χ(wRS) = p+(x). Finally (wR, wRS) ∈ SCK
ensures (x, p+(x)) ∈ SJ .

σ , we know that T |= ∃R− (cid:118) ∃S, which ensures wRS ∈ ∆CK . The deﬁnition of D+

3+. Let (x, ch(S)) such that x ∈ crit+

ch \ dom(p+).
Distinguish two cases based on x ∈ crit+
ch:

• If x ∈ D+

K. By deﬁnition x ∈ Ind(A), so χ(x) = x. Moreover, xS ∈ CK, hence succK
with x /∈ dom(p+), we obtain χ(xS) = ch(S). Since (x, xS) ∈ SCK , we have (x, ch(S)) ∈ SJ .

S (x) is not deﬁned. Combined

• If x = ch(R) with R ∈ D+

σ . By deﬁnition of genK, there exists wR ∈ ∆CK . Since R /∈ {S, S−}, it gives χ(wR) =
ch(R). The hypothesis T |= ∃R− (cid:118) ∃S ensures wRS ∈ ∆CK. Since ∃S /∈ θK(ch(R)) and χ(wR) = x /∈ dom(p+),
it gives χ(wRS) = ch(S). Finally (wR, wRS) ∈ SCK ensures (x, ch(S)) ∈ SJ .

3−. Symmetric to Case 3+.
4+. Let (ch(S), ch(S)) with (cid:12)
(cid:12)
(cid:12) > (cid:12)
(cid:12)
(cid:12)crit+
(cid:12)crit−
ch
ch
• If x ∈ D+
K. By deﬁnition, xS ∈ CK, hence succK

(cid:12)crit−
ch
(cid:12)
(cid:12), we know that there exists some x ∈ crit+

(cid:12) > (cid:12)
(cid:12)

(cid:12)crit+
ch

(cid:12)
(cid:12), T |= ∃S− (cid:118) ∃S, ∃S /∈ θK(ch(S)) and ch(S) /∈ ch(D+

σ ). Because of
ch \ dom(p+). Distinguish two cases based on x ∈ crit+
ch:

S (x) is not deﬁned. Moreover, we chose x ∈ crit+

ch \ dom(p+), so
x (cid:54)∈ dom(p+). It follows that χ(xS) = ch(S). Since T |= ∃S− (cid:118) ∃S, we have xSS ∈ ∆CK . Combined with our
assumptions ∃S /∈ θK(ch(S)) and ch(S) /∈ crit+
ch, we obtain χ(xSS) = ch(S). Finally from (xS, xSS) ∈ SCK , we can
infer (ch(S), ch(S)) ∈ SJ .
• If x = ch(R) with R ∈ D+

σ , we have R /∈ {S, S−},
σ . By deﬁnition of genK, there exists wR ∈ ∆CK . From R ∈ D+
which gives χ(wR) = ch(R). Moreover, we also have that T |= ∃R− (cid:118) ∃S, which ensures wRS ∈ ∆CK . Since ∃S /∈
θK(ch(R)) and χ(wR) = x /∈ dom(p+), we have χ(wRS) = ch(S). Furthermore, we assumed ∃S /∈ θK(ch(S))
and ch(S) /∈ ch(D+
ch. Hence χ(wRSS) = ch(S). We conclude by using
(wRS, wRSS) ∈ SCK to infer (ch(S), ch(S)) ∈ SJ .

σ ), ensuring in particular ch(S) /∈ crit+

4−. Symmetric to Case 4+.

We next need to understand how to relate the elements of J with the elements of the original model I. In particular, we are

interested in critical elements, which motivates the following deﬁnition.
Deﬁnition 16 (Origin of critical elements). Let A be an ABox and K := (T , A). Let reprK be function mapping each role
R ∈ genK to an element with shape wR from ∆CK. Let I be a model of K and f : CK → I be a homomorphism. Let σ be
the strategy extracted from I (for f and reprK). Let ch be a choice of well-typed elements for σ over K. The origins of critical
elements are given by:

ori+ : crit+

ori− : crit−

ch → ∆I
(cid:26) x
x (cid:55)→

ch → ∆I
(cid:26) y
(cid:55)→
y

f (reprK(R))

f (reprK(T))

if x ∈ D+
K
if x = ch(R) with R ∈ D+
σ

if y ∈ D−
K
if y = ch(T) with T ∈ D−
σ

Notice the second point in Lemma 2 ensures that ori+, resp. ori−, is well deﬁned, that is, it does not depend on the choice of the
role R, resp. T.

Observe that this way of associating critical elements with elements of the original model is injective.

Lemma 5. The functions ori+ and ori− as deﬁned in Deﬁnition 16, are injective.
Proof. Let x, x(cid:48) ∈ crit+
1. Suppose x ∈ D+
K.

ch such that ori+(x) = ori+(x(cid:48)). We consider the four possible cases.

(a) Suppose x(cid:48) ∈ D+
K.

Trivial: x = ori+(x) = ori+(x(cid:48)) = x(cid:48).
(b) Suppose x(cid:48) = ch(R(cid:48)) with R(cid:48) ∈ D+
σ .

On the one hand, statement 1 from Lemma 2 ensures θK(x(cid:48)) = θK(f (reprK(R(cid:48))). Since by our assumptions we have
x = ori+(x) = ori+(x(cid:48)) = f (reprK(R(cid:48)), we get θK(x) = θK(f (reprK(R(cid:48))), hence θK(x(cid:48)) = θK(x). Since x ∈ D+
K,
this means in particular that ∃S ∈ θK(x(cid:48)).
On the other hand, ch must satisfy Condition 1 of the deﬁnition of choice of well-typed elements, so σ(R(cid:48)) =
(θK(x(cid:48)), i) for some i. However, from R(cid:48) ∈ D+

σ , we have that ∃S /∈ θK(x(cid:48)), a contradiction.

2. Suppose x = ch(R) with R ∈ D+
σ .

(a) Suppose x(cid:48) ∈ D+
K.

Symmetric to Case 1.b.

(b) Suppose x(cid:48) = ch(R(cid:48)) with R(cid:48) ∈ D+
σ .

Then θK(f (reprK(R)) = θK(f (reprK(R(cid:48))). Statement 2 from Lemma 2 yields ch(R) = ch(R(cid:48)), hence x(cid:48) = x.

Therefore, ori+ is injective. The argument for ori− is symmetric.

We are now ready to prove the second point of Lemma 1, which is formulated in full detail in the following statement.

Lemma 6. Let A be an ABox and K := (T , A). Let reprK be function mapping each role R ∈ genK to an element with shape
wR from ∆CK . Let I be a model of K and f : CK → I be a homomorphism. Let σ be the strategy extracted from I (for f and
reprK). Let ch be a choice of well-typed elements for σ over K. Let p be a pairing for ch. Denote by J the model resulting
from interpreting the strategy σ (according to ch, p, and any certain successor preference). Then we have:

S ≤ qI
qJ
S.

Proof. In the following, assume (cid:12)
(cid:12) ≥ (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)crit−
(cid:12) with possible shapes 1, 2, 3− and 4− is symmetrical.
ch

(cid:12)crit+
ch

(cid:12)crit+
ch

(cid:12)crit−
ch

(cid:12) > (cid:12)
(cid:12)

(cid:12)
(cid:12) so that the only possible shapes for matches are 1, 2, 3+ and 4+. The case

R)R for I (refer back to Deﬁnition 15). We associate with each match π of qS in J a

Pick some successor preference (succI
match ρ(π) in I depending on the shape of π:

ρ(π) :






(a, b)
(ori+(x), succI
(f (reprK(S)), succI

S (ori+(x)))

S (f (reprK(S))))

if π = (a, b) is of Shape 1
if π = (x, y) is of Shape 2 or 3+
if π = (ch(S), ch(S)) is of Shape 4+

Notice that in all cases ρ(π) is indeed a match in I. This is obvious if π is of Shape 1. When π of Shape 2 or
S (ori+(x)) is well deﬁned, and we have ρ(π) =
S (f (reprK(S)))) is well

3+, ori+(x) is an element of ∆I that possesses an S-successor, so succI
(ori+(x), succI
deﬁned, and (f (reprK(S)), succI

S (ori+(x))) ∈ SI. Finally, if π is of Shape 4+, this means T |= ∃S− (cid:118) ∃S, succI

S (f (reprK(S)))) ∈ SI.

Now we prove that ρ is injective. Consider two matches π1, π2 of qS in J such that ρ(π1) = ρ(π2). We will use π1[1], π1[2]
to refer to the ﬁrst and second arguments of π1, and similarly for π2. We consider all nine cases, showing in each case that
either the situation cannot occur or that π1 = π2:

1. When π1, π2 are both of Shape 1, we have π1 = ρ(π1) = ρ(π2) = π2.

1.
2, 3+. π1 = (a, b) is of Shape 1, so π1 = ρ(π1), while π2 = (x, y) is of Shape 2 or 3+, which implies that x ∈ crit+
ch.
K, then ρ(π2)[1] = ori+(x) = x. It follows that ρ(π1)[1] = a = x. But a /∈ D+

• If x ∈ D+

K since S(a, b) ∈ A, which

is a contradiction.

• If x = ch(R) with R ∈ D+

σ , then in particular ∃S /∈ θK(ch(R)). Lemma 2 tells us that θK(ch(R)) =
θK(f (reprK(R))). We also have ori+(x) = f (reprK(R)), so ρ(π2)[1] = f (reprK(R)). From ρ(π1) = ρ(π2)
we get a = f (reprK(R)). Putting this together, we get ∃S /∈ θK(a), which contradicts S(a, b) ∈ A.

4+. In particular ∃S /∈ θK(ch(S)) and ρ(π2)[1] = f (reprK(S)). Lemma 2 provides θK(ch(S)) = θK(ρ(π2)[1]). Recall

π1 = ρ(π1) = (a, b) and ρ(π1) = ρ(π2), hence ∃S /∈ θK(π1[1]). Contradiction with S(a, b) ∈ A.

2, 3+.

1. Symmetric to Case 1.(2, 3+).

2, 3+. As both π1 and π2 are of Shapes 2 / 3+, we have ori+(π1[1]) = ori+(π2[1]). We can apply Lemma 5 to obtain
π1[1] = π2[1]. By examining the conditions of Shapes 2 and 3+, we can see that π1 and π2 must have the same
shape, and moreover, their second arguments must coincide, yielding π1 = π2.

4+. As π1 = (x, y) is of Shape 2 / 3+, we have x = π1[1] ∈ crit+

ch. As π2 = (ch(S), ch(S)) is of Shape 4, we have

σ ), and ρ(π2) = (f (reprK(S)), succI

S (f (reprK(S)))).

T |= ∃S− (cid:118) ∃S, ∃S /∈ θK(ch(S)), ch(S) /∈ ch(D+
• If x ∈ D+

K, then ρ(π1)[1] = ori+(x) = x ∈ Ind(A). From ρ(π1) = ρ(π2) and above, we get x = ρ(π1)[1] =
ρ(π2)[1] = f (reprK(S)). By statement 1 of Lemma 2, we have θK(ch(S)) = θK(f (reprK(S))), yielding θK(x) =
θK(ch(S)). Recall that x ∈ D+
K ensures in particular ∃S ∈ θK(x), it contradicts the assumption ∃S /∈ θK(ch(S)).
σ , then ρ(π1)[1] = f (reprK(R)). As ρ(π1) = ρ(π2) and ρ(π2)[1] = f (reprK(S)), we
have f (reprK(R)) = f (reprK(S)). The second statement of Lemma 2 gives us ch(R) = ch(S). Since R ∈ D+
σ ,
we get a contradiction with ch(S) /∈ ch(D+

• If x = ch(R) with R ∈ D+

σ ).

4+.

1. Symmetric to Case 1.4+.
2, 3+. Symmetric to Case (2, 3+).4+.

4+. By deﬁnition π1 = π2 = (ch(S), ch(S)).

Explicit formula for number of matches in the interpretation of a strategy.
To avoid computing an actual model interpreting a strategy and then computing its number of matches, it is useful to observe
that this amount is easily decided in advance and, in particular, is independent of the choice of well-typed elements and of the
pairing. This is expressed by the following lemma.

Lemma 7. Let A be an ABox and K := (T , A). Let σ be a legal strategy over K. Every model interpreting the strategy σ
provides the following amount λσ/K of matches:

(cid:12)
(cid:12) + |σ(D+
(cid:12)
(cid:12) + |σ(D−

σ )|, (cid:12)
σ )|

(cid:12)D−
K

(cid:12)
(cid:12) + |σ(D−

σ )|(cid:1)

if

+1

(cid:12)D+
K
(cid:12)D−
K

λσ/K := |{(a, b) | K |= S(a, b)}| + max (cid:0)(cid:12)
σ )| > (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)D+
(cid:12) + |σ(D+
K
T |= ∃S− (cid:118) ∃S
∃S /∈ t if σ(S) = (t, k)
σ(S) /∈ σ(D+
σ )
(cid:12)
σ )| > (cid:12)
(cid:12)
(cid:12)D−
(cid:12) + |σ(D−
K
T |= ∃S (cid:118) ∃S−
∃S− /∈ t if σ(S−) = (t, k)
σ(S−) /∈ σ(D−
σ )

(cid:12)D+
K

+1

if

(cid:12)
(cid:12) + |σ(D+

σ )|

Before giving the proof of the preceding lemma, it will helpful to ﬁrst establish the relationship holding between the sizes of

K, D+

σ , D−

the sets D+
Lemma 8. Let ch be a choice of well-typed elements for a legal strategy σ over K. Then the sets crit+
following:

σ and the sets of critical elements.

K, D−

ch and crit−

ch satisfy the

In particular, the sizes of crit+

(cid:12)
(cid:12) = (cid:12)
(cid:12)
(cid:12)crit+
ch
ch and crit−

σ )(cid:12)
(cid:12)σ(D+
(cid:12)

(cid:12) + (cid:12)
(cid:12)
ch do not depend on ch.

(cid:12)D+
K

(cid:12)
(cid:12)crit−
ch

(cid:12) = (cid:12)
(cid:12)

(cid:12)D−
K

(cid:12) + (cid:12)
(cid:12)

σ )(cid:12)
(cid:12)σ(D−
(cid:12).

Proof. First we prove that D+
K, then ∃S ∈ θK(a). Therefore, if ever ch(R) = a,
then by Condition 1 from the deﬁnition of a choice of well-typed elements: σ(R) = (θK(a), k), which would contradict
R ∈ D+
σ ) = ∅. We conclude by applying Condition 2 from the deﬁnition of a choice of well-typed
elements, which ensures that |ch(D+

σ ) are disjoint. Notice that if a ∈ D+

σ . Hence D+

K and ch(D+

K ∩ ch(D+

σ )|. The case of crit−

σ )| = |σ(D+

ch is symmetric.

We now return to the proof of Lemma 7:

Proof of Lemma 7. Let J be the interpretation of σ obtained according to a choice of well-typed element ch, a pairing p, and
some certain successor preference. From Lemma 4, and recalling that distinct shapes are incompatible, we have:

(cid:12)SJ (cid:12)
(cid:12)

(cid:12)crit+
ch
(cid:12)crit+
ch
(cid:12)crit+
ch
(cid:12)crit−
ch

+ min (cid:0)(cid:12)
+ max (cid:0)(cid:12)
if (cid:12)
+1
if (cid:12)

(cid:12) = |{(a, b) | K |= S(a, b) }|
(cid:12), (cid:12)
(cid:12)
(cid:12)
(cid:1)
(cid:12)crit−
(cid:12)
ch
(cid:12)
(cid:12) − (cid:12)
(cid:12)crit−
ch
(cid:12) > (cid:12)
(cid:12)
(cid:12)crit−
ch
(cid:12) > (cid:12)
(cid:12)
(cid:12)crit+
ch
= |{(a, b) | K |= S(a, b) }| + max (cid:0)(cid:12)
(cid:12) > (cid:12)
(cid:12)
(cid:12) > (cid:12)
(cid:12)

(cid:12)crit+
ch
(cid:12)crit−
ch

(cid:12)crit−
ch
(cid:12)crit+
ch

if (cid:12)
if (cid:12)

+1

+1

+1

(cid:12) − (cid:12)
(cid:12)

(cid:12)crit−
ch

(cid:12), 0(cid:1) + max (cid:0)(cid:12)
(cid:12)
(cid:12)
(cid:12), 0(cid:1)
(cid:12)
(cid:12) ∧ T |= ∃S− (cid:118) ∃S ∧ ∃S /∈ θK(ch(S)) ∧ ch(S) /∈ ch(D+
σ )
(cid:12)
(cid:12) ∧ T |= ∃S (cid:118) ∃S− ∧ ∃S− /∈ θK(ch(S−)) ∧ ch(S−) /∈ ch(D−
σ )

(cid:12)crit+
ch

(cid:12)crit+
ch

(cid:12), (cid:12)
(cid:12)
(cid:12)crit−
ch

(cid:1)

(cid:12)
(cid:12)

(cid:12)
(cid:12) ∧ T |= ∃S− (cid:118) ∃S ∧ ∃S /∈ θK(ch(S)) ∧ ch(S) /∈ ch(D+
σ )
(cid:12)
(cid:12) ∧ T |= ∃S (cid:118) ∃S− ∧ ∃S− /∈ θK(ch(S−)) ∧ ch(S−) /∈ ch(D−
σ )

We can then apply Lemma 8 to express crit+
σ . We also need to use Condition 1
from the deﬁnition of a choice of well-typed elements in order to replace ∃S /∈ θK(ch(S)) by ∃S /∈ t if σ(S) = (t, k), and
σ ) (and similarly for S−). It can be veriﬁed that this indeed yields the
Condition 2 to replace ch(S) /∈ ch(D+
desired number λσ/K.

ch in terms of the sets D+

σ ) by σ(S) /∈ σ(D+

ch and crit−

σ , D−

K, D−

K, D+

Proof of TC0 membership for Theorem 1(i).
With Lemma 1 in hand, we can now describe how to construct a family of TC0 circuits to decide our problem. We need a
family of circuits in order to be able to handle ABoxes of different sizes. More precisely, we will create one circuit for each
possible number (cid:96) of individual names. We can assume w.l.o.g. that the same set of individuals, denoted Ind(cid:96), is used for all of
the ABoxes having (cid:96) individuals. In what follows, we introduce the different gates which are used for computing the various
sets and values used in the construction and how they are connected to each other. We start by the input gates which show how
we represent an input (A∗, m∗) to the circuit that handles (cid:96)-individual ABoxes. It can be veriﬁed that for each of the gates we
introduce decides the statement or property occurring in its label (with A∗, resp. K∗ = (T , A∗) substituted for A, resp. K).

Input gates.

• Each atomic role P appearing in T is represented by input gates

1 iff P(a, b) ∈ A∗.

P(a,b)∈A for a, b ∈ Ind(cid:96). The gate

P(a,b)∈A is set to

• Each atomic concept A appearing in T is represented by input gates

A(a)∈A for a ∈ Ind(cid:96). The gate

A(a)∈A is set to 1

iff A(a) ∈ A∗.

• The integer m∗ is represented in binary by input gates

bk=1 for each 0 ≤ k < log2(|Ind(A∗)| + |T |)|q|). The gate

bk=1 is set to 1 iff the kth bit of m∗ is 1 (with 0th-bit being the least signiﬁcant bit).

Regarding the last point, we use the observation from [Kostylev and Reutter, 2015] that if m∗ is a certain answer for q over K∗,
then m∗ cannot exceed (|Ind(A∗)| + |T |)|q| = (|Ind(cid:96)| + |T |)|q|. We denote K this upper bound. This is a direct consequence
of the fact that every satisﬁable DL-LiteH

core KB K = (T , A) has a model with at most |Ind(A)| + |T | elements.

Gates for computing available roles and entailed concepts for ABox individuals.
For each positive role R and each individual name a ∈ Ind(cid:96), introduce a disjunctive gate ∨

∃b,K|=R(a,b)

taking as inputs:

•

•

R(a,b)∈A for each b ∈ Ind(A), if R ∈ NR.
P(b,a)∈A for each b ∈ Ind(A), if R = P− with P ∈ NR.

For each positive concept B and each individual name a ∈ Ind(cid:96), introduce a disjunctive gate ∨

taking as inputs:

K|=B(a)

•

• ∨

A(a)∈A for each atomic concept A such that T |= A (cid:118) B.
R such that T |= ∃R (cid:118) B.

for all role R ∈ N±

∃b,K|=R(a,b)

Computing types and counting number of occurring types.
For each type t ∈ ΘT and each individual name a ∈ Ind(cid:96), introduce a conjunctive gate ∧

taking as inputs:

θK(a)=t

• ∨

K|=B(a)

for each positive concept B such that B ∈ t.

• the negation of ∨

K|=B(a)

for each positive concept B such that B /∈ t.

For each type t ∈ ΘT and each k ∈ {0, . . . (cid:12)
for each individual name a ∈ Ind(cid:96).
Remark: Notice here that k ranges up to (cid:12)
condition from Deﬁnition 14). Notice also the label “∃≥k ind. of type t”, which stands for |{a ∈ Ind(cid:96) | θK(a) = t}| ≥ k.

(cid:12)
(cid:12) as any strategy requires at most this many copies of a type (see availability

(cid:12)
(cid:12)}, introduce a threshold gate (cid:62)k

taking as inputs: ∧

(cid:12)sig(T )±
R

(cid:12)sig(T )±
R

∃≥k ind. of type t

θK(a)=t

Identifying generated roles.
For each individual name a ∈ Ind(cid:96) and each positive role R, introduce a conjunctive gate ∧
∨

and the negation of ∨

.

K|=∃R(a)

∃b,K|=R(a,b)

aR∈∆CK

taking as inputs:

For each positive role R, introduce a disjunctive gate ∨
T ensures that if aT ∈ ∆CK , then there exists a word w starting with T and ending by R s.t aw ∈ ∆CK .

taking as inputs: ∧

aT∈∆CK

R∈genK

for each positive role T such that

Identifying demanding individuals (see Deﬁnition 4).
For each a ∈ Ind(cid:96), introduce a conjunctive gate ∧

a∈D+
K

taking as inputs: ∨

K|=∃S(a)

and the negation of ∨

∃b,K|=S(a,b)

.

For each a ∈ Ind(cid:96), introduce a conjunctive gate ∧

a∈D−
K

taking as inputs: ∨

K|=∃S−(a)

and the negation of ∨

∃b,K|=S−(a,b)

.

Subcircuit for each strategy σ ∈ (ΘT ×{1, . . . (cid:12)
Introduce a conjunctive gate ∧

(cid:12)
(cid:12)})N±
(cid:12)N±
R
taking as inputs:

coverage σ

R (see Deﬁnition 13), to check legality w.r.t. input (Deﬁnition 14).

• ∨

for each positive role R ∈ dom(σ),

R∈genK
• the negation of ∨

for each positive role R /∈ dom(σ).

R∈genK

Introduce a conjunctive gate ∧

availability σ

taking as inputs: (cid:62)k

for each type t being required k times by σ.

Introduce a conjunctive gate ∧

taking as inputs: ∧

legal σ

Computing λσ/K for each strategy σ (see Lemma 7).

∃≥k ind. of type t
and ∧

.

coverage σ

availability σ

A threshold gate (cid:62)k

mA+|D+

K|+|σ(D+

σ )|≥k

for each k ∈

{0, . . . , K} taking as inputs:

•

S(a,b)∈A for each (a, b) ∈ Ind(cid:96) × Ind(cid:96),

• ∧

a∈D+
K

for each a ∈ D+
K,

• |σ(D+

σ )| copies of a true gate 1 .

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

A threshold gate (cid:62)k

mA+|D−

K|+|σ(D−

σ )|≥k

for each k ∈

{0, . . . , K} taking as inputs:

•

S(a,b)∈A for each (a, b) ∈ Ind(cid:96) × Ind(cid:96),

• ∧

a∈D−
K

for each a ∈ D−
K,

• |σ(D−

σ )| copies of a true gate 1 .

Introduce ∧

|D+

K|+|σ(D+

σ )|=|D−

K|+|σ(D−

σ )|=k−mA

for each k ∈ {0, . . . , K} taking as inputs:

• (cid:62)k

• (cid:62)k

mA+|D+

K|+|σ(D+

σ )|≥k

mA+|D−

K|+|σ(D−

σ )|≥k

and the negation of (cid:62)k+1

and the negation of (cid:62)k+1

• ∧

.

legal σ

mA+|D+

K|+|σ(D+

σ )|≥k+1

,

,

mA+|D−

K|+|σ(D−

σ )|≥k+1

Notice that for the latter and upcoming gates of this block, we omit “legal σ” from the labels for clarity.

Introduce ∧

σ )|<|D−
|D+
k ∈ {0, . . . , K} taking as inputs:

K|+|σ(D+

K|+|σ(D−

σ )|=k−mA

for each

Introduce ∧

σ )|<|D+
|D−
k ∈ {0, . . . , K} taking as inputs:

K|+|σ(D−

K|+|σ(D+

σ )|=k−mA

for each

• the negation of (cid:62)k

mA+|D+

K|+|σ(D+

σ )|≥k

,

• (cid:62)k

mA+|D−

K|+|σ(D−

σ )|≥k

and

the

negation

of

(cid:62)k+1

,

mA+|D−

K|+|σ(D−

σ )|≥k+1

• ∧

.

legal σ

• (cid:62)k

mA+|D+

K|+|σ(D+

σ )|≥k

and

the

negation

of

(cid:62)k+1

,

mA+|D+

K|+|σ(D+

σ )|≥k+1

• the negation of (cid:62)k

• ∧

.

legal σ

mA+|D−

K|+|σ(D−

σ )|≥k

,

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

For each k ∈ {0, . . . , K}, introduce a disjunctive gate ∨

taking as inputs:

λσ/K=k

• ∧

• If T
∧

|D+

K|+|σ(D+

σ )|=|D−

σ )|=k−mA
K|+|σ(D−
|= ∃S (cid:118) ∃S−, ∃S−

,

|D+

K|+|σ(D+

σ )|<|D−

K|+|σ(D−

σ )|=k−1−mA

• If T |= ∃S− (cid:118) ∃S, ∃S /∈ t with σ(S) = (t, k), and σ(S) /∈ σ(D+

otherwise gate ∧

|D+

K|+|σ(D+

σ )|<|D−

K|+|σ(D−

σ )|=k−mA

.

t with σ(S−) = (t, k) and σ(S−)

/∈

σ(D−

σ ),

then gate

/∈
, otherwise gate ∧

K|+|σ(D−

σ )|=k−mA

,

|D+

σ )|<|D−

K|+|σ(D+
σ ), then gate ∧

|D−

K|+|σ(D−

σ )|<|D+

K|+|σ(D+

σ )|=k−1−mA

,

We are now able to compute the minimal amount of matches given by legal strategies.

Final comparison with the input integer (see Lemma 1).

For each k ∈ {0, . . . , K}, introduce a disjunctive gate ∨

taking as inputs: ∧

min
legal σ

λσ/K<k

λσ/K=k(cid:48)
legal σ

for each strategy σ and each

k(cid:48) < k.
For each k ∈ {0, . . . , K}, introduce a conjunctive gate ∧

taking as inputs:

m=k

•

bj =1 such that the jth bit of the binary encoding of k is 1,

• the negation of

bj =1 such that the jth bit of the binary encoding of k is 0.

For each k ∈ {0, . . . , K}, introduce a conjunctive gate ∧

min
legal σ

λσ/K≥m=k

taking as inputs: ∧

m=k

and the negation of

∨

.

min
legal σ

λσ/K<k

Introduce an output disjunctive gate ∨

min
legal σ

λσ/K≥m

taking as inputs: ∧

min
legal σ

λσ/K≥m=k

for each k ∈ {0, . . . , K}.

To complete the proof, we observe that, since the TBox T is ﬁxed, the number of gates is polynomial in the described family
of circuits. Moreover, all circuits in the family have the same depth (13). Thus, the construction yields a TC0 of circuits for
deciding OMQA(qS, T ) and establishes membership in TC0.

A.2 Proof of Theorem 1.ii: Concept Cardinality Queries and DL-LiteH
We now turn to the case where T is a DL-LiteH
query: ∃z C(z).

core TBox without negative role inclusions and qC is the concept cardinality

core without negative role inclusions.

Due to a simpler shape of the query, several notions simplify. In particular, distinguishing between positive and negative

critical elements is no longer necessary and these notions can be uniﬁed as follows.
Deﬁnition 17 (Demanding roles, critical elements). Let σ be a strategy. Deﬁne demanding roles Dσ as:
(cid:40)

(cid:41)

Dσ :=

R

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

R ∈ dom(σ)
T |= ∃R− (cid:118) C
C /∈ t if σ(R) = (t, k)

Let ch be a choice of well-typed elements for σ over K. Deﬁne the set of critical elements as:

critch = ch(Dσ)

Pairing is also no longer necessary, which means the interpretation of a strategy can be drastically simpliﬁed as follows.
Deﬁnition 18 (Interpretation of a strategy). Let A be an ABox and K := (T , A). Let σ be a legal strategy over K. Let ch be a
choice of well-typed elements for σ over A. Consider the following mapping:

χ : ∆CK → Ind(A) ∪ {⊥i | i = 1, . . . (cid:12)

(cid:12)sig(T )±
R

(cid:12)
(cid:12)}

a

(cid:55)→ a
wR (cid:55)→ ch(R)

The interpretation J of σ w.r.t. ch is deﬁned as the image of ·CK through χ: its domain is ∆J = χ(∆CK ), and its interpretation
function is ·J = χ ◦ ·CK.

Under these updated deﬁnitions, notice the Lemma 1 still makes perfect sense, and we start by proving it, following closely

the analogous proof for role cardinality queries.

Proof of Lemma 1 for concept cardinality queries
We ﬁrst prove the ﬁrst point of Lemma 1, stating that the interpretation of a strategy extracted from a model is also a model, in
the following stronger form, not requiring the strategy to be extracted from a model in the ﬁrst place.
Lemma 9. Let A be an ABox and K := (T , A) be a satisﬁable KB. Let σ be a legal strategy over K. Let ch be a choice of
well-typed elements for σ over A. The interpretation J of the strategy σ w.r.t. ch is a model.

Proof. Assertions from the ABox and axioms without negation are satisﬁed since the interpretation J is built from CK.
Consider now a negative concept inclusion B1 (cid:118) ¬B2. Assume for a contradiction that there is an element d such that
d ∈ B1

J . There are four cases to consider:

J ∩ B2

1. If K |= B1(d) and K |= B2(d), then this contradicts K being satisﬁable.

2. If K |= B1(d) and K (cid:54)|= B2(d), then d = χ(wR) with R ∈ genK and T |= ∃R− (cid:118) B2. In particular, d = ch(R) and
T |= ∃R− (cid:118) ¬B1. Condition 1 from the deﬁnition of choice of well-typed elements ensures σ(R) = (θK(d), i) for some
i. Condition 1 from the deﬁnition of a strategy implies that B1 /∈ θK(d), contradicting K |= B1(d).

3. If K (cid:54)|= B1(d) and K |= B2(d). Symmetric to Case 2.
4. If K (cid:54)|= B1(d) and K (cid:54)|= B2(d), then d = χ(w1R1) = χ(w2R2) with R1 ∈ genK, R2 ∈ genK, T |= ∃R−

1 (cid:118) B1
2 (cid:118) B2. In particular, d = ch(R1) = ch(R2). Condition 2 in the deﬁnition of the choice of well-typed
2 , contradicting

and T |= ∃R−
elements ensures: σ(R1) = σ(R2). Condition 2 in the deﬁnition of a strategy ensures: T (cid:54)|= ∃R−
T |= B1 (cid:118) ¬B2.

1 (cid:118) ¬∃R−

In order to prove the second point of Lemma 2, stating an interpretation J of the strategy extracted from a model I has at
most as matches as the original model I, we need to better understand what kinds of matches of qC can be found in J . This is
achieved by the following result which precisely characterizes CJ
Lemma 10 (Matches in a model interpreting a strategy). Let A be an ABox, and K := (T , A) be satisﬁable KB. Let σ be a
legal strategy over K, and let ch be a choice of well-typed elements for σ over K. Denote by J the interpretation of σ w.r.t. ch.
Then we have:

Furthermore, there is no overlap between these two distinct shapes.

∪ {ch(R) | R ∈ Dσ }

CJ = {a | K |= C(a) }

(Shape 1)

(Shape 2)

Proof. The ﬁrst inclusion (⊆) is rather straightforward. We therefore focus on proving the direction (⊇).
1. Let a be such that K |= C(a), in particular a ∈ Ind(A). By deﬁnition, χ(a) = a, hence a ∈ CJ .
2. Let R ∈ Dσ. By deﬁnition of genK, there exists wR ∈ CK. By deﬁnition of the interpretation of a strategy, χ(wR) =

ch(R). Moreover, R ∈ Dσ implies that T |= ∃R− (cid:118) C, which ensures wR ∈ CCK. Therefore ch(R) ∈ CJ .

We can now prove the second point of Lemma 1, recalled in the following statement.

Lemma 11. Let A be an ABox and K := (T , A). Let I be a model of K. Let σ be the strategy extracted from I. Let ch be a
choice of well-typed elements for σ over K. Denote J the resulting interpretation of σ. We have:

Proof. Associate each match π of q in J to a match ρ(π) in I depending of the shape of π:

ρ(π) :

(cid:40) z
z

(cid:55)→ π(z)
(cid:55)→ f (reprK(R))

if π has Shape 1

if π has Shape 2 with π(z) = ch(R)

qJ ≤ qI.

Notice ρ(π) is indeed a match in I. Now prove that ρ is injective. Let π1, π2 : q → Jσf ◦reprK
ρ(π1) = ρ(π2). We consider all four cases:

be two matches such that

1.

2.

1. π1(z1) = ρ(π1)(z1) = ρ(π2)(z1) = π2(z1) and π1(z2) = ρ(π1)(z2) = ρ(π2)(z2) = π2(z2).
2. We have π2(z) = ch(R) with R ∈ Dσ. Therefore C /∈ θK(ch(R)). Lemma 2 provides θK(ch(R)) = θK(ρ(π2)(z)).

Recall ρ(π1) = ρ(π2), hence C /∈ θK(π1(z)). Contradiction with K |= C(π1(z)).

1. Symmetric to Case 1.2.
2. We have π1(z) = ch(R1) with R1 ∈ Dσ and π2(z) = ch(R2) with R2 ∈ Dσ. Therefore f (reprK(R1)) =

f (reprK(R2)). Lemma 2 provides π1(z) = π2(z),.

Explicit formula for number of matches in the interpretation of a strategy.
We will again avoid having to produce interpretations of strategies by showing that we can directly determine the number of
matches occurring in such models. This is the purpose of the following lemma.

Theorem 9. Let A be an ABox, and K := (T , A) be a satisﬁable KB. Let σ be a legal strategy over K. Any interpretation J
of the strategy σ has the following amount λσ/K of matches:

λσ/K = |{a | K |= C(a)}| + |σ(Dσ)|

Proof. The equation immediately follows from Lemma 10 and by noticing that |critch| = |σ(Dσ)| due to second condition in
the deﬁnition of a choice of well-typed elements.

The family of circuits.
To complete the proof, we describe how to construct a family of TC0 circuits that can be used to decide our problem. The
construction is very similar to the one given for role cardinality queries, so we simply mention the updates required to adapt the
family of circuits to concept cardinality queries.

• We need to introduce further gates in the second block to compute entailed role assertions.

• The circuits in the block “Deciding demanding individuals” are no longer required.

• Each block dedicated to a particular strategy simpliﬁes as we no longer need to compare the size of positive vs negative
critical elements: each strategy still comes with a speciﬁc amount of additional matches |σ(Dσ)| due to demanding roles,
again introduced through constant gates, and counting ABox matches needs to be slightly updated from the role setting to
the concept one.

A.3 TC0-hardness.
To match our TC0 membership results, it is natural to investigate the TC0-hardness of our problem in these situations. Recall
that we assumed, in order to exclude trivial cases, that our query predicate is satisﬁable (Section 2, Cardinality Queries). We
show that this assumption is sufﬁcient to obtain TC0-hardness (for any DL-LiteH
core TBox), and it also necessary as the excluded
situations can be decided within AC0 (which we recall is the circuit complexity class obtained from TC0 by disallowing
threshold gates). We thus prove the following statement:
Theorem 10 (TC0-hard / in AC0). Let qF be a cardinality query and T be a DL-LiteH
satisﬁable w.r.t. T , then OMQA(T , q) is TC0-hard. Otherwise it is in AC0.

core TBox. If the query predicate F is

The argument for AC0 membership is trivial: a cardinality query with an unsatisﬁable predicate admits as certain answers

precisely those intervals of the form [0, M ], since every model will contain 0 matches.

For both concept and role cardinality queries, we show TC0-hardness by AC0-reduction from the NUMONES problem, known

to be TC0-complete [Aehlig et al., 2007].

Input
Output

NUMONES
Integer k ≥ 1 (given in binary) and binary string X.
Is the number of 1-bits in X at least k?

We note that we cannot reuse the TC0-hardness proof given in [Bienvenu et al., 2020], since that result used a rooted counting
query coupled with an empty TBox. By contrast, we consider non-empty TBoxes which may include existential axioms, and
our queries may match to unnamed elements.

Proof for concept cardinality queries. Let qC be our concept cardinality query and assume C is satisﬁable w.r.t. our TBox T .
Set K(T ,q) := (T , {C(a)}). Our assumption ensures K(T ,q) is satisﬁable hence its canonical interpretation (model) CK(T ,q) is
indeed a model. Let (k, X) be an instance of NUMONES. Consider the following ABox:

A ={A(aux1) | a ∈ ACK(T ,q) } ∪ {R(cid:48)(aux1, auxR) | aR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}

∪ {A(b) | bit b of X is equal to 1, a ∈ ACK(T ,q) } ∪ {R(cid:48)(b, auxR) | bit b of X is equal to 1, aR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}
∪ {A(auxR) | wR ∈ ∆CK(T ,q) , T |= ∃R− (cid:118) A} ∪ {R(cid:48)(auxT, auxR) | wTR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}

Note that in particular that A will contain C(b) for every 1-bit b of X, as well as C(aux1). The auxiliary individual aux1
mimics a 1-bit from X in order to appropriately handle the case in which X doesn’t contain any such bit. As the notation
suggests, auxiliary individuals auxR are intended to receive all needed outgoing roles R from other elements (so auxR is
intended to satisfy the concept ∃R−). Note that by construction the interpretation based upon A already satisﬁes all of the
TBox axioms. In particular, this means that there exists a model of (T , A) all of whose matches are already present in A. We
can thus focus on counting the matches explicitly given in A.

Observe that the number m of matches of qC among the auxiliary elements only depends on the OMQ (qC, T ). In particular
notice that aux1 always provides a match, hence m ≥ 1. It is straightforward to verify that m + k is a certain answer for q over
K := (T , A) iff (k, X) ∈ NUMONES. Moreover, the input (A, m + k) to our OMQA problem can be computed from (k, X)
by an AC0 circuit (recall that binary integer addition is known to be computable in AC0).

The proof for role cardinality queries is a bit more involved but follows the same idea.

Proof for role cardinality queries. Let qS be our concept cardinality query and assume S is satisﬁable w.r.t. our TBox T . Set
K(T ,q) := (T , {S(a1, a2)}). Our assumption ensures K(T ,q) is satisﬁable hence its canonical interpretation CK(T ,q) is indeed a
model. Let (k, X) be an instance of NUMONES. Consider the ABox A containing assertions:

{R(aux1, aux2) | (a1, a2) ∈ RCK(T ,q) } ∪ {A(auxj) | j ∈ {1, 2}, aj ∈ ACK(T ,q) }
∪ {R(b1, b2) | bit b of X is equal to 1, (a1, a2) ∈ RCK(T ,q) } ∪ {A(bj) | j ∈ {1, 2}, bit b of X is equal to 1, aj ∈ ACK(T ,q) }
∪ {R(cid:48)(auxj, auxR) | j ∈ {1, 2}, ajR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}
∪ {R(cid:48)(bj, auxR) | j ∈ {1, 2}, bit b of X is equal to 1, ajR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}
∪ {A(auxR) | wR ∈ ∆CK(T ,q) , T |= ∃R− (cid:118) A} ∪ {R(cid:48)(auxT, auxR) | wTR ∈ ∆CK(T ,q) , T |= R (cid:118) R(cid:48)}

Here again we note that by construction all of the TBox axioms are already satisﬁed, so we only need to concern ourselves
with matches explicitly given in the ABox. In order to compute this number, let us ﬁrst denote by n the number of matches
in CK(T ,q) that involve either a1, a2, or both individuals. Observe that n only depends on the OMQ (qS, T ) and that we have
n ≥ 1 due to the assertion S(a1, a2). Considering now the ABox A, we will denote by m the number of matches of qS in A
which only involve auxiliary elements; this value depends solely on the OMQ (qS, T ). It is not hard to see that m + k × n is a
certain answer for q over K := (T , A) iff (k, X) ∈ NUMONES.

To complete the proof, we note that we can compute (A, m + k × n) from (k, X) in AC0 due to the fact that n is a constant.
Indeed, k × n can be computed by performing a constant number of additions of k with itself, there is one more addition step
to combine with m, and we can compute the addition of a constant number of binary numbers in AC0. We point out that it
is essential here that n be a constant value, since the problem of multiplying two arbitrary binary inputs is known to not be
computable in AC0.

B Proof of Theorem 2.

The following deﬁnition introduces terminology for speaking about a speciﬁc kind of match that is guaranteed to be found in
any model:

Deﬁnition 19 (ABox matches). Let A be an ABox and K = (T , A). An ABox match for qS is a pair (a, b) ∈ Ind(A) such that
K |= S(a, b).

B.1 Proof of coNP-hardness.
We begin by proving coNP-hardness of OMQA(qS, T ) in the case where the input DL-LiteH
pos TBox T admits a non-trivial
propagation of either S or S−. Note that membership in coNP is an immediate consequence of existing results on counting
queries [Kostylev and Reutter, 2015].

Let us thus assume that T has a non-trivial propagation B, R1, R2 of S (the case of a non-trivial propagation of S− being

symmetrical). We proceed by reduction from the SET COVER problem, and distinguish two cases based on the shape of B.

Consider an instance (U, S, k) of SET COVER: each element u ∈ U occurs in at least one subset of S, we denote su by
such a subset. We introduce an individual name u for each u ∈ U, and an individual name s for each s ∈ S. The individual
introduced for the subset su is denoted su. We further introduce auxiliary individuals a and b.

We now provide the reductions for the two cases.

Case 1: B ∈ NC or B = ∃T with T (cid:54)|= T (cid:118) S. Consider the ABox:

A :=

if B ∈ NC
else, with B = ∃T

∪








U(u, a)

R , u ∈ U

U ∈ N±
T |= B (cid:118) ∃U
T (cid:54)|= U (cid:118) S

{B(u) | u ∈ U}
{T(u, a) | u ∈ U}

(cid:12)
(cid:12)
(cid:12)
(cid:12)
∪ {S(u, s) | u ∈ s, s ∈ S}
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
∪ {U(a, a) | U ∈ sig(T )R}
∪ {U(b, b) | U ∈ sig(T )R}

U ∈ N±
R , s ∈ S
T |= ∃S− (cid:118) ∃U
T (cid:54)|= U (cid:118) S

U ∈ N±
R , s ∈ S
T |= ∃S− (cid:118) ∃U
T |= U (cid:118) S





U(s, b)

U(s, a)



∪

∪














(Representation of the elements)

(Representation of the subsets)

(Introduction of non-relevant roles for elements)

(Introduction of subroles of S for subsets)

(Introduction of other roles for subsets)

(Saturation of the auxiliary individual a)

(Saturation of the auxiliary individual b)

Consider the KB K := (T , A). Notice that due to the many role assertions included in the ABox, all of the anonymous elements
in CK are of the form uUw with u ∈ U, w some word, and T |= U (cid:118) S but T (cid:54)|= U− (cid:118) S (because we are considering a
non-trivial propagation, the role U cannot satisfy Condition 1 of Deﬁnition 11). Notice also that (the negation of) Condition 2
from the same deﬁnition further ensures that there is no ABox match (b, s), with s ∈ S.

Let us denote by mA be the number of matches for qS present in the ABox A. In particular, mA ≥ (cid:80)

s∈S |s| + 1, due to the

representation of the subsets and the saturation of a. We claim:

[mA + k + 1, +∞] is a certain answer for qS w.r.t. K ⇔ (U, S, k) /∈ SET COVER

(⇒). Assume (U, S, k) ∈ SET COVER. Take some k-cover F ⊆ S of U. For each u ∈ s with s ∈ F and each positive role
U such that T |= B (cid:118) ∃U and T |= U (cid:118) S, enrich the ABox A with the assertion U(u, s). Saturate now the used subsets, that
is, for each s ∈ F , add the assertions U(s, s) for all U ∈ sig(T )R.

Up to introducing the entailed concepts, the resulting interpretation IF (based upon the described enriched ABox) is a model,
as we introduced the missing roles for the elements, the used subsets are now saturated, and the non-used subsets were already
given their needed roles.

In addition to the mA ABox matches, each used subset provides one additional match since the assertion S(s, s) has been
added. Recall Condition 1 from Deﬁnition 11 which ensures no match with shape S(s, u) is introduced, hence the roles added
between the elements and subset individuals only reuse pre-existing matches. We thus obtain a model with exactly mA + k
matches, and thus a countermodel for [mA + k + 1, +∞] being a certain answer.

(⇐). Assume (U, S, k) /∈ SET COVER. Consider a model I of K and a homomorphism f : CK → I. For each u ∈ U,
we associate a subset ρ(u) := s if f (uR1) = s and u ∈ s ∈ S, otherwise set ρ(u) := su. The image ρ(U) is a covering of U,
hence |ρ(U)| ≥ k + 1. By deﬁnition, for each s ∈ ρ(U) there exists u ∈ U such that: either f (uR1) = s with u ∈ s ∈ S, or
f (uR1) (cid:54)= s(cid:48) for all u ∈ s(cid:48) ∈ S.

In the ﬁrst case, since T |= {R1 (cid:118) S, ∃R−

1 (cid:118) ∃R2, R2 (cid:118) S} (due to the assumed non-trivial propagation), we focus on
the pair (f (uR1), f (uR1R2)). If (f (uR1), f (uR1R2)) is not already an ABox match, then we have found an additional match.
Otherwise (f (uR1), f (uR1R2)) is an ABox match (i.e. K |= S(f (uR1), f (uR1R2)). By construction of A, this must be due
to S propagating a subrole U of S (see ‘Introduction of subroles of S for subsets’ in the deﬁnition of the ABox), which means
we have f (uR1R2) = b. Condition 2 from Deﬁnition 11 applied with U provides T |= R−
2 (cid:118) S, hence (f (uR1R2), f (uR1))
is a new match (recall that (b, s) is not an ABox match!). In the second case, (f (u), f (uR1)) is a new match (in the case where
B = ∃T, simply recall that T (cid:54)|= T (cid:118) S). Therefore we can conclude that there are at least mA + k + 1 matches in I.

Case 2: B = ∃T with T |= T (cid:118) S. Consider the ABox:

A := {T(u, s) | u ∈ s ∈ S}
U ∈ N±
R , u ∈ U
T |= ∃T (cid:118) ∃U
T (cid:54)|= U (cid:118) S

U(u, a)

∪

∪




U(s, b)





(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
∪ {U(a, a) | U ∈ sig(T )R}
∪ {U(b, b) | U ∈ sig(T )R}





U(s, a)



∪

U ∈ N±
R , s ∈ S
T |= ∃S− (cid:118) ∃U
T (cid:54)|= U (cid:118) S











R , s ∈ S

U ∈ N±
T |= ∃S− (cid:118) ∃U ∨ T |= ∃T− (cid:118) ∃U
T |= U (cid:118) S

(Representation of the subsets)

(Introduction of non-relevant roles for elements)






(Introduction of subroles of S for subsets)

(Introduction of other roles for subsets)

(Saturation of the auxiliary individual a)

(Saturation of the auxiliary individual b)

We again set K := (T , A) and observe that the anonymous elements in CK are all of the form uUw with u ∈ U, T |= U (cid:118) S,
and w a word. Notice again that no pair (b, s), with s ∈ S, is an ABox match, which is due here to both Conditions 2 and 3
from Deﬁnition 11.

As before, we denote by mA the number of matches for qS in the ABox A. In particular mA ≥ (cid:80)

s∈S |s| + 1, due to the

representation of the problem instance and the saturation of a. We claim:

[mA + k + 1, +∞] is a certain answer for qS w.r.t. K ⇐⇒ (U, S, k) /∈ SET COVER

(⇒). The proof is essentially the same as for Case 1.

(⇐). Assume (U, S, k) /∈ SET COVER. Consider a model I of K and a homomorphism f : CK → I. For each u ∈ U,
we associate a subset ρ(u) := s if f (uR1) = s and u ∈ s ∈ S, otherwise set ρ(u) := su. The image ρ(U) is a covering of U,
hence |ρ(U)| ≥ k + 1. By deﬁnition, for each s ∈ ρ(U), there exists u ∈ U such that: either f (uR1) = s with u ∈ s ∈ S, or
f (uR1) (cid:54)= s(cid:48) for all u ∈ s(cid:48) ∈ S.

In the ﬁrst case, since T |= {R1 (cid:118) S, ∃R−

1 (cid:118) ∃R2, R2 (cid:118) S} (due to the assumed non-trivial propagation), we focus
on the pair (f (uR1), f (uR1R2)).
If (f (uR1), f (uR1R2)) is not already an ABox match, then we are done. Otherwise
(f (uR1), f (uR1R2)) is an ABox match, then by construction of A, it must be due to either S or T propagating a subrole U of S,
in particular, we get f (uR1R2) = b. Condition 2 (resp. Condition 3) from Deﬁnition 11 applied with U provides T |= R−
2 (cid:118) S,
hence (f (uR1R2), f (uR1)) is a new match (recall (b, s) is not an ABox match!). In the second case, (f (u), f (uR1)) is a new
match. Therefore there are at least mA + k + 1 matches in I.

B.2 Proof of reduction from co-Maximum-Matching.
We now turn to the second part of Theorem 2, which characterizes the complexity of OMQA(T , qS) in the case in which the
DL-LiteH
pos TBox T admits a non-trivial pairing of S but does not have any non-trivial propagation of S or S−. We start by
proving a logspace reduction from the complement of MAXIMUM MATCHING to our problem OMQA(T , qS). Let us ﬁrst
recall the deﬁnition of MAXIMUM MATCHING:

As explained in the main text, the latter problem is known to be equivalent, up to logspace reductions, to the better known
PERFECT MATCHING problem [Rabin and Vazirani, 1989]. Thus, the reduction we give in this subsection also proves a
reduction from PERFECT MATCHING to our problem. (A reduction in the other direction is the object of the next subsection.)

MAXIMUM MATCHING
Non-oriented graph G, integer k.

Input
Output Decide if there exists a matching of G with size at least k.

Consider a DL-LiteH

pos TBox T that admits a non-trivial pairing of S and does not admit any non-trivial propagation of S or

S−. Let B and R verify the pairing conditions, that is,

T |= B (cid:118) ∃R T |= R (cid:118) S T |= R (cid:118) S− T (cid:54)|= S (cid:118) S−

and if B = ∃T, then either T (cid:54)|= T (cid:118) S or T (cid:54)|= T (cid:118) S−.

Consider an instance of MAXIMUM MATCHING given by the undirected graph G := (V, E) and integer k. Let ≤V be any

total order on the vertices of G. We encode G using the following ABox AG:

AG :=

if B ∈ NC

{B(u) | u ∈ V}
{T(u, a) | u ∈ V} else, with B = ∃T

(cid:12)
(cid:12)
(cid:12)
(cid:12)
∪ {S(u, v) | {u, v} ∈ E, u ≤V v}
∪ {U(a, a) | U ∈ sig(T )R}

(Representation of the vertices)

(Representation of the edges)

(Saturation of the auxiliary individual)

Let KG be the KB (T , AG). Let mA be the number of matches in the ABox. Notice each edge {u, v} gives one match in the
ABox, through the added assertion S(u, v) with u ≤V v, and exactly one as T (cid:54)|= S− (cid:118) S. We claim:

[mA + |V| − k + 1, +∞] is a certain answer for qS w.r.t. KG ⇔ (G, k) /∈ MAXIMUM MATCHING
Notice that both AG and the integer mA + |V| − k + 1 are easily computable in logarithmic space from any reasonable
representation of the instance (G, k), so we will get the desired within logspace reduction.

(⇐). Assume (G, k) /∈ MAXIMUM MATCHING. Consider a model I of K and a homomorphism f : CK → I. Consider

the following matching:

MI := {{u, v} ∈ E | f (uR) = v, f (vR) = u}
As f is a function, it is clear that each vertex is incident to at most one of the edges from MI, ensuring MI is a matching. In
particular, it yields |MI| < k. Each edge from MI provides exactly one additional match, since there was already exactly one
match per edge, and the role R is a subrole of both S and S−. Each vertex that is not incident to any edge in MI provides at
least one additional match: recall that since T (cid:54)|= T (cid:118) S or T (cid:54)|= T− (cid:118) S, either (f (u), f (uR)) or (f (uR), f (u)) is a new
match.Therefore there are at least mA + |MI| + |V| − 2|MI| > mA + |V| − k matches in I.

(⇒). Assume (G, k) ∈ MAXIMUM MATCHING. Consider a matching M ⊆ E with |M | ≥ k. Consider the enriched
ABox AM such that for each {u, v} ∈ M and each positive role U ∈ N±
R , we have U(u, v) ∈ AM . This yields exactly
one additional match per edge in M , again because exactly one match per edge was already present. For each u ∈ V such
that u is not incident to any edge in M , also add all the assertions U(u, u) ∈ AM . This yields exactly one new match per
vertex not incident to any edge in M . Up to adding the entailed concepts wherever needed, this provides a model with at most:
mA + |E| + |V| − 2|E| ≤ mA + |V| − k matches of qS, being a counter model for [mA + |V| − k + 1, +∞].

B.3 Proof of reduction to co-Maximum-Matching.
In this subsection, we complete the proof of the second part of Theorem 2 by showing how OMQA(T , qS) can be reduced, via
logspace reductions, to the complement of MAXIMUM MATCHING in the case in which T is a DL-LiteH
pos without non-trivial
propagation. Again, this yields a logspace reduction to the complement of PERFECT MATCHING due to the previously cited
logspace-equivalence between these two matching problems. We start with some general remarks.

Compared with the tractable settings of Section 3, with DL-LiteH

pos, we no longer need to take care of negative concept
inclusions, but we will now need to take into account role inclusions when handling role cardinality queries. In particular, role
inclusions allow for a class BT of what we call bipotent roles, i.e., subroles of both S and S− (formally: positive roles U such
that T |= U (cid:118) S and T |= U (cid:118) S−). On the other hand, the class NT of positive roles not being a subrole of S nor a subrole
of S− are called nilpotent (formally: positive roles U such that T (cid:54)|= U (cid:118) S and T (cid:54)|= U (cid:118) S−).

Recall that our previous notion of type aimed to characterize individuals based on their ability to receive some roles (is there
a negative concept preventing my anonymous element to merge with this individual?) and to provide ABox matches on which
to fold (is there an ABox match on which to fold matches propagated by a given anonymous element?). This typing notion
needs to be modiﬁed for the setting we consider here. On the one hand, negative inclusions being disallowed, all individuals
are able to receive all roles. On the other hand, we must now distinguish ABox matches on which we can fold bipotent roles
from those on which we can only fold non-bipotent roles. We also extend our typing notion to nilpotent roles: their type being
a characterization of the subroles they propagate.

Deﬁnition 20 (Type of an individual, of a nilpotent role). Let A be an ABox and K := (T , A). The type θK(d) of an element
d ∈ Ind(A) over K is the set:

θK(d) :=

(cid:26)

R

(cid:12)
(cid:12)
(cid:12)
(cid:12)

R ∈ {{S, S−}, {S}, {S−}}
∃e ∈ ∆CK ∀R ∈ R, CK |= R(d, e)

(cid:27)

.

The type θK(R) of a nilpotent role R ∈ NT over K is the set:

θK(R) :=

(cid:26)

U

(cid:12)
(cid:12)
(cid:12)
(cid:12)

U ∈ {{S, S−}, {S}, {S−}}
∃V ∈ N±

R , ∀U ∈ U, T |= ∃R− (cid:118) ∃V ∧ T |= V (cid:118) U

(cid:27)

.

The set of possible types is Θ := {{{S, S−}, {S}, {S−}}, {{S}, {S−}}, {{S−}}, {{S}}, ∅}.
Following the line of the TC0 membership proofs for role cardinality queries, we are still interested in demanding elements.

In particular, bipotent roles might create a new kind of such elements: bidemanding elements, which are deﬁned as follows.
Deﬁnition 21 (Bidemanding elements). We distinguish bidemanding individuals D±

K and bidemanding roles D±
σ :

D±

K :=






a

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

a ∈ Ind(A)
{S, S−} ∈ θK(a)
∀b ∈ Ind(A), (K (cid:54)|= S(a, b)) ∨ (K (cid:54)|= S−(a, b))






D±

σ :=

(cid:26)

R

(cid:12)
(cid:12)
(cid:12)
(cid:12)

R ∈ genK
{S, S−} ∈ θK(R)

(cid:27)

Notice here the assumptions that bidemanding roles should be nilpotent and not only “non-bipotent” (which should feel more

natural in this case... but would provide a non-trivial propagation schema!).

We now redeﬁne for our setting the notions of positive / negative demanding individuals.

Deﬁnition 22 (Demanding individuals in a KB). Let A be an ABox and K := (T , A). Deﬁne positive demanding individuals
D+

K, resp. negative demanding individuals D−


a


a ∈ Ind(A)
a /∈ D±
K
{S} ∈ θK(a)
∀b ∈ Ind(A), K (cid:54)|= S(a, b)

K :=

K as:

D+

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)






D−

K :=






a

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

a ∈ Ind(A)
a /∈ D±
K
{S−} ∈ θK(a)
∀b ∈ Ind(A), K (cid:54)|= S−(a, b)






Strategies are no longer needed in our setting, as negative inclusions have been removed. Due to the adaptation of our notions
of types, a choice of well-typed elements is redeﬁned to now apply to types (of roles) instead of applying to the positive roles
themselves. This is simply because the absence of negative concept inclusions allows us to apply the same choice to all nilpotent
roles having the same type.
Deﬁnition 23 (Choice of well-typed element). Let A be an ABox and K := (T , A). A choice of well-typed elements for K is a
function choiceK : Θ → Ind(A) such that for each type t ∈ Θ, if there exists a nilpotent generated role R ∈ genK ∩ NT such
that θK(R) = t, then we have t ⊆ θK(choiceK(t)).

We now state our fundamental theorem, which proves that, if a choice of well-typed elements is available and in the absence
of demanding individuals, then the canonical model can fully fold on the individuals without creating any additional match.
This central property crucially relies on the absence of a non-trivial propagation schema.
Theorem 11 (Fitting model). Let A be an ABox and K := (T , A). If there is a choice choiceK of well-typed elements over
Ind(A) and if K admits no bidemanding individuals, then there exists a mapping χ : ∆CK → Ind(A) s.t the matches in the
resulting model χ(CK) are exactly the ABox matches.

Before starting with the proper proof, we need some additional deﬁnitions.
First, why do we start from a demanding individual free KB? We want to take advantage of the absence of non-trivial
propagation, in particular of violation of its Condition 2 (see Deﬁnition 11), which is involving roles generated by ∃S− (resp
∃S). Therefore, we somehow need these generated roles to be here as soon as possible: we need their causes, that are S-
assertions, in our initial ABox.

Speaking about causes, take a look at Condition 3 from Deﬁnition 11. Here is a handy deﬁnition to take advantage of the

cases in which this latter condition is broken.
Deﬁnition 24 (Cause of an element). Let wR be an anonymous element of ∆CK . A cause of wR is a positive concept such that:
if w ∈ Ind(A), then cause(wR) is either an atomic concept B such that K |= B(w) and T |= B (cid:118) ∃R, or a positive concept
∃T such that there exists some b with K |= T(w, b) and T |= ∃T (cid:118) ∃R. Otherwise w = w0T, then cause(wR) := ∃T−.

Following this line, here is a deﬁnition capturing the role provided by a violation of Condition 1 (again from Deﬁnition 11).
Deﬁnition 25 (Leader of an element). For an element w ∈ ∆CK , if there exists a positive role U such that wU ∈ ∆CK,
T |= U (cid:118) S and T |= U (cid:118) S−, then we pick such a role U and say it is the leader of the element w, denoted leader(w).

Our construction proceed by induction on CK, so here is the order we pick.

Deﬁnition 26 (Order on CK). We pick an order ≤ on ∆CK such that: ≤ is breadth-ﬁrst and for all w ∈ CK, if leader(w) is
deﬁned, then ∀R, wR ∈ ∆CK ⇒ w · leader(w) ≤ wR.

We are now all setup for the main construction. Here is some intuition before this two-page long deﬁnition. Recall we explore
the canonical model, especially anonymous elements being words ending by a particular positive role. Whenever we encounter
a nilpotent role, we send it on its choice, because if ever it propagates some non-nilpotent roles, then the choice of well-typed
elements ensures there are some further pre-existing matches on which to fold. Otherwise (and that is a big otherwise), if we
previously encountered a bipotent role or a bidirectionnal match (that is a pair of element (a, b) such that both (a, b) and (b, a)
are pre-existing matches), then it is costless to reuse it (protip: that’s what the “ﬂag” is for!). Otherwise, we look for such a
bidirectionnal match around which would solve all further problems. If none, then the role you are encountering surely isn’t
bipotent: a nilpotent role propagating a bipotent role could not have let you end up on an element without a bidirectionnal match
around (it would contradict the deﬁnition of a choice of well-typed element!), and non-nilpotent nor bipotent roles propagating
a bipotent role could not have either (it would violate the absence of non-trivial propagation!). Therefore, at this point, the
role you are encountering is either a subrole of S or of S−, but not both. In both cases, you are ensured to ﬁnd a pre-existing
match on which to fold (otherwise it would again violate either the choice of well-typed elements of the absence of non-trivial
propagation).

Here is the more formal approach. Various properties are carried along the construction. Property 1 ensures nilpotent roles
behave as expected. Properties 2+ and 2− ensures we stay within the ABox matches. Property 3 ensures the ﬂag is used
as expected. Property 4 ensures violations of Conditions 1 and 2 are being used. Property 5+ and 5− ensure violations of
Condition 3 are being used.

Proof. By induction on (∆CK , ≤), we build two mappings ﬂag : ∆CK → {0, 1} and χ : ∆CK → Ind(A) and ensure alongside
that any element e ∈ ∆CK satisﬁes the following properties:

1. If e = wR ∈ ∆CK with R nilpotent, then χ(wR) = choiceK(θK(R)).

2+. If e = wR ∈ ∆CK and T |= R (cid:118) S, then K |= S(χ(w), χ(wR)).
2−. If e = wR ∈ ∆CK and T |= R (cid:118) S−, then K |= S(χ(wR), χ(w)).

3. If e = wR ∈ ∆CK and ﬂag(wR), then K |= S(χ(w), χ(wR)) and K |= S(χ(wR), χ(w)).
4. If e = wR ∈ ∆CK with R non-nilpotent and leader(w) is deﬁned, then ﬂag(wR) and χ(wR) = χ(w · leader(w)).

5+. If e = wR1 ∈ ∆CK with T |= R1 (cid:118) S and ¬ﬂag(wR1) and cause(wR1) = ∃T with T |= T (cid:118) S and such that there

exists wR1R2 ∈ ∆CK with T |= R2 (cid:118) S, then K |= T(χ(w), χ(wR1)) or w = w(cid:48)T− and χ(w(cid:48)T−R1) = χ(w(cid:48)).

5−. If e = wR1 ∈ ∆CK with T |= R1 (cid:118) S− and ¬ﬂag(wR1) and cause(wR1) = ∃T with T |= T (cid:118) S− and such that there
exists wR1R2 ∈ ∆CK with T |= R2 (cid:118) S−, then K |= T(χ(w), χ(wR1)) or w = w(cid:48)T− and χ(w(cid:48)T−R1) = χ(w(cid:48)).

Initialization: Individuals. For all a ∈ Ind(A), we set χ(a) := a and ﬂag(a) := 0. All properties are trivially satisﬁed on

individuals.

Induction: Anonymous elements. Let wR ∈ ∆CK. Assume all properties hold for e < wR.
• If R is nilpotent, then we set χ(wR) := choiceK(θK(R)) and ﬂag(wR) := 0. Property 1 is satisﬁed and all other properties

trivially hold.

• Else if leader(w) is deﬁned and w · leader(w) < wR, then χ(w · leader(w)) is already deﬁned, and we set χ(wR) :=
χ(w · leader(w)) and ﬂag(wR) := 1. By induction hypothesis, properties hold for w · leader(w) and all transfer to wR,
but Property 4. By deﬁnition however, Property 4 also holds for wR.

• Else if ﬂag(w), then w must have shape w = w0R0 (recall the initialization sets the ﬂag of all individuals to 0). We set
χ(wR) := χ(w0) and ﬂag(wR) := 1. Property 1, 5+ and 5− trivially hold for wR. By induction hypothesis on w0R0,
Property 3 for w0R0 ensures that Properties 2+, 2− and 3 continue to hold for wR. Property 4 for wR is only relevant if
leader(w) = R, in which case it trivially holds.

• Else if there exists an individual name b such that K |= S(χ(w), b)∧S(b, χ(w)), then we set χ(wR) := b and ﬂag(wR) :=
1. Therefore Property 2+, 2−, 3 hold for wR. Property 1, 5+ and 5− trivially hold for wR. Again, Property 4 for wR is
only relevant if leader(w) = R, in which case it trivially holds.

• Else if R is bipotent, that is T |= R (cid:118) S and T |= R (cid:118) S−. We distinguish several subcases, each leading to a

contradiction.

– If w ∈ Ind(A), then w ∈ D±

K. Contradicts the absence of bidemanding individuals.

– If w = w0R0 with R0 nilpotent. By induction assumption and Property 1 and the deﬁnition of choiceK, θK(χ(w)) =

{{S, S(cid:48)}, {S}, {S(cid:48)}}. This is a contradiction with not being in the previous case.

– Otherwise w = w0R0, then leader(w0) is not deﬁned as Property 4 from induction hypothesis on w0R0 would then
contradicts ﬂag(w) being false. In particular R0 cannot be bipotent. Hence either T |= R0 (cid:118) S or T |= R0 (cid:118) S−,
but not both. Both cases being symmetrical, we now focus on T |= R0 (cid:118) S. For the triple (cause(w0), R0, R), we
have a propagation of S. As there are no non-trivial propagation of S, there must be an interference (Deﬁnition 11).
Note that there cannot be an interference of the ﬁrst type. Indeed, if U were such an interference, then ﬂag(w) would
be set, which we excluded in a previous case. Hence an interference should be of one of the other types:
* If it is of type 2, then we have a bipotent U generated by ∃S−. Property 2+ from induction hypothesis gives
K |= S(χ(w0), χ(w)). Hence K |= ∃z U(χ(w), z). As U is bipotent and χ(w) cannot be a bidemanding element,
there exists an individual b such that K |= S(χ(w), b) and K |= S−(χ(w), b), which we excluded in a previous
case.

* If it is of type 3, then cause(w0R0) = ∃T with ∃T− generating a bipotent role. Property 5+ by induction
hypothesis on w0R0 provides either K |= T(χ(w0), χ(w0R0)) or w0 = w(cid:48)
If
K |= T(χ(w0), χ(w0R0)), since χ(w) cannot be a bidemanding element, there exists an individual b such that
0T−
K |= S(χ(w), b) and K |= S−(χ(w), b), which we excluded in a previous case. Otherwise w0 = w(cid:48)
and χ(w) = χ(w(cid:48)
0T−). Properties 2+ and 2− from induction hypothesis on w ensure K |= S(χ(w), b) and
S−(χ(w0), χ(w)), which leads to the same excluded case.

0T− and χ(w) = χ(w(cid:48)

0T−).

• Otherwise either T |= R (cid:118) S or T |= R (cid:118) S− (but not both, as we already dealt with bipotent R). These two cases are

symmetrical, we focus on T |= R (cid:118) S. We investigate the various possibilities for w and cause(wR):

– If cause(wR) = ∃T with T |= T (cid:118) S and w = w0T−, then we set χ(wR) := χ(w0) and ﬂag(wR) := 0. In
particular, Property 5+ is satisﬁed. Property 2+ from induction hypothesis on w gives Property 2+ for wR. Other
properties trivially hold.

– Else if cause(wR) = ∃T with T |= T (cid:118) S and w ∈ Ind(A), then there exists b ∈ Ind(A) such that K |= T(w, b),
and we set χ(wR) := b and ﬂag(wR) := 0. In particular, Property 2+ and Property 5+ are satisﬁed. Other properties
trivially hold.

– Else if cause(wR) = ∃T with T |= T (cid:118) S− and w = w0T−, from all the preceding tests, (cause(w0), T−, R)
provides a propagation of S. As there are no non-trivial propagation, there must be an interference. It cannot be of
the ﬁrst type (otherwise ﬂag(w) would be set), hence it must be of type 2 or 3:
* If it is of type 2, then we have a role U generated by ∃S− and with T |= U (cid:118) S. Property 2+ from induction
hypothesis gives K |= S(χ(w0), χ(w)). Since K does not contain any positive demanding individuals, there exists
an individual b such that K |= U(χ(w), b), and we set χ(wR) := b and ﬂag(wR) := 0.

* If it is of type 3, then we set χ(wR) := χ(w0) and ﬂag(wR) = 0. Applying Property 5+ by induction hypothesis

on w0R0 provides the desired properties.

– Else if w ∈ Ind(A), then, since there are no demanding individuals, there exists b ∈ Ind(A) such that K |=

S(χ(w), b), then set χ(wR) = b and ﬂag(χ(wR) = 0. In particular, Properties 2+ and 5+ hold.

– Otherwise cause(wR) = ∃T with T nilpotent, then by Property 1 of induction hypothesis applied on w we have
χ(w) = choiceK(θK(T )). By deﬁnition of the choice of well-typed elements, there exists b ∈ Ind(A) such that
K |= S(χ(w), b), and we set χ(wR) = b and ﬂag(χ(wR) = 0.

With this key-result in hand, we can now notice that, in the absence of bidemanding individuals, our problem is easy to decide:
within TC0. Indeed, without bidemanding individuals, the best way to combine positive and negative demanding individual is
still to pair them 1-to-1. Therefore, the optimal amount of matches can easily be decided by counting such elements.
Lemma 12. Let A be an ABox and K := (T , A). If K admits no bidemanding individuals, then the minimal amount of matches
can be decided within TC0.

Proof. Assume K does not admit any bidemanding individuals. Set a classic pairing p := (p+, p−) for positive and negative
demanding individuals. We distinguish several cases, but the proof idea is always the same: in each case we exhibit the optimal
amount of matches that can be easily computed from the types of individuals. We then prove it is minimal and exhibit a model
with this precise amount of matches using Theorem 11 on ABox A∗ and some choiceK∗ that will be speciﬁed in each case:
(cid:12)
(cid:12)
(cid:12)
(cid:12)
The redundant arguments to prove minimality are the following mappings, always deﬁned and injective, I being a model of K:

A∗ := A ∪ {S(x, y) | p+(x) = y} ∪

x ∈ D−
K
x /∈ dom(p−)

x ∈ D+
K
x /∈ dom(p+)

S(x, x)

S(x, x)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:27)

(cid:26)

(cid:27)

(cid:26)

∪

ρ+ : D+

K → ∆I × ∆I
x (cid:55)→ (x, succI

S (x))

ρ− : D−

K → ∆I × ∆I
x (cid:55)→ (succI

S− (x), x)

1. If there exists an individual a such that {S, S−} ∈ θK(a). Optimum is mA + max((cid:12)
not admit demanding elements, and we choose, for all t ∈ Θ, and choiceK∗ (t) := a.

(cid:12)D+
K

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)
(cid:12)) reached with A∗. A∗ does

2. Else if (cid:12)

(cid:12)D+
K

(cid:12) > (cid:12)
(cid:12)

(cid:12)D−
K

(cid:12). Optimum is mA + max((cid:12)
(cid:12)

(cid:12)D+
K

setting ∀t ∈ Θ, choiceK∗ (t) ∈ D+

K \ dom(p+).

3. Else if (cid:12)

(cid:12)D+
K

(cid:12) < (cid:12)
(cid:12)

(cid:12)D−
K

(cid:12). Optimum is mA + max((cid:12)
(cid:12)

(cid:12)D+
K

setting ∀t ∈ Θ, choiceK∗ (t) ∈ D−

K \ dom(p−).

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)
(cid:12)) reached with A∗ not admitting demanding elements and

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)
(cid:12)) reached with A∗ not admitting demanding elements and

4. Else if there exists an individual a ∈ D+

(cid:12), (cid:12)
(cid:12)
(cid:12)
(cid:12)D−
K ∩ D−
(cid:12)) reached with A∗ not admitting
K
demanding elements, assuming w.l.o.g p+(a) = a, and setting ∀t ∈ Θ, choiceK∗ (t) := a.
K such that K |= S(b, a). Optimum is mA + max((cid:12)

(cid:12), (cid:12)
(cid:12)
(cid:12)
(cid:12)D−
(cid:12)) reached with A∗ not
K
admitting demanding elements, assuming w.l.o.g p+(a) = b, and setting ∀t ∈ Θ, choiceK∗ (t) := a.

K. Optimum is mA + max((cid:12)

5. Else if there exists (a, b) ∈ D+

K × D−

(cid:12)D+
K

(cid:12)D+
K

(cid:12)D+
K

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

6. Else if there exists a role R ∈ NT ∩ genK such that {S, S−} ∈ θK(R). Let V be a bipotent role generated by R−.
Optimum is mA + max((cid:12)
(cid:12)
(cid:12)) + 1 reached with A∗ ∪ {S(⊥, ⊥)} not admitting demanding elements and setting
∀t ∈ Θ, choiceK∗ (t) := ⊥. To ensure this amount of matches is still a lower bound for the amount of matches in any
model I, we need to specify where the extra match can be found in any model I of K. Consider f : CK → I a homo-
morphism. Because of all the excluded previous cases, it can be veriﬁed that either (f (reprK(R)), succI
V(f (reprK(R))))
or (succI
V(f (reprK(R))), f (reprK(R))) is an additional match in I (in particular, not already counted by one’s favorite
mapping ρ+ or ρ−).

7. Else if there exists an individual a such that {S}, {S−} ∈ θK(a). Optimum is mA + max((cid:12)

(cid:12)D+
K

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)
(cid:12)) reached with A∗

not admitting demanding elements and setting ∀t ∈ Θ, choiceK∗ (t) := a.

8. Else if there exists a role R ∈ NT ∩ genK and {S}, {S−} ∈ θK(R). Optimum is mA + max((cid:12)

(cid:12)
(cid:12)) + 1 reached
with A∗ ∪ {S(⊥, ⊥)} not admitting demanding elements and ∀t ∈ Θ, choiceK∗ (t) := ⊥. Again, we need to specify where
the extra match can be found in any model I of K. Consider f : CK → I a homomorphism. It can be veriﬁed that either
(f (reprK(R)), succI
S− (f (reprK(R))), f (reprK(R))) is an additional match in I (in particular,
not already counted by one’s favorite mapping ρ+ or ρ−).

S (f (reprK(R)))) or (succI

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)D+
K

9. Else if there exists an individual a such that {S} ∈ θK(a). Optimum is mA + max((cid:12)

(cid:12)
(cid:12)) reached with A∗ not
admitting demanding elements and choiceK({S}) := a and choiceK({S−}) := b with b the other endpoint (either certain
or from pairing).

(cid:12), (cid:12)
(cid:12)
(cid:12)D−
K

(cid:12)D+
K

10. Else if there exists a role R ∈ NT ∩ genK and either {S} ∈ θK(R) or {S−} ∈ θK(R). Optimum is mA + 1 reached with
A∗ ∪ {S(⊥, ⊥)} not admitting demanding elements and setting ∀t ∈ Θ, choiceK∗ (t) := ⊥. Again, we need to specify
where the extra match can be found in any model I of K. Consider f : CK → I a homomorphism. It can be veriﬁed
that either (f (reprK(R)), succI
S−(f (reprK(R))), f (reprK(R))) is an additional match in I (in
particular, not already counted by one’s favorite mapping ρ+ or ρ−).

S (f (reprK(R)))) or (succI

11. Otherwise. Optimum is mA with A not admitting demanding elements and setting ∀t ∈ Θ, choiceK∗ (t) := ⊥.
To conclude the TC0 membership proof, we describe the slight changes required to adapt the circuits already provided for the
role cardinality queries:

• In the block “A closer look at roles and concepts over the input”, one should extend the inputs to all subroles of R.

• The typing block should be adapted to ﬁt the new typing notion (see Deﬁnition 20).
• All the blocks, each dedicated to a single strategy, can now be united as a single block computing (cid:12)
• From this previous step, the typing block and the generated roles block, deciding if Situation 6, 8 or 10 occurs is easy, in

(cid:12)
(cid:12) and (cid:12)

(cid:12)D−
K

(cid:12)D+
K

(cid:12)
(cid:12).

which case one should add 1 to the ﬁnal amount of matches.

We can now prove the desired reduction from our problem to MAXIMUM MATCHING.

Proof of the reduction. Let A be an ABox and K := (T , A).

If K does not admit bidemanding individuals, then Lemma 12 ensures we can actually compute the answer within TC0, in

particular within L, and create a trivial instance of MAXIMUM MATCHING co-equivalent to it.
Otherwise, there are some bidemanding individuals. Consider then the following graph GK:

V := (D+

K × {1}) ∪ (D−

K × {−1}) ∪ D±

K

E

:= {{(x, 1), (y, −1)} | (x, y) ∈ D+

K × D−
K}
(cid:27)

K × D+

K

K × D−

K

(cid:27)

(x, y) ∈ D±
K |= S(x, y)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ D±
K |= S−(x, y)
K × D±

K

(cid:27)

(cid:26)

∪

{x, (y, 1)}

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:26)

∪

{x, (y, −1)}

(cid:26)

∪

{x, y}

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ D±
K |= S(x, y)

Claim:

[k, +∞] is a certain answer for qS w.r.t. K ⇔ (G, mA + |V| − k + 1) /∈ MAXIMUM MATCHING

Notice the graph G and the integer mA + |V| − k + 1 are easily computable within L.

(⇐). Assume (G, mA + |V| − k + 1) /∈ MAXIMUM MATCHING. Consider a model I of K and a homomorphism f :
CK → I. For each demanding individual x, we denote Rx a role causing this element to be demanding (that is, a bipotent role
for bidemanding elements, a subrole of S for positive demanding elements, a subrole of S− for negative demanding elements
such that xRx ∈ ∆CK ). Consider the following matching, induced by I:
K × D−

:= {{(x, 1), (y, −1)} | (x, y) ∈ D+

MI

(cid:26)

∪

{x, (y, 1)}

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:26)

∪

{x, (y, −1)}

K × D+

K

(x, y) ∈ D±
K |= S(x, y)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ D±
K |= S−(x, y)
K × D±

K

K, f (xRx) = y ∧ x = f (yRy)}
(cid:27)

, f (xRx) = y ∧ x = f (yRy)

K × D−

K

, f (xRx) = y ∧ x = f (yRy)

(cid:27)

(cid:26)

∪

{x, y}

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ D±
K |= S(x, y)

, f (xRx) = y ∧ x = f (yRy)

(cid:27)

Being a matching, |MI| < mA + |V| − k + 1. Each edge from MI provides exactly one additional match: either through
the pairing of a positive with a negative, or through the pairing of a bidemanding with another demanding given that one match
was already present in between. Each non-covered vertex provides one additional match, being (x, succI
(x)) for positive
Rx
demanding uncovered elements, (succI
(y), y) for negative demanding uncovered elements, and at least one of the latter two
Ry
In addition with ABox matches, all these matches are distinct, hence there are at least
shapes for bidemanding elements.
mA + |MI| + |V| − 2|MI| = mA + |V| − MI > k − 1 matches in I. That is at least k matches.

(⇒). Assume (G, mA+|V|−k+1) ∈ MAXIMUM MATCHING. Consider a matching M ⊆ E with |M | ≥ mA+|V|−k+1.

Consider the enriched ABox AM :

AM := A

∪

(cid:26)

S(x, y)

∪ {S(x, y) | (x, y) ∈ D+
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(x, y) ∈ D±
K |= S(x, y)
(x, y) ∈ D±
K |= S(y, x)
(x, y) ∈ D±
K |= S(y, x)

S(x, y)

S(x, y)

(cid:26)

(cid:26)

∪

∪

K × D−
K × D+

K

K × D−

K

K × D±

K

K, {(x, 1), (y, −1)} ∈ M }

(cid:27)

{x, (y, 1)} ∈ M

, {x, (y, −1)} ∈ M

(cid:27)

(cid:27)

, {x, y} ∈ M

(“Shape” 0: ABox matches)

(Shape 2: Pairing pos-neg)

(Shape 3+: Pairing bi-pos)

(Shape 3−: Pairing bi-neg)

(Shape 4: Pairing bi-bi)

∪ {S(x, x) | x ∈ V, x uncovered by M }

(Shape 5: Unpaired)

Notice KM := (T , AM ) does not admit any demanding individuals. Since there exists at least one bidemanding individual a
for K, setting choiceK(∗) := a provides a well-typed choice of elements for both K and KM . Applying Theorem 11 provides
a model of KM , hence of K, in which the matches are exactly: mA ABox matches (Shape 0), |M | matches from shapes 2, 3+,
3−, and 4, and |V| − 2|M | for uncovered by M elements of V (Shape 5). Hence a total of exactly: mA + |V| − |M | matches.
Recall |M | ≥ mA + |V| − k + 1, hence that is at most k − 1 matches, that is less than k, hence this model is a countermodel
for k.

B.4 Proof of TC0 membership.
We now prove that if a TBox T does not admit a non-trivial propagation of S or S−, and does not admit a non-trivial pairing,
then OMQA(qS, T ) is in TC0.

Notice that if T satisﬁes T (cid:54)|= S (cid:118) S−, then for any ABox A, K = (T , A) does not admit bidemanding individuals. Indeed,
the existence of a bidemanding individual a implies the existence of B and R such that B(a) ∈ A, T |= B (cid:118) ∃R, T |= R (cid:118) S
and T |= R (cid:118) S−. If B is a concept name, this is non-trivial pairing. If B = ∃T, then to prevent a non-trivial pair, T |= T (cid:118) S
and T |= T (cid:118) S−, which would prevent a from being bidemanding. In that case, Lemma 12 holds and solves the problem.

Otherwise T |= S (cid:118) S−, in which case the only possible demanding individuals are bidemanding individuals (which
disallows Shapes 2, 3+ and 3− from the proof just above) not touching any pre-existing match as T |= S (cid:118) S− (which also
disallows Shape 4). In particular the easiest way to minimize the amount of matches is simply by introducing a self-S-loop on
(cid:12)
each bidemanding individual, and the optimal amount of matches is therefore mA + (cid:12)
(cid:12) = 0
and there exists a generated bipotent role R, in which case it is exactly 1. This is easily shown through the following injective
mapping, providing at least (cid:12)

(cid:12) in general except if mA = (cid:12)
(cid:12)

(cid:12)
(cid:12) non-ABox matches in any model I:

(cid:12)D±
K

(cid:12)D±
K

(cid:12)D±
K

ρ± : D±

K → ∆I × ∆I
x (cid:55)→ (x, succI

S (x))

Furthermore, in the exception stated above the single match is found in any model I by considering where the representative
reprK(R) = wR ∈ ∆CK maps in I through a homomorphism f : CK → I. It gives a match (f (w), f (wR)), or alternatively
(f (wR), f (w)) as R is bipotent (but if the model I is optimal enough, these two are the same match!). Notice that again, with
slight adaptations of the circuits, this is still easily computable within TC0, the threshold gates being here essential to count the
amount of bidemanding individuals.

C Proofs for Section 5.
C.1 Proof of Theorem 3.
Proof. Consider the ABox:

A = {B(u) | u ∈ U} ∪ {S(u, s∗) | u ∈ s ∈ S} ∪ {C(s) | s ∈ S} ∪ {S(s, s∗) | s ∈ S}

and set K = (T , A). Notice there are |S| + (cid:80)

s∈S |s| ABox matches. We claim:

[|S| +

(cid:88)

s∈S

|s| + k + 1, +∞] is a certain answer of qS w.r.t. K ⇐⇒ (U, S, k) /∈ SET COVER

(⇒). Assume (U, S, k) ∈ SET COVER. Consider a covering F ⊆ S of U with |F | ≤ k. Consider the interpretation
obtained from K in which we add, for each u ∈ s ∈ F the fact U(u, s∗) and V(s, s), which provide k additional matches from
S(s, s). For the remaining s ∈ S, we can add the fact V(s, s∗), which does not provide an additional match. We obtain a model
IF , with exactly |S| + (cid:80)

s∈S |s| + k matches, being a countermodel.

(⇐). Assume (U, S, k) /∈ SET COVER. Consider a model I of K and a homomorphism f : CK → I. For each u ∈ U, we
associate a subset ρ(u) = s if f (uU) = s∗ and u ∈ s ∈ S, otherwise set ρ(u) = su, where su is an arbitrary set containing u.
The image ρ(U) is a covering of U, hence |ρ(U)| ≥ k + 1. By deﬁnition, for each s ∈ ρ(U) there exists u ∈ S such that: either
f (uU) = s∗, or f (uU) (cid:54)= ˆs∗ for all ˆs such that u ∈ ˆs ∈ S. In the ﬁrst case, (s, f (sV)) must be a new match as f (sV) cannot be
s∗. In the second case (u, f (uU)) is a new match. Therefore there are at least |S| + (cid:80)

s∈S |s| + k + 1 matches in I.

C.2 Proof of Theorem 4.
Proof. Consider the ABox:

A = {B(u) | u ∈ U} ∪ {S(u, s) | u ∈ s ∈ S} ∪ {W(s, u) | u ∈ s ∈ S}

and set K = (T , A). Notice there are (cid:80)

s∈S |s| ABox matches. We claim:

(cid:88)

[
s∈S

|s| + k + 1, +∞] is a certain answer of qS w.r.t. K ⇐⇒ (U, S, k) /∈ SET COVER

(⇒). Assume (U, S, k) ∈ SET COVER. Consider a covering F ⊆ S of U with |F | ≤ k. Consider the interpretation
obtained from K in which we add, for each u ∈ s ∈ F the fact U(u, s) and V(s, s), which provide k additional matches from
S(s, s). We obtain a model IF , with exactly (cid:80)

s∈S |s| + k matches, being a countermodel.

(⇐). Assume (U, S, k) /∈ SET COVER. Consider a model I of K and a homomorphism f : CK → I. For each u ∈ U, we
associate a subset ρ(u) = s if f (uU) = s and u ∈ s ∈ S, otherwise set ρ(u) = su, where su is an arbitrary set containing u.
The image ρ(U) is a covering of U, hence |ρ(U)| ≥ k + 1. By deﬁnition, for each s ∈ ρ(U) there exists u ∈ S such that: either
f (uU) = s, or f (uU) (cid:54)= ˆs∗ for all ˆs such that u ∈ ˆs ∈ S. In the ﬁrst case, (f (uUV), f (uU)) must be a new match as f (uUV)
cannot be any v with v ∈ U (roles W prevent it!). In the second case (u, f (uU)) is a new match. Therefore there are at least
(cid:80)

s∈S |s| + k + 1 matches in I.

C.3 Proof of Theorem 5.

Proof. Given a 3DNF formula φ(x1, . . . xm) =

n
(cid:95)

i=1

li, with li =

3
(cid:94)

j=1

(¬)pi,j vi,j. Introduce the following individual names:

Consider now the ABox given by:

Indφ = {x1, . . . xm, l1, . . . ln, t1, . . . tm, f1, . . . fm}

Aφ = {A(x1), . . . A(xm), B(l1), . . . B(ln), C(t1), . . . C(tm), C(f1), . . . C(fm)}

∪ {U(cid:48)(xk, a) | k ∈ {1, . . . m}, a ∈ Indφ \ {tk, fk}}

∪

V(cid:48)(li, a)

i ∈ {1, . . . n}, a ∈ Indφ \

ti

(cid:26)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:26)

(cid:12)
(cid:12)
(cid:12)
(cid:12)

vi,j = xi
pi,j = 0

(cid:27)

(cid:26)

∪

fi

(cid:12)
(cid:12)
(cid:12)
(cid:12)

vi,j = xi
pi,j = 1

(cid:27)(cid:27)

Set Kφ = (T , Aφ). Notice there are 2m ABoxes matches: t1 . . . tm and f1, . . . fm. We claim:

[2m + 1, +∞] is a certain answer of qC w.r.t. Kφ ⇔ ∀x φ(x)

(⇐). Assume ∀x φ(x). Let I be a model of Kφ and f : CKφ → I a homomorphism. If there exists a k ∈ {1, . . . m} such
that f (xkU) /∈ {tk, fk}, then f (xkU) is an anonymous element, since U(cid:48) prevents f (xkU) to be equal to other individuals. As
f (xkU) ∈ CI, it provides a new match. Otherwise, deﬁne the assignment induced by I as ρI(x) = 1 if f (xkU) = tk, and
ρI(x) = 0 if f (xkU) = fk. Since ∀x φ(x), there exists a satisﬁed clause li. For this i, the element f (liV) cannot be equal to
any individual (as V(cid:48) and ∃U− prevent it), and therefore provides a new match for qC. In all cases [2m + 1, +∞] is a certain
answer of qC w.r.t. Kφ.

(⇒). Assume ∃x ¬φ(x). Consider such a valuation ρ : x → {0, 1} such that ¬φ(ρ(x)). For each clause li, there exists
(at least) a variable xki which invalidates li. Consider the interpretation Iρ obtained from Kφ in which we add facts U(xk, tk)
iff ρ(xk) = 1, resp U(xk, fk) iff ρ(xk) = 0, and V(li, tki) if ρ(xki) = 0, resp V(li, fki) if ρ(xki) = 1. By deﬁnition of variables
xki, we are ensured this interpretation Iρ is a model. It only has 2m matches, hence [2m + 1, +∞] is not a certain of qC
w.r.t. Kφ.

C.4 Proof of Theorem 6.
For the two L lower bounds, we proceed by reduction from the Undirected Forest Accessibility problem, known to be L-
complete [Cook and McKenzie, 1987].

Input
Output

Undirected Forest Accessibility (UFA)
Undirected acyclic graph (V, E) with two components, vertices s, t ∈ V
Is t reachable from s ?

Proof. We start with L membership. Let us ﬁrst describe how to compute, given an ABox A, the minimal number of matches
of qS. Intuitively, whenever an outgoing R(v, v(cid:48)) is required (by the presence of B(v)) but not already provided in the ABox,
one aims at adding R(v, v(cid:48)) in such a way that S(v, v(cid:48)) is already present in the ABox. This is always possible, except for two
cases: (i) there are no outgoing S from v, or (ii) all the S(v, v(cid:48)) are such that B(v(cid:48)) holds and S(v(cid:48), v) holds as well.

In case (i), a new atom of the shape S(v, v(cid:48)) has to be added, creating a new match. In the second case, since R (cid:118) ¬R−,
one could create an inconsistency if the choice were to be done in a local fashion. Let us study how to perform optimally these
choices.

We call exit point an individual v such that one of the three following conditions holds:
• B(v) (cid:54)∈ A;
• ∃v(cid:48) R(v, v(cid:48)) ∈ A;
• ∃v(cid:48) S(v, v(cid:48)) ∈ A and either B(v(cid:48)) (cid:54)∈ A or K (cid:54)|= S(v(cid:48), v).

Intuitively, an exit point either already satisﬁes the concept inclusion B (cid:118) ∃R (the ﬁrst two conditions) or can satisfy it in a
globally optimal way by adding R(v, v(cid:48)) (in the third case, if a model minimizing the number of matches contains R(v(cid:48), v) and
S(v(cid:48), v), one can get another minimal mode by adding S(v(cid:48), v∗) and S(v(cid:48), v∗)), where v∗ is a fresh element).

Let us thus consider the tradeoff graph of A having as vertices the individuals of A and an edge between u and v if it holds
that S(u, v), S(v, u), B(u), B(v) ∈ A, and R(u, v), R(v, u) (cid:54)∈ A. This graph may contain several connected components, which
can be of several types:

a. the connected component contains a cycle: there exists a consistent way to add R atoms wherever necessary in such a way

that all the new R atoms fold on S atoms present in A;

b. the connected component contains an exit point: similarly, add R atoms wherever necessary in such a way that all the new

R atoms fold on S atoms present in A;

c. the connected component is a tree and does not contain an exit point: an atom R(v, x) for which S(v, x) (cid:54)∈ A has to
be added. v can be chose arbitrarily among the vertices of the connected component, and x can be chosen to be a fresh
element.

Thus, the minimal number of matches is the number of pairs (v, v(cid:48)) such that either R(v, v(cid:48)) or S(v, v(cid:48)) holds, plus the
number of connected components of type c. in the previous case distinction. Algorithm 1 computes this minimum number of
matches, and compare it to the number provided in input. Let us notice that checking for the existence of a cycle in a connected
component can be done by making calls to an oracle for reachability in undirected graphs.

Algorithm 1 runs in logarithmic space, as undirected reachability is decidable in L, and L is low for itself. This proves

membership to L.

For the lower bound, let us reduce UFA to our problem. Let G = (V, E) be an undirected acyclic graph with two components

and let s, t ∈ V be two vertices. Consider the following ABox:

A = {B(u) | u ∈ V} ∪ {S(u, v) | {u, v} ∈ E} ∪ {S(s, v∗), S(t, v∗)} ∪ {R(s, v∗), R(t, v∗)},

Data: An ABox A, an integer n
Result: Yes if and only if [n, +∞] is a certain answer for qS w.r.t. (T , A)
m ← |{(v, v(cid:48)) | S(v, v(cid:48)) ∈ A ∨ R(v, v(cid:48)) ∈ A}|;
G ← tradeoff graph of A
for i ← 1 to n do

if no vj with j < i is reachable from vi in G then
if no exit point is reachable from vi in G then

if the connected component of vi in G does not contain a cycle then

m ← m + 1;

end

end

end
return Yes if n ≤ m, no otherwise

end

Algorithm 1: An algorithm for checking whether [n, +∞] is a certain answer for qS w.r.t. (T , A)

where v∗ is a fresh individual. Note that we have thus made both s and t exit points, and they are the only such individuals. Let
us notice that A is ﬁrst-order deﬁnable from G. We thus focus on the following claim:

((V, E), s, t) ∈ UFA ⇔ [2|E| + 3, +∞] is a certain answer for qS w.r.t. (T , A)

Let us ﬁrst notice that in any model, there are 2|E| + 2 matches of qS, as there are that many matches from qS in A.
Let us consider the case where s is not reachable from t. As G has exactly two connected components, for any vertex v
(distinct from both s and t), there exists a unique vertex among {s, t} that is reachable from v and a unique S-edge S(v, f(v))
outgoing from v on the shortest path to s or t (depending on which connected component v belongs). Let us consider the
interpretation I = A ∪ {R(v, f(v))| v ∈ V \ {s, t}}. I is a model of T : for any v such that B(v) holds, there is an atom
R(v, v(cid:48)). Moreover, if v is on the shortest path from v(cid:48) to s (resp. to t), then v(cid:48) cannot be on the shortest path from v to s (resp.
to t), hence RI ∩ (R−)I = ∅. I is thus a model of A and T in which there are exactly 2|E| + 2 matches of qS, proving that if
((V, E), s, t) (cid:54)∈ UFA, then [2|E| + 3, +∞] is not a certain answer of qS w.r.t. (T , A).

Let us now consider the case where s is reachable from t. We already know that in any model of A and T , there are 2|E| + 2
matches of qS. We prove there must be another match of qS. We show that there must be some R(v, v(cid:48)) in any model such
that S(v, v(cid:48)) (cid:54)∈ A. Let v be in the connected component that contains neither s nor t. Let us consider a maximal (possibly
inﬁnite) sequence v1, v2, . . . , vn with v1 = v and such that for any i, R(vi, vi+1) belongs to I. As there are no cycle in G and
that R (cid:118) ¬R−, there exists i such that S(vi, vi+1) (cid:54)∈ A, which provides a new match for qS, which concludes the proof.

C.5 Proof of Theorem 6 for Concept Cardinality Queries.
Let us ﬁrst state our theorem in the case of concept cardinality queries.

Theorem 12 (L-complete situation for concept cardinality queries). For the following TBox:

T = { B (cid:118) ∃R, ∃R− (cid:118) C, R (cid:118) ¬R−, R (cid:118) ¬T }

the problem OMQA(qC, T ) is L-complete.

Proof. We start by proving L membership. Let us ﬁrst notice that the minimum number of matches can only be one of the two
following values:

• n = |{v | C(v) ∈ A ∨ ∃v(cid:48) R(v(cid:48), v) ∈ A}|, which is the number of matches in the ABox on which concept inclusions have

been applied;

• n + 1, which can be obtained by introducing a fresh element α, and adding R(v, α) for any v in Ind(A), as well C(α).
Let us consider a model I having n matches. Let f be a homomorphism from CK to I. Let v ∈ Ind(A) such that vR ∈ ∆CK.
Then:

• f (vR) ∈ Ind(A) (otherwise, a new match would be created);
• C(f (vR)) ∈ A or there is v(cid:48) s.t. R(v(cid:48), v) ∈ A (otherwise, a new match would be created);
• T(v, f (vR)) (cid:54)∈ A (otherwise I would not be a model)

• R(f (vR), v) (cid:54)∈ A (otherwise I would not be a model)
• if f (vR)R ∈ ∆CK , then f (f (vR)R) (cid:54)= v (otherwise I would not be a model).

All the conditions except the last one can be checked for each individual separately. We call exit point an individual v for
which either vR (cid:54)∈ ∆CK or there exists v(cid:48) such that by setting f (vR) = v(cid:48), the ﬁrst four conditions are satisﬁed, and the ﬁfth
one is satisﬁed by vacuity, i.e., v(cid:48)R (cid:54)∈ ∆CK .

Let us deﬁne the tradeoff graph G of A having as vertices the individuals of A and an edge {v, v(cid:48)} if and only if
{B(v), B(v(cid:48)), C(v), C(v(cid:48))} ∈ A and {T(v, v(cid:48)), T(v(cid:48), v), R(v, v(cid:48)), R(v(cid:48), v)} ∩ A = ∅. This is called a tradeoff graph because
if {v, v(cid:48)} is an edge, then we could either set f (vR) = v(cid:48) or f (v(cid:48)R) = v without creating new matches, but not both, as this
would violate the negative role inclusion R (cid:118) ¬R−.

We claim that there exists a model with exactly n matches if and only if in every connected component of G there is either
an exit point or a cycle. Indeed, notice that if {v, v(cid:48)} is an edge of the tradeoff graph, then adding an atom R(v, v(cid:48)) does not
increase the number of matches of qC. If there is an exit point v∗ in a connected component, there is a way to add an atom
R(v∗, ˆv) without adding a match and with ˆv not being in the same connected component as v∗ (by deﬁnition of the tradeoff
graph). Then, by a breadth ﬁrst traversal of the connected component, one can add R atoms as required. Similarly, when there
is a cycle, one starts by such a cycle, and add other atoms in a breadth ﬁrst fashion.

Conversely, if there exists a model with n matches, then f (vR) ∈ Ind(A) for any v such that aR is deﬁned. Let v1, . . . , vn, . . .
be a sequence such that f (viR) = vi+1 whenever viR ∈ ∆CK , and such that vi is the last element of the sequence otherwise. If
f (viR) is not an exit point, then there is an edge {vi, vi+1} in the tradeoff graph. If the sequence if ﬁnite, then the one before
the last is an exit point. Otherwise, there must be a cycle in the connected component containing v1.

Algorithm 2 checks this condition. As it amounts to several reachability checks in an undirected graph, this algorithm can be

made to run in L.

Data: An ABox A, an integer n
Result: Yes if and only if [n, +∞] is a certain answer of qC w.r.t. (T , A)
m ← |{(v) | R(v(cid:48), v) ∈ A ∨ C(v) ∈ A}|;
r ← m;
G ← tradeoff graph of A for i ← 1 to n do

if no vj with j < i is reachable from vi in G then
if no exit point is reachable from vi in G then

if the connected component of vi in G does not contain a cycle then

r ← m + 1; // r can take only two values

end

end

end
return Yes if n ≤ r, no otherwise

end

Algorithm 2: An algorithm for checking whether [n, +∞] is a certain answer of qC w.r.t (T , A)

To prove L-hardness, we again proceed by reduction from UFA. Consider the following ABox:

A = {B(u), C(u) | u ∈ V} ∪ {T(u, v) | {u, v} (cid:54)∈ E} ∪ {T(u, v∗), | u ∈ V \ {s, t}} ∪ {R(s, v∗), R(t, v∗)},

There are |V| + 1 matches of qC in A. We prove that:

((V, E), s, t) ∈ UFA ⇐⇒ [|V| + 2, +∞] is a certain answer of qC w.r.t. (T , A).

Let us consider the case where s is not reachable from t. As (V, E) has exactly two connected components, for any vertex v
(distinct from both s and t), there exists a unique vertex among {s, t} that is reachable from v and a unique vertex f (v) that is
on the shortest path from v to s (or t). Let us consider the interpretation I = A ∪ {R(v, f(v)) | v ∈ V \ {s, t}}. I is a model of
T : for any v such that B(v) holds, there is an atom R(v, v(cid:48)). Moreover, if v is on the shortest path from v(cid:48) to s, then v(cid:48) cannot
be on the shortest path from v to s, hence RI ∩ (R−)I = ∅. Moreover, {v, f (v)} ∈ E, hence (v, f (v)) (cid:54)∈ TI. I is thus a model
of A and T in which there are exactly |V| + 1 matches of qC, proving that if ((V, E), s, t) (cid:54)∈ UFA, then [|V| + 2, +∞] (cid:54)∈ q(T ,A)
.
Let us now consider the case where s is reachable from t. We already know that in any model of A and T , there are at least
|V| + 1 matches of qC. As there are no cycle in the connected component not containing s and t, in any model of (A, T ) there
must be an individual v having an outgoing edge R(v, v(cid:48)) with {v, v(cid:48)} (cid:54)∈ E. As T(v, u) holds for any u such that {v, u} (cid:54)∈ E, as
well as for u = v∗, v(cid:48) provides a novel match for qC, concluding the proof.

C

