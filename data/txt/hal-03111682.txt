Continuity of functional transducers: a profinite study
of rational functions
Michaël Cadilhac, Olivier Carton, Charles Paperman

To cite this version:

Michaël Cadilhac, Olivier Carton, Charles Paperman. Continuity of functional transducers: a profi-
nite study of rational functions. Logical Methods in Computer Science, 2020, ￿10.23638/LMCS-
16(1:24)2020￿. ￿hal-03111682￿

HAL Id: hal-03111682

https://hal.science/hal-03111682

Submitted on 15 Jan 2021

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Logical Methods in Computer Science
Volume 16, Issue 1, 2020, pp. 24:1–24:29
https://lmcs.episciences.org/

Submitted Mar. 01, 2018
Feb. 21, 2020
Published

CONTINUITY OF FUNCTIONAL TRANSDUCERS:
A PROFINITE STUDY OF RATIONAL FUNCTIONS

MICHAËL CADILHAC a, OLIVIER CARTON b, AND CHARLES PAPERMAN c

a DePaul University

e-mail address: michael@cadilhac.name

b IRIF, Université Paris Diderot

e-mail address: olivier.carton@irif.fr

c Université de Lille

e-mail address: charles.paperman@univ-lille.fr

Abstract. A word-to-word function is continuous for a class of languages V if its inverse
maps V-languages to V. This notion provides a basis for an algebraic study of transducers,
and was integral to the characterization of the sequential transducers computable in some
circuit complexity classes.

Here, we report on the decidability of continuity for functional transducers and some
standard classes of regular languages. To this end, we develop a robust theory rooted in
the standard proﬁnite analysis of regular languages.

Since previous algebraic studies of transducers have focused on the sole structure of the
underlying input automaton, we also compare the two algebraic approaches. We focus on
two questions: When are the automaton structure and the continuity properties related,
and when does continuity propagate to superclasses?

1. Introduction

The algebraic theory of regular languages is tightly interwoven with fundamental questions
about the computing power of Boolean circuits and logics. The most famous of these braids
revolves around A, the class of aperiodic or counter-free languages. Not only is it expressed
using the logic FO[<], but it can be seen as the basic building block of AC0, the class of
languages recognized by circuit families of polynomial size and constant depth. This class is in
turn expressed by the logic FO[arb] (see [25] for a lovely account). This pervasive interaction
naturally suggests lifting this study to the functional level, hence to rational functions.
This was started in [5], where it was shown that a subsequential (i.e., input-deterministic)
transducer computes an AC0 function iﬀ it preserves the regular languages of AC0 by inverse
image. Buoyed by this clean, semantic characterization, we wish to further investigate this
latter property for diﬀerent classes: say that a function f : A∗ → B∗ is V-continuous, for
a class of languages V, if for every language L ⊆ B∗ of V, the language f −1(L) is also a

Key words and phrases: Transducers, rational functions, language varieties, continuity.
Extended version of the paper “Continuity and Rational Functions” appearing in Proceedings ICALP’17.

l IN COMPUTER SCIENCE

LOGICAL METHODS

DOI:10.23638/LMCS-16(1:24)2020

c(cid:13) M. Cadilhac, O. Carton, and C. Paperman
CC(cid:13) Creative Commons

24:2

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

language of V. Our main focus will be on deciding V-continuity for rational functions; before
listing our main results, we emphasize two additional motivations.

First, there has been some historical progression towards this goal. Noting, in [14], that
inverse rational functions provide a uniform and compelling view of a wealth of natural
operations on regular languages, Pin and Sakarovitch initiated in [15] a study of regular-
continuous functions. It was already known at the time, by a result of Choﬀrut (see [3,
Theorem 2.7]), that regular-continuity together with some uniform continuity property
characterize functions computed by subsequential transducers. This characterization was
instrumental in the study of Reutenauer and Schützenberger [20], who already noticed the
peculiar link between uniform continuity for some distances on words and continuity for
certain classes of languages. This link was tightened by Pin and Silva [16] who formalized a
topological approach and generalized it to rational relations. More recently [17], the same
authors made precise the link unveiled by Reutenauer and Schützenberger, and developed a
fascinating and robust framework in which language continuity has a topological interpretation
(see the beginning of Section 3, as we build upon this theory). Pin and Silva [18] notably
proposed thereafter a study of functions for which continuity for a class is propagated to
subclasses. In addition, Daviaud et al. [7, 6] recently explored continuity notions in the spirit
of Choﬀrut’s characterization to study weighted automata and cost-register automata.

Second, the interweaving between languages, circuits, and logic that was alluded to
previously can in fact be formally stated (see again [25, 26]). A central property towards
this formalization is the correspondence between “cascade products” of automata, stacking of
circuits, and nesting of formulas, respectively. Strikingly, these operations can all be seen as
inverse rational functions [26]. These operations are intrinsic in the construction of complex
objects: languages, circuits, and formulas are often given as a sequence of simple objects
to be composed (see, e.g., [24, Section 5.5]). We remark that a suﬃcient condition for the
result of the composition to be in some given class (of languages, circuits, or logic formulas),
is that each rational function be continuous for that class. Hence deciding continuity allows
to give a suﬃcient condition for this membership question without computing the result of
the composition, which is subject to combinatorial blowup.

Here, we report on three questions, the ﬁrst two relating continuity to the other main
algebraic approach to transducers, while allowing a more gentle introduction to the evaluation
of proﬁnite words by transducers:
• When does the transducer structure (i.e., its so-called transition monoid ) impact its
continuity? The results of Reutenauer and Schützenberger [20] can indeed be seen as the
starting point of two distinct algebraic theories for rational functions; on the one hand the
study of continuity, and on the other the study of the transition monoid of the transducer
(disregarding the output). This latter avenue was explored by [8]. We show in Section 4.1:

Theorem 1.1. Let V be a variety of languages among J , R, L, DA, A, COM, AB, Gnil,
Gsol, or G.
– The statement “Any rational function structurally in V is continuous for V” holds for

V ∈ {A, Gsol, G} and does not otherwise;

– The statement “Any rational function continuous for V is structurally in V” holds for

V ∈ {Gnil, Gsol, G} and does not otherwise.

• What is the impact of variety inclusion on the inclusion of the related classes of continuous
rational functions? When focusing on transducer structure alone, there is a natural
propagation to superclasses; when is it the case for continuity? We show in Section 4.2:

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:3

Theorem 1.2. Let V and W be two diﬀerent varieties of languages among J , R, L, DA,
A, COM, AB, Gnil, Gsol, or G. The statement “all rational functions continuous for V are
continuous for W” holds only when one of these properties is satisﬁed:
– V, W ∈ {Gnil, Gsol, G} and V ⊆ W;
– V = AB and W = COM;
– V = DA and W = A.

• When is V-continuity decidable for rational functions? We show in Section 5:

Theorem 1.3. Let V be a variety of languages among J , R, L, DA, A, COM, AB, Gsol, or
G. It is decidable, given an unambiguous rational transducer, whether it realizes a function
continuous for V.

This constitutes our main contribution; note that the case Gnil is left open.

Contents

Intermezzos

Introduction
1.
2. Preliminaries
3. Continuity: The proﬁnite approach
3.1. The Preservation Lemma: Continuity is equivalent to preserving equations
3.2. The proﬁnite extension of rational functions
3.3. The Syncing Lemma: Preservation Lemma applied to transducers
3.4. A proﬁnite toolbox for the aperiodic setting
4.
4.1. Transducer structure and continuity
4.2. Variety inclusion and inclusion of classes of continuous functions
5. Deciding continuity for transducers
5.1. Deciding continuity for group varieties
5.2. Deciding continuity for aperiodic varieties
5.3. Deciding Com- and Ab-continuity
6. Discussion
References

1
3
7
7
9
10
11
13
13
14
16
16
19
27
27
28

2. Preliminaries

We assume some familiarity with the theory of automata and transducers, and concepts
related to metric spaces (see, e.g., [3, 13] for presentations pertaining to our topic). We ﬁrst
settle the notation for these prerequisites.

We will use A and B for alphabets, and A∗ for words over A, with 1 the empty word.
For each word u, there is a smallest v, called the primitive root of u, such that u = vc for
some c; if c = 1, then u is itself primitive. We write |u| for the length of a word u ∈ A∗ and
alph(u) for the set of letters that appear in u.

Let L ⊆ A∗ be a language. We write Lc for the complement of L. For a word u ∈ A∗,
we write u−1L for {v | u · v ∈ L}, and symmetrically for Lu−1, these two operations being
called the left and right quotients of L by u, respectively. We naturally extend concatenation

24:4

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

and quotients to binary relations, in a component-wise fashion, e.g., for R ⊆ A∗ × A∗ and a
pair ρ ∈ A∗ × A∗, we may use ρ−1R and Rρ−1. More generally, with Id the identity relation,
we will write, e.g., Id · ((x∗, x∗)ρ−1) for the pairs (ww1, ww2) of words such that wi ∈ x∗ρ−1
,
i = 1, 2.

i

A variety is a mapping V which associates with each alphabet A a set V(A∗) of regular
languages closed under the Boolean operations and quotient, and such that for any morphism
h : A∗ → B∗ and any L ∈ V(B∗), we have that h−1(L) ∈ V(A∗). Reg is the variety that
maps every alphabet A to the set Reg(A∗) of regular languages over A.

Given two languages K, L ⊆ A∗, we say that they are V-separable if there is a S ∈ V(A∗)
such that K ⊆ S and L ∩ S = ∅. Since V is closed under complement, K, L are V-separable
iﬀ L, K are. Naturally, L ∈ V(A∗) iﬀ L is V-separable from Lc.

Transducers. A transducer τ is a 9-tuple (Q, A, B, δ, I, F, λ, µ, ρ) where (Q, A, δ, I, F ) forms
a nondeterministic automaton (i.e., Q is a state set, A an input alphabet, δ ⊆ Q × A × Q a
transition set, I ⊆ Q a set of initial states, and F ⊆ Q a set of ﬁnal states), and additionally,
B is an output alphabet and λ : I → B∗, µ : δ → B∗, ρ : F → B∗ are the output functions.
We write τq,q(cid:48) for τ with I := {q} and F := {q(cid:48)}, adjusting λ and ρ to output 1 if they
were undeﬁned on these states. Similarly, τq,• is τ with I := {q} and F unchanged, and
symmetrically for τ•,q. For q ∈ Q and u ∈ A∗, we write q.u for the set of states reached from
q by reading u. We assume that all the transducers and automata under study have no
useless state, that is, all states appear in some accepting path.

With w ∈ A∗, let t1t2 · · · t|w| ∈ δ∗ be an accepting path for w, starting in a state q ∈ I
and ending in some q(cid:48) ∈ F . The output of this path is λ(q)µ(t1)µ(t2) · · · µ(tn)ρ(q(cid:48)), and we
write τ (w) for the set of outputs of such paths. We use τ for both the transducer and its
associated partial function from A∗ to subsets of B∗. Relations of the form {(u, v) | v ∈ τ (u)}
are called rational relations.

The transducer τ is unambiguous if there is at most one accepting path for each word. In
that case τq,q(cid:48) is also an unambiguous transducer for any states q, q(cid:48). When τ is unambiguous,
it realizes a (partial) word-to-word function: the set of functions computed by unambiguous
transducers is the set of rational functions. Further restricting, if the underlying automaton is
deterministic, we say that τ is a subsequential transducer. If τ is a ﬁnite union of subsequential
transducers of disjoint domains, we say that τ is plurisubsequential.

Word distances, proﬁnite words. For a variety V of regular languages, we deﬁne a distance
between words for which, intuitively, two words are close if it is hard to separate them
with V languages. Deﬁne dV (u, v), for words u, v ∈ A∗, to be 2−r where r is the size of
the smallest automaton that recognizes a language of V(A∗) that separates {u} from {v};
if no such language exists, then dV (u, v) = 0.
It can be shown that this distance is a
pseudo-ultrametric [13, Section VII.2]; we make only implicit and innocuous use of this fact.
The complete metric space that is the completion of (A∗, dReg) is denoted (cid:99)A∗ and is
called the free proﬁnite monoid, its elements being the proﬁnite words, and the concatenation
being naturally extended. By deﬁnition, if (un)n>0 is a Cauchy sequence, it should hold that
for any regular language L, there is a N such that either all un with n > N belong to L,
or none does. For any x ∈ A∗, deﬁne the proﬁnite word xω = lim xn!, and more generally,
for any c > 0, xω−c = lim xn!−c. That (xn!)n>0 is a Cauchy sequence is a starting point of
the proﬁnite theory [13, Proposition VI.2.10]; it is also easily checked that xc×ω = lim xc×n!

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:5

is equal to xω for any integer c ≥ 1. Given a language L ⊆ A∗, we write L ⊆ (cid:99)A∗ for its
c
= Lc—the complement being taken in (cid:99)A∗ in the
closure, and we note that if L is regular, L
left-hand side and in A∗ in the right-hand side. Furthermore, for L(cid:48) regular, L ∪ L(cid:48) = L ∪ L(cid:48),
and similarly for intersection (see [13, Theorem VI.3.15]).

Equations. For u, v ∈ (cid:99)A∗, a language L ⊆ A∗ satisﬁes the (proﬁnite) equation u = v if for
any words s, t ∈ A∗, [s · u · t ∈ L ⇔ s · v · t ∈ L]. Similarly, a class of languages satisﬁes an
equation if all the languages of the class satisfy it. For a variety V, we write u =V v, and say
that u is equal to v in V, if V(A∗) satisﬁes u = v. For a partial function f , f (u) =V f (v)
means that either both f (u) and f (v) are undeﬁned, or they are both deﬁned and equal in V.
Given a set E of equations over (cid:99)A∗, the class of languages deﬁned by E is the class
of languages over A∗ that satisfy all the equations of E. Reiterman’s theorem shows in
particular that for any variety V and any alphabet A, V(A∗) is deﬁned by a set of equations
(the precise form of which being studied in [9]).

More on varieties. Borrowing from Almeida and Costa [2], we say that a variety V is
supercancellative when for any alphabet A, any u, v ∈ (cid:99)A∗ and x, y ∈ A, if u · x =V v · y or
x · u =V y · v, then u =V v and x = y. This implies in particular that for any word w ∈ A∗,
both w · A∗ and A∗ · w are in V(A∗). We further say that a variety V separates words if for
any s, t ∈ A∗, {s} and {t} are V-separable.

Our main applications revolve around some classical varieties, that we deﬁne over any

possible alphabet A as follows, where x, y range over all of A∗, and a, b over A:

• J , def. by (xy)ω · x = y · (xy)ω = (xy)ω
• R, def. by (xy)ω · x = (xy)ω
• L, def. by y · (xy)ω = (xy)ω
• DA, def. by xω · z · xω = xω for all z ∈ alph(x)∗
• A, def. by xω+1 = xω

• COM, def. by ab = ba
• AB, def. by ab = ba and aω = 1
• Gnil, the languages rec. by nilpotent groups
• Gsol, the languages rec. by solvable groups
• G, the languages rec. by groups

The varieties included in A are called aperiodic varieties and those in G are called group
varieties. Precise deﬁnitions, in particular for the group varieties, can be found in [25, 19];
we simply note that in group varieties, xω equals 1 for all x ∈ A∗. All these varieties except
for AB and COM separate words, and only DA and A are supercancellative. They satisfy:

R(cid:40)

(cid:40)

(cid:40)

COM

J = R ∩ L

(cid:40)

L (cid:40)

(cid:40)DA A

AB = G ∩ COM (cid:40) Gnil (cid:40) Gsol (cid:40) G

On transducers and proﬁnite words. For a proﬁnite word u and a state q of an unambiguous
transducer τ , the set q.u is well deﬁned; indeed, with u = lim un, the set q.un is eventually
constant, as otherwise for some state q(cid:48), the domain of τq,q(cid:48) would be a regular language that
separates inﬁnitely many un’s.

24:6

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

A transducer τ : A∗ → B∗ is a V-transducer,1 for a variety V, if for some set of equations E
deﬁning V(A∗), for all (u = v) ∈ E and all states q of τ , the equality q.u = q.v holds. A
rational function is V-realizable if it is realizable by a V-transducer.

Continuity. For a variety V, a function f : A∗ → B∗ is V-continuous2 iﬀ for any L ∈ V(B∗),
f −1(L) ∈ V(A∗). We mostly restrict our attention to rational functions. Since they are
computed by transducers, there are countably many such functions. We note that many
more Reg-continuous functions exist, in particular uncomputable ones:

Proposition 2.1. There are uncountably many Reg-continuous functions.
Proof. Consider a strictly increasing function g : N → N. Deﬁne f : {a}∗ → {a}∗ by f (an) =
ag(n)!. Recall that any regular language over a unary alphabet is a ﬁnite union of languages
of the form ai(aj)∗. Moreover, we have that f −1(ai(aj)∗) is ﬁnite when i (cid:54)≡ 0 mod j, and
coﬁnite otherwise, thus f is Reg-continuous. There are however uncountably many increasing
functions g, hence uncountably many Reg-continuous functions f .

Continuity is a formal notion of “functions being compatible with a class of languages.”
An equally valid notion could be to consider classes of functions that contain the characteristic
functions of the languages, and closed under composition; it turns out that the largest such
class coincides with the class of continuous functions. Indeed, writing χL : A∗ → {0, 1} for
the characteristic function of a language L ⊆ A∗:
Proposition 2.2. Let V be a variety such that {1} ∈ V({0, 1}∗). Let F be the largest class
of functions such that:
(1) For any alphabet A, F ∩ {0, 1}A∗
(2) F is closed under composition.
The class F is well deﬁned and it coincides with the class of V-continuous functions.

= {χL | L ∈ V(A∗)};

Proof. We say that a class of functions is good if it satisﬁes properties (1) and (2). We show
that the V-continuous functions form a good class, and that any good class is included in the
V-continuous functions. This implies that there is a largest good class, and that it coincides
with the class of V-continuous functions, as claimed.

(Continuous functions form a good class.) Clearly, the class of V-continuous functions
is closed under composition. Now consider a V-continuous function f : A∗ → {0, 1}. By
continuity, L = f −1({1}) is in V(A∗), since by hypothesis {1} ∈ V({0, 1}∗). Hence f = χL
for some L ∈ V(A∗), concluding this step.

1The usual deﬁnition of V-transducer is based on the so-called transition monoid of τ , see, e.g., [20]; the

deﬁnition here is easily seen to be equivalent by [1, Lemma 3.2] and [5, Lemma 1].

2A note on terminology: There has been some ﬂuctuation on the use of the term “continuous” in the
literature, mostly when a possible incompatibility arises with topology. In [18], the authors use the term
“preserving” in the more general context of functions from monoids to monoids. In our study, we focus
on word to word functions, in which the natural topological context provides a solid basis for the use of
“continuous,” as used in [16, 5].

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:7

(Functions in good classes are continuous.) Let f : A∗ → B∗ be in a good class, and let
L ∈ V(B∗); we ought to show that f −1(L) is in V(A∗). We have:

f −1(L) = f −1(χ−1

L (1))
= (χL ◦ f )−1(1)
= g−1(1) .

(with g = χL ◦ f )
Note that χL is by hypothesis in the good class, and it being closed under composition, g
also belongs to the good class. Since g ∈ {0, 1}A∗
, there is a L(cid:48) ∈ V(A∗) such that g = χL(cid:48).
This implies that f −1(L) = L(cid:48), and it thus belongs to V(A∗).

3. Continuity: The profinite approach

We build upon the work of Pin and Silva [16] and develop tools specialized to rational
functions. In Section 3.1, we present a lemma asserting the equivalence between V-continuity
and the “preservation” of the deﬁning equations for V. In the sections thereafter, we specialize
this approach to rational functions. As noted in [16], it often occurs that results about
rational functions can be readily applied to the larger class of Reg-continuous functions; here,
this is in particular the case for the Preservation Lemma of Section 3.1.

The connection to the classical notion of continuity is given by the next Theorem.

Theorem 3.1 [17, Theorem 4.1]. Let f : A∗ → B∗. It holds that f is V-continuous iﬀ f is
uniformly continuous for the distance dV .

Consequently, if f is Reg-continuous then it has a unique continuous extension to the
free proﬁnite monoid with domain f −1(B∗), written (cid:98)f : (cid:99)A∗ → (cid:99)B∗. The salient property of
this mapping is that it is continuous in the topological sense (see, e.g., [13]). For our speciﬁc
needs, we simply mention that it implies that for any regular language L, we have that
(cid:98)f −1(L) is closed (that is, it is the closure of some set).

3.1. The Preservation Lemma: Continuity is equivalent to preserving equations.
The Preservation Lemma gives us a key characterization in our study:
it ties together
continuity and some notion of preservation of equations. This can be seen as a generalization
for functions of the notion of equation satisfaction for languages. We will need the follow-
ing technical lemma that extends [13, Proposition VI.3.17] from morphisms to arbitrary
Reg-continuous functions; interestingly, this relies on a quite diﬀerent proof.

Lemma 3.2. Let f : A∗ → B∗ be a Reg-continuous function and L a regular language. The
equality (cid:98)f −1(L) = f −1(L) holds.
Proof. First note that f −1(L) ⊆ (cid:98)f −1(L), and that the right-hand side of this inclusion is
closed. Hence f −1(L) ⊆ (cid:98)f −1(L).

c
We have that (cid:98)f −1(L) = ( (cid:98)f −1(L
equality implies that f −1(L) = f −1(Lc)

For the converse inclusion, ﬁrst write D = f −1(B∗), a regular language by hypothesis.
))c ∩ D, and similarly, f −1(L) = (f −1(Lc))c ∩ D. This latter
∩ D, since f −1(Lc) and D are regular.
Hence the inclusion to be shown, that is, (cid:98)f −1(L) ⊆ f −1(L), is equivalent to:

c

c
( (cid:98)f −1(L

c
))c ∩ D ⊆ f −1(Lc)

∩ D ,

24:8

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

or equivalently,

f −1(Lc) ∪ D

c

c
⊆ (cid:98)f −1(L

) ∪ D

c

.

c
The inclusion to be shown is thus implied by f −1(Lc) ⊆ (cid:98)f −1(L

), that is, since L is
regular, by f −1(Lc) ⊆ (cid:98)f −1(Lc). As in the proof of the converse inclusion, the right-hand side
being closed, this inclusion holds.

Lemma 3.3 (Preservation Lemma). Let f : A∗ → B∗ be a Reg-continuous function and E a
set of equations that deﬁnes V(A∗). The function f is V-continuous iﬀ for all (u = v) ∈ E
and words s, t ∈ A∗, (cid:98)f (s · u · t) =V (cid:98)f (s · v · t).

Proof. (Only if.) Suppose f is V-continuous. Let u, v ∈ (cid:99)A∗ such that u =V v, and s, t ∈ A∗.
Since by V-continuity f −1(B∗) ∈ V(A∗), either both s · u · t and s · v · t belong to the closure
of this language, or they both do not. The latter case readily yields the result, hence suppose
we are in the former case.

By deﬁnition, u = lim un and v = lim vn for some Cauchy sequences of words (un)n>0
and (vn)n>0. Since s · u · t =V s · v · t, the hypothesis yields that dV (s · un · t, s · vn · t) tends
to 0. By Theorem 3.1, f is uniformly continuous for dV , hence dV (f (s · un · t), f (s · vn · t))
also tends to 0 (note that both f (s · un · t) and f (s · vn · t) are deﬁned for all n big enough).
This shows that (cid:98)f (s · u · t) =V (cid:98)f (s · v · t).

(If.) Suppose that f preserves the equations of E as in the statement. Let L ∈ V(B∗), we
wish to verify that L(cid:48) = f −1(L) ∈ V(A∗), or equivalently by deﬁnition, that L(cid:48) satisﬁes all
the equations of E. Let (u = v) ∈ E be one such equation, and s, t ∈ A∗; we must show that
s · u · t ∈ L(cid:48) ⇔ s · v · t ∈ L(cid:48).

By Lemma 3.2, since f is Reg-continuous, (cid:98)f (L(cid:48)) = (cid:98)f ( (cid:98)f −1(L)) ⊆ L. Now let s · u · t ∈ L(cid:48),
we thus have that (cid:98)f (s · u · t) ∈ L (observe that (cid:98)f (s · u · t) is indeed deﬁned). By hypothesis,
(cid:98)f (s · u · t) =V (cid:98)f (s · v · t); now since L ∈ V(B∗), it must hold that (cid:98)f (s · v · t) ∈ L. Taking the
inverse image of (cid:98)f on both sides, it thus holds that s·v·t ∈ (cid:98)f −1(L), and Lemma 3.2 then shows
that s · v · t ∈ L(cid:48). As the argument works both ways, this shows that s · u · t ∈ L(cid:48) ⇔ s · v · t ∈ L(cid:48),
concluding the proof.

Continuity can be seen as preserving membership in V (by inverse image); this is where
the nomenclature “V-preserving function” of [18] stems from. Strikingly, this could also be
worded as preserving nonmembership in V:

Proposition 3.4. A Reg-continuous total 3 function f : A∗ → B∗ is V-continuous iﬀ for all
L ⊆ A∗ that do not belong to V(A∗), f (L) and f (Lc) are not V-separable.

Proof. We rely on a characterization due to Almeida [1, Lemma 3.2]: two languages K and
L are V-separable iﬀ for all u ∈ K, v ∈ L, we have that u (cid:54)=V v.

(Only if.) Suppose f is V-continuous, and let L ⊆ A∗ be a language outside V(A∗). There
c
must be two proﬁnite words u, v ∈ (cid:99)A∗ such that u =V v, u ∈ L and v ∈ L
. By V-continuity
and the Preservation Lemma, (cid:98)f (u) =V (cid:98)f (v), and moreover, (cid:98)f (u) ∈ f (L) and (cid:98)f (v) ∈ f (Lc).
The characterization above thus implies that f (L) and f (Lc) are not V-separable.

3In all the varieties we are interested in, one can easily modify any partial function into a total function

while preserving its continuity properties.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:9

(If.) Assume that for all L ⊆ A∗, if f (L) and f (Lc) are V-separable, then L ∈ V(A∗).
For all K ∈ V(B∗), we show that L = f −1(K) ∈ V(A∗). Now f (L) ⊆ K, and f (Lc) =
f (f −1(K)c) = f (f −1(Kc)) ⊆ Kc. Since K ∈ V(B∗), it is V-separable from its complement,
hence f (L) and f (Lc) are V-separable, and our assumption implies that L ∈ V(A∗).

3.2. The proﬁnite extension of rational functions. The Preservation Lemma already
hints at our intention to see transducers as computing functions from and to the free proﬁnite
monoids. Naturally, if τ is a rational function, its being Reg-continuous allows us to do
so (by Theorem 3.1). For u = lim un a proﬁnite word, we will write τ (u) for (cid:98)τ (u), i.e.,
the limit lim τ (un), which exists by continuity. In this section, we develop a slightly more
combinatorial approach to the evaluation of (cid:98)τ , and address two classes of proﬁnite words:
those expressed as s · u · t for s, t words and u a proﬁnite word, and those expressed as xω
for x a word.

Let τ be an unambiguous transducer. Recall that for any state q of τ and any proﬁnite
word u, q.u is well deﬁned. As a consequence, if s and t are words, then there is at most one
initial state q0, one q ∈ q0.s and one q(cid:48) ∈ q.u such that q(cid:48).t is ﬁnal, and these states exist iﬀ
τ (s · u · f ) is deﬁned. Thus:

Lemma 3.5. Let τ be an unambiguous transducer from A∗ to B∗, s, t ∈ A∗ and u ∈ (cid:99)A∗.
Suppose τ (s · u · t) is deﬁned, and let q0, q, q(cid:48) be the unique states such that q0 is initial,
q ∈ q0.s, q(cid:48) ∈ q.u, and q(cid:48).t is ﬁnal. The following holds:

τ (s · u · t) = τ•,q(s) · τq,q(cid:48)(u) · τq(cid:48),•(t) .

Let us now turn to the evaluation of ω-terms:

Lemma 3.6. Let τ be an unambiguous transducer from A∗ to B∗ and x ∈ A∗. If τ (xω) is
deﬁned, then there are words s, y, t ∈ B∗ such that:

τ (xω) = s · yω−1 · t .

Proof. Consider a large value n; we study the behavior of xn! on τ . There is an initial state
q0, a state q, and a ﬁnal state q1 such that xn! is accepted by a path going from q0 to q
reading xi, from q to q reading xk with k < n, and from q to q1 reading xj. Thus the
accepting path for any word of the form xm!, m > n is similar to the one for xn!: from q0
to q, looping (m! − n!)/k + 1 times on q, and then from q to q1. Let thus s = τq0,q(xi),
z = τq,q(xk), and t = τq,q1(xj). It then holds that τ ((xk)m!) = s · zm!−(n!/k)+1 · t. Letting
c = n!/k − 1, this shows that τ ((xk)ω) = s · zω−c · t. Now on the one hand, (xk)ω = xω, and
on the other hand, we similarly have that zω−c = yω−1 by letting y = zc. We thus obtain
that τ (xω) = s · yω−1 · t.

These constitute our main ways to eﬀectively evaluate the image of proﬁnite words
through transducers. Since they are ubiquitous in our study, we will frequently apply these
lemmas without explicitly citing them.

24:10

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

3.3. The Syncing Lemma: Preservation Lemma applied to transducers. We apply
the Preservation Lemma on transducers and deduce a slightly more combinatorial characteri-
zation of transducers describing continuous functions. This does not provide an immediate
decidable criterion, but our decidability results will often rely on it. The goal of the forth-
coming lemma is to decouple, when evaluating s · u · t (with the notations of the Preservation
Lemma), the behavior of the u part and that of the s, t part. This latter part will be tested
against an equalizer set:

Deﬁnition 3.7 (Equalizer set). Let u, v ∈ (cid:99)A∗. The equalizer set of u and v in V is:

EquV (u, v) = {(s, s(cid:48), t, t(cid:48)) ∈ (A∗)4 | s · u · t =V s(cid:48) · v · t(cid:48)} .
Remark 3.8. The complexity of equalizer sets can be surprisingly high. For instance, letting
V be the class of languages deﬁned by {x2 = x3 | x ∈ A∗}, there is a proﬁnite word u for
which EquV (u, u) is undecidable (this relies on the existence of arbitrarily long square-free
words). On the other hand, equalizer sets quickly become less complex for common varieties;
for instance, Lemma 3.12 will provide a simple form for the equalizer sets of aperiodic
supercancellative varieties.

Deﬁnition 3.9 (Input synchronization). Let R, S ⊆ A∗ × B∗. The input synchronization of
R and S is deﬁned as the relation over B∗ ×B∗ obtained by synchronizing the ﬁrst component
of R and S:

R (cid:46)(cid:47) S = {(u, v) | (∃s)[(s, u) ∈ R ∧ (s, v) ∈ S]} (cid:0) = S ◦ R−1) .

Naturally, the input synchronization of two rational functions is a rational relation.

Lemma 3.10 (Syncing Lemma). Let τ be an unambiguous transducer from A∗ to B∗ and E
a set of equations that deﬁnes V(A∗). The function τ is V-continuous iﬀ:
(1) τ −1(B∗) ∈ V(A∗), and
(2) For any (u = v) ∈ E, any states p, q, any p(cid:48) ∈ p.u, and any q(cid:48) ∈ q.v, and letting

u(cid:48) = τp,p(cid:48)(u) and v(cid:48) = τq,q(cid:48)(v):

(τ•,p (cid:46)(cid:47) τ•,q) × (τp(cid:48),• (cid:46)(cid:47) τq(cid:48),•) ⊆ EquV (u(cid:48), v(cid:48)) .

Proof. We rely on the Preservation Lemma, since τ is Reg-continuous.

(Only if.) Suppose that τ is V-continuous, the ﬁrst point is immediate. For the second,
we use the notation of the statement. Let (s, s(cid:48), t, t(cid:48)) ∈ (τ•,p (cid:46)(cid:47) τ•,q) × (τp(cid:48),• (cid:46)(cid:47) τq(cid:48),•). This
implies that there are words x, y ∈ A∗ such that:
• s = τ•,p(x), s(cid:48) = τ•,q(x);
• t = τp(cid:48),•(y), t(cid:48) = τq(cid:48),•(y).
By Lemma 3.5, we have that τ (x · u · y) = s · u(cid:48) · t and τ (x · v · y) = s(cid:48) · v(cid:48) · t(cid:48). The Preservation
Lemma then asserts that s · u(cid:48) · t =V s(cid:48) · v(cid:48) · t(cid:48), showing that (s, s(cid:48), t, t(cid:48)) ∈ EquV (u(cid:48), v(cid:48)).
(If.) Let (u = v) ∈ E and x, y ∈ A∗. We must show that τ (x · u · y) =V τ (x · v · y). Since
τ −1(B∗) ∈ V(A∗), either τ is deﬁned on both x · u · y and x · v · y, or on neither; in this latter
case, the equality is satisﬁed by deﬁnition. We thus suppose that both values are deﬁned.
This implies that there are states p, q, p(cid:48), q(cid:48) as in the statement, and using the same notation,
letting s, s(cid:48), t, t(cid:48) just as above, the hypothesis yields that s · u(cid:48) · t =V s(cid:48) · v(cid:48) · t(cid:48), showing the
claim.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:11

3.4. A proﬁnite toolbox for the aperiodic setting. In this section, we provide a few
lemmas pertaining to our study of aperiodic continuity. We show that the equalizer sets of
aperiodic supercancellative varieties are well behaved. Intuitively, the larger the varieties
are, the more their nonempty equalizer sets will be similar to the identity. For instance, if
s · xω =A xω, for words s and x, it should hold that s and x have the same primitive root.
We ﬁrst note the following easy fact that will only be used in this section; it is reminiscent of
the notion of equidivisibility, studied in the proﬁnite context by Almeida and Costa [2].

Lemma 3.11. Let u, v be proﬁnite words over an alphabet A and V be a supercancellative
variety. Suppose that there are s, t ∈ A∗ such that u · t =V s · v, then there is a w ∈ (cid:99)A∗ such
that u =V s · w and v =V w · t. If moreover u = v and V is aperiodic, then u =V s · u · t.
Proof. Let u = lim un; if (un)n>0 is ultimately constant, then this is immediate, so we
assume that |un| is unbounded. From u · t =V s · v, and the fact that s · A∗ ∈ V(A∗) by
supercancellativity, we obtain that for n large enough, un · t ∈ s · A∗. Since u is nonﬁnite,
|un| > |s| for n large enough, in which case un = s · wn for some sequence (wn)n>0. Let
w ∈ (cid:99)A∗ be a limit point of this sequence, that exists by compactness (this is an essential
property of the free proﬁnite monoid, see, e.g., [13, Theorem VI.2.5]). It holds that u = s · w.
Replacing u by this value in the equation of the hypothesis, we thus have that s · w · t =V s · v,
and since V is supercancellative, that v =V w · t.

For the last point, with u = v, we iterate the previous construction on w, since in that
case, u =V w · t =V s · w. This provides a sequence w = w1, w2, w3, . . . such that u =V
sn · wn =V wn · tn. Taking a limit point x of (wn)n>0, it thus holds that u =V sω · x =V x · tω,
showing, by aperiodicity, that u =V s · u =V u · t.
Lemma 3.12. Let u, v be proﬁnite words over an alphabet A and V be an aperiodic super-
cancellative variety. Suppose EquV (u, v) is nonempty. There are words x, y ∈ A∗ and two
pairs ρ1, ρ2 ∈ (A∗)2 such that:

EquV (u, v) =

(cid:16)

Id · (cid:0)(x∗, x∗)ρ−1
1

(cid:1)(cid:17)

(cid:16)(cid:0)ρ−1

(cid:17)
2 (y∗, y∗)(cid:1) · Id

×

.

Proof. Let us ﬁrst establish the property for u = v. Assume that there are nonempty primitive
words x, y such that x · u · y =V u; we show the statement of the lemma with these x and y,
and ρ1 = ρ2 = (1, 1). Note that xω · u · yω =V u, hence, since xω+1 = xω and similarly for
y, we have that x · u =V u · y =V u. This and the fact that V is supercancellative show the
right-to-left inclusion.

For the left-to-right inclusion, let s, s(cid:48), t, t(cid:48) be such that s · u · t =V s(cid:48) · u · t(cid:48). Since V
is supercancellative, this implies that the equation also holds if common preﬁxes of s and
s(cid:48) and common suﬃxes of t and t(cid:48) are removed. We may thus assume that we are in two
possible situations, by symmetry:
(1) Suppose s(cid:48) = t(cid:48) = 1, that is, s · u · t =V u, and that s, t are nonempty. By the same token

as above, this shows that s · u =V u · t =V u. In particular, this implies that:

s|x| · u · t|y| =V x|s| · u · y|t| ,

which implies, since V is supercancellative, that s|x| = x|s| and t|y| = y|t|. As x and y are
primitive, this shows that s ∈ x∗ and t ∈ y∗. (Note that this holds even if one of s or t is
empty.)

(2) Suppose s = t(cid:48) = 1, that is, u · t =V s(cid:48) · u, and that s(cid:48), t are nonempty. By Lemma 3.11,
we have that u =V s(cid:48) · u · t, and we can appeal to the previous situation, showing that
s(cid:48) ∈ x∗ and t ∈ y∗.

24:12

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

(The cases where one of s, t is empty, in the ﬁrst point, or one of s(cid:48), t is empty, in the second,
are treated similarly. Note that it is not possible for both s and s(cid:48) to be nonempty, since
that would imply that they start with diﬀerent letters, falsifying the assumed equation by
supercancellativity.)

We assumed that the x, y existed, we ought to show the other cases satisfy the claim.
The two situations above show that if EquV (u, u) is nonempty, then such x, y exist, although
without the guarantee that they be nonempty. Now if x · u =V u and there are no nonempty
y such that x · u · y =V u, this implies that there are no nonempty y such that u · y =V u.
Consequently, in the above case, t = t(cid:48) = 1, and the analysis stands. This concludes the
proof for the case u = v.

We will reduce the case u (cid:54)= v to this one. Indeed, suppose that s · u · v = s(cid:48) · v · t(cid:48). Again,

by stripping away common preﬁxes and suﬃxes, we are faced with two cases:
(1) Suppose s(cid:48) = t(cid:48) = 1, that is, s · u · t =V v. We have that EquV (u, v) = EquV (u, s · u · t),
hence (m, m(cid:48), n, n(cid:48)) ∈ EquV (u, v) iﬀ (m, m(cid:48) · s, n, t · n(cid:48)) ∈ EquV (u, u), and the result
follows.

(2) Suppose s = t(cid:48) = 1, that is, u · t =V s(cid:48) · v. By Lemma 3.11, there is a proﬁnite
word w such that u =V s(cid:48) · w and v =V w · t, hence (m, m(cid:48), n, n(cid:48)) ∈ EquV (u, v) iﬀ
(m · s(cid:48), m(cid:48), n, t · n(cid:48)) ∈ EquV (w, w), concluding the proof.

Lemma 3.13. Let x, y be words. For every aperiodic supercancellative variety V, the equality
EquV (xω, yω) = EquA(xω, yω) holds.
Proof. The inclusion from right to left is clear, since all equations true in A hold in V.

In the other direction, let us write u = x|y| and v = y|x|; we have that uω = xω and
vω = yω. Suppose s · uωt =V s(cid:48) · vω · t(cid:48). In particular, since V is supercancellative, this means
that s · un is a preﬁx of s(cid:48) · vn, or vice-versa, depending on whether |s| > |s(cid:48)| or the opposite.
This implies that u · up = vs · v for some preﬁx up of u and suﬃx vs of v. Hence (by, e.g., [11,
Proposition 1.3.4]) u and v are conjugate. Their respective primitive roots are thus conjugate
(by [11, Proposition 1.3.3]); writing z · z(cid:48) and z(cid:48) · z for them, we have that uω = (z · z(cid:48))ω and
vω = (z(cid:48) · z)ω.

Thus the equation above reads: s · (z · z(cid:48))ω · t =V s(cid:48) · (z(cid:48) · z)ω · t(cid:48). As in the proof of
Lemma 3.12, removing the common preﬁxes and suﬃxes (which we can do both in V and
A), we are left with two possibilities:
• Suppose s(cid:48) = t(cid:48) = 1, that is, s·(z · z(cid:48))ω ·t =V (z(cid:48) · z)ω. The same argument as in Lemma 3.12
shows that s ∈ z(cid:48) · (z · z(cid:48))∗ and t ∈ (z · z(cid:48))∗ · z, and hence the equation holds in A too;
• Suppose s = t(cid:48) = 1, that is, (z · z(cid:48))ω · t =V s(cid:48) · (z(cid:48) · z)ω. Similarly, as V is supercancellative
and aperiodic, this shows that s(cid:48) ∈ z · (z(cid:48) · z)∗ and t ∈ (z · z(cid:48))∗ · z, and the equation holds
in A too, concluding the proof.

Remark 3.14. For two aperiodic supercancellative varieties V and W, we could further
show that if both EquV (u, v) and EquW (u, v) are nonempty, then they are equal, for any
proﬁnite words u, v. It may however happen that one equalizer set is empty while the other
is not; for instance, with u = (ab)ω and v = (ab)ω · a · (ab)ω, the equalizer set of u and v in
DA is nonempty, while it is empty in A.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:13

4. Intermezzos

We present a few facts of independent interest on continuous rational functions. Through
this, we develop a few examples, showing in particular how the Preservation and Syncing
Lemmas can be used to show (non)continuity. In a ﬁrst part, we study when the structure of
the transducer is relevant to continuity, and in a second, when the (non)inclusion of variety
relates to (non)inclusion of the class of continuous rational functions.

4.1. Transducer structure and continuity. As noted by Reutenauer and Schützen-
berger [20, p. 231], there exist numerous natural varieties V for which any V-realizable
rational function is V-continuous. Indeed:

Proposition 4.1. Let V be a variety of languages closed under inverse V-realizable rational
function. Any V-realizable rational function is V-continuous. This holds in particular for the
varieties A, Gsol, and G.

Proof. This is due to a classical result of Sakarovitch [22] (see also [15]), stating, in modern
parlance, that a variety V is closed under block product iﬀ it is closed under inverse V-realizable
rational functions (note that there has been some ﬂuctuation on vocabulary, since wreath
product was used at some point to mean block product). That A, Gsol, and G are closed
under block product is folklore.

This naturally fails for all our other varieties, since they are not closed under inverse
V-realizable rational functions. For completeness, we give explicit constructions in the proof
of the following Proposition.

Proposition 4.2. For V ∈ {J , L, R, DA, AB, Gnil, COM}, there are V-realizable rational func-
tions that are not V-continuous.

Proof. We devise simple counter examples with A = {a, b}.

(The J , R and COM cases.) Recall that A∗a /∈ R(A∗) ∪ COM(A∗). The minimal unambiguous
two-state transducer τ that erases all of its input except for the last letter is a (J ∩
COM)-transducer; indeed, a acts in the same way as b and they are idempotent on the
transducer. However, τ −1(a) = A∗a.

(The R and DA cases.) Consider the Dyck language D over A; this is the (nonregular)
language of well-parenthesized expressions where a is the opening and b the closing parenthesis.
Write D(k) for the Dyck language where parentheses are nested at most k times, for instance
D(0) = 1, D(1) = (ab)∗ and D(2) = (a(ab)∗b)∗. These languages have great importance in
algebraic language theory, as they separate each level of the dot-depth hierarchy [4]. It holds
in particular that D(1) /∈ DA(A∗).

Let τ be the rational function that removes the ﬁrst letter of each block of a’s and each
block of b’s; naturally, τ is L-realizable. However, τ −1(Dk−1) = Dk, showing not only that τ
is not continuous for DA, but also not continuous for any level of the dot-depth hierarchy.

(The Gnil and AB cases.) Consider the two-state transducer τ where a loops on both states,
and a b on one state goes to the other. When a is read on the ﬁrst state, it produces a
x, while all the other productions are the identity. This is an AB-transducer. However,
τ (aba) = xba (cid:54)= baa = τ (baa), hence it is not AB-continuous by the Preservation Lemma,
since aba =AB baa. For Gnil, let L be the language over {a, b, x} with a number of x congruent

24:14

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

to 0 modulo 3. It can be shown that τ −1(L) /∈ Gnil(A∗), intuitively since this language needs
to diﬀerentiate between those a’s that are an even number of b’s away from the beginning of
the word, and those which are not.

The converse concern, that is, whether all V-continuous rational functions are V-realizable,

was mentioned by Reutenauer and Schützenberger [20] for V = A.

Proposition 4.3. For V ∈ {J , L, R, DA, A, AB, COM}, there are V-continuous rational func-
tions that are not V-realizable.

Proof. (The aperiodic cases.) Let A = {a}, a unary alphabet. Consider the transducer τ
that removes every second a: its minimal transducer not being a A-transducer, it is not
A-realizable (this is a property of subsequential transducers [20]). However, all the unary
languages of V are either ﬁnite or co-ﬁnite, and hence for any L ∈ V(A∗), τ −1(L) is either
ﬁnite or co-ﬁnite, hence belongs to V(A∗).

(The AB and COM cases.) Over A = {a, b}, deﬁne τ to map words w in aA∗ to (ab)|w|, and
words w in bA∗ to (ba)|w|. Clearly, a and b cannot act commutatively on the transducer.
Now τ (ab) =COM τ (ba), and moreover τ (xω) =AB (ab)ω =AB 1 = τ (1), hence τ is continuous
for both AB and COM by the Preservation Lemma.

We delay the positive answers to that question, namely for Gnil, Gsol, G, to Corollary 5.8

as they constitute our main lever towards the decidability of continuity for these classes.

4.2. Variety inclusion and inclusion of classes of continuous functions. In this
section, we study the consequence of variety (non)inclusion on the inclusion of the related
classes of continuous rational functions. This is reminiscent of the notion of heredity studied
by [17], where a function is V-hereditarily continuous if it is W-continuous for each subvariety
W of V. Variety noninclusion provides the simplest study case here:

Proposition 4.4. Let V and W be two varieties. If V (cid:54)⊆ W then there are V-continuous
rational functions that are not W-continuous.

Proof. Let L ∈ V(A∗) be such that L /∈ W(A∗). Deﬁne f : A∗ → A∗ as the identity function
with domain L. Clearly, as f −1(K) = K ∩ L, the function f is V-continuous. However,
f −1(A∗) = L /∈ W(A∗) and A∗ ∈ W(A∗), thus f is not W-continuous.

The remainder of this section focuses on a dual statement:

If V (cid:40) W, are all V-continuous rational functions W-continuous?

4.2.1. The group cases. We ﬁrst focus on group varieties. Naturally, if 1. V-continuous
rational functions are V-realizable and 2. W-realizable rational functions are W-continuous,
this holds. Appealing to the forthcoming Corollary 5.8 for point 1 and Proposition 4.1 for
point 2, we then get:
Proposition 4.5. For V, W ∈ {Gnil, Gsol, G} with V (cid:40) W, all V-continuous rational functions
are W-continuous. This however fails for V = AB and for any W ∈ {Gnil, Gsol, G}.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:15

Proof. It remains to show the case V = AB. This is in fact the same example as in the proof
of Proposition 4.3, to wit, over A = {a, b}, the rational function τ that maps w ∈ aA∗ to
(ab)|w|, and words w ∈ bA∗ to (ba)|w|. Indeed, we saw that this function is continuous for AB,
but we have that τ (a) = ab on the one hand, and τ (bωa) = (ba)ωba =W ba, but ab (cid:54)=W ba.
The Preservation Lemma then shows that τ is not continuous for W.

Proposition 4.6. All AB-continuous rational functions are COM-continuous.

Proof. Indeed, if u =AB v with u, v words, then u =COM v, since these varieties separate the
same words. As COM is deﬁned using equations on words, this directly shows the claim by
the Preservation Lemma.

4.2.2. The aperiodic cases. We now turn to aperiodic varieties. For less expressive varieties,
the property fails:
Proposition 4.7. For V ∈ {J , L, R} and W ∈ {L, R, DA, A} with V (cid:40) W, there are
V-continuous rational functions that are not W-continuous.
Proof. Deﬁne τ : {a}∗ → {a, b}∗ to be the rational function that changes every other a to b;
that is, τ (a2n) = (ab)n, and τ (a2n+1) = (ab)n · a. Note that naturally, over a single letter,
a · (aa)ω = (aa)ω · a = aω+1. Now τ (aω) = (ab)ω and τ (aω+1) = (ab)ω · a, and since these two
proﬁnite words are equal in J and R, the Preservation Lemma shows that τ is continuous for
both J and R. However, these two proﬁnite words are not equal in L, DA, and A, showing
that τ is continuous for none of those varieties.

The remaining case, that is, showing the existence of a J -continuous rational function
that is not R-continuous is done symmetrically, with the function mapping a2n to (ab)n and
a2n+1 to b · (ab)n.

Proposition 4.8. Any DA-continuous rational function is A-continuous.

Proof. First note that both DA and A satisfy the hypotheses of Lemma 3.12. Consider
a DA-continuous rational function τ : A∗ → B∗. By the Syncing Lemma, to show that it
is A-continuous, it is enough to show that 1. τ −1(B∗) ∈ A(A∗), and 2. That some input
synchronizations of τ , based on equations of the form xω =A xω+1, belong to an equalizer
set of the form (by Lemma 3.6):
EquA(α · yω · β, α(cid:48) · zω · β(cid:48)) = {(s, s(cid:48), t, t(cid:48)) | (s · α, s(cid:48) · α(cid:48), β · t, β(cid:48) · t(cid:48)) ∈ EquA(yω, zω)} .
Applying the Syncing Lemma on τ for the variety DA, we get that point 1 is true, since
τ −1(B∗) ∈ DA(A∗). Similarly, point 2 is true since xω = xω+1 is an equation of DA, and
Lemma 3.13 implies that the equalizer set of the equation above is the same in DA and
A.

However, this property does not hold beyond rational functions:

Proposition 4.9. There are nonrational functions that are continuous for both DA and Reg
but are not A-continuous.
Proof. Deﬁne f : {a}∗ → {a, b}∗ by f (a2n) = (ab)n and f (a2n+1) = (ab)n · a · (ab)n. We ﬁrst
have to check that f is indeed Reg-continuous. Given a regular language L, we deﬁne a
pushdown automaton over {a}∗ that recognizes f −1(L); since all unary context-free languages
are regular, by Parikh’s theorem, this shows the claim. If the input is of the form a2n, then

24:16

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

the pushdown automaton may check that (ab)n ∈ L, by simulating the automaton for L. If
the input is of the form a2n+1, then the pushdown automaton can guess the middle position
of the input, and accordingly check that (ab)n · a · (ab)n ∈ L, again using the automaton for
L. This concludes the construction.

The function f being Reg-continuous, consider its extension (cid:98)f . As in Proposition 4.7,
checking that f is DA-continuous amounts to checking that (cid:98)f (aω) =DA (cid:98)f (aω+1). The left-
hand side being (ab)ω while the right-hand side is (ab)ω · a · (ab)ω, this holds. However, these
two proﬁnite words are equal in DA but not in A, hence this function is not A-continuous,
again appealing to the Preservation Lemma.

5. Deciding continuity for transducers

5.1. Deciding continuity for group varieties. Reutenauer and Schützenberger showed
in [20] that a rational function is G-continuous iﬀ it is G-realizable. Since this is proven
eﬀectively, it leads to the decidability of G-continuity. In Proposition 4.1, we saw that the
right-to-left statement also holds for Gsol; we now show that the left-to-right statement holds
for all group varieties V that contain Gnil—this odd-looking condition on V is here to ensure
that the free group is embedded, in a precise sense, in V [21, § 6.1.9]. As in [20], but with
sensibly diﬀerent techniques, we show that V-continuous transducers are plurisubsequential.
The Syncing Lemma will then imply that such transducers are V-transducers. Both properties
rely on an omnibus normal form which uses the three following notions:

Deﬁnition 5.1. • A transducer τ is utilitarian if for any two states p, q:

(∃x, y)(cid:2)∅ (cid:54)= (τp,• (cid:46)(cid:47) τq,•) ⊆ (x, y) · Id(cid:3)(cid:105)
(cid:104)
• Within a transducer, a pan is a triplet (q, q(cid:48), p) of the form:

⇒ p = q .

a

q

q(cid:48)

a

p

a∗

This is regardless of the outputs. The pan is proper if q (cid:54)= q(cid:48).

• Within a transducer, and for a letter a, a state q is a-recurrent if p.aω = {p}. The
transducer itself is said to be a-recurrent if all of its states are, and recurrent if it is
a-recurrent for all letters.

Lemma 5.2. Let τ be a transducer. There is a utilitarian transducer τ (cid:48) computing the same
function. Additionally:
• If τ is V-continuous for some group variety that contains Gnil, then τ (cid:48) has no proper pan;
• For any letter a, if τ is a-recurrent, so is τ (cid:48).

Proof. We start with the utilitarianism, then focus on the ﬁrst of the “additionally” parts.
The second point therein is easily satisﬁed by construction. Utilitarianism is shown in three
steps.

(Step 1.) Deﬁne τ (cid:48) to be the Cartesian product of τ with the powerset automaton of its
reversal. By construction, we get the following fact, writing Rp for the language of words
accepted from p, that is {w | p.w ∩ F (cid:54)= ∅}:

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:17

Fact 5.3. For any states p, p(cid:48) of τ (cid:48), Rp ∩ Rp(cid:48) (cid:54)= ∅ ⇒ Rp = Rp(cid:48).

(Step 2.) Write simply τ for the result of Step 1. In this step, we make sure that outputs
are produced “as soon as possible”, a process known as normalization (e.g., [12, Section 1.5.2])
that we sketch for completeness. For every state q, write πq for the longest string such that
τq,•(A∗) ⊆ πq · B∗. Now deﬁne the new output function (λ(cid:48), µ(cid:48), ρ(cid:48)) by letting:
q µ(q, a, q(cid:48)) · πq(cid:48), µ(cid:48)(q, 1) = π−1

µ(cid:48)(1, q) = µ(1, q) · πq, µ(cid:48)(q, a, q(cid:48)) = π−1

q µ(q, 1) .

Write τ (cid:48) for τ equipped with the output function µ(cid:48). For no state q there is a letter b ∈ B∗
such that τq,•(A∗) ⊆ b · B∗.

(Step 3.) Write again τ for the result of the previous step. Naturally, τ still satisﬁes Fact 5.3.
Consider two states p, q such that there are x, y ∈ B∗ satisfying ∅ (cid:54)= (τp,• (cid:46)(cid:47) τq,•) ⊆ (x, y) · Id.
The ﬁrst part of this assumption implies that Rp ∩ Rq (cid:54)= ∅, and thus, by Fact 5.3, Rp = Rq.
In other words, τp,• and τq,• have the same domain. The second part of the assumption thus
indicates that every production of p (resp. of q) starts with x (resp. with y), and Step 2
asserts that x = y = 1. Hence τp,• and τq,• actually compute the same function. We can
thus merge them into a single state without changing the function realized. Repeating this
operation results in a transducer τ (cid:48) that is utilitarian.

(No proper pans.) Consider a pan (q, q(cid:48), p) on a in τ (cid:48). As p can be reached from both q and
p,q(an), z =
q(cid:48) reading a, the product P = τ (cid:48)
τ (cid:48)
q,p(a), for some n such that y is deﬁned. We let h be the longest common suﬃx of x and z,
and x = x(cid:48) · h and z = z(cid:48) · h.

q(cid:48),• is nonempty. Write x = τ (cid:48)

q(cid:48),p(a), y = τ (cid:48)

q,• (cid:46)(cid:47) τ (cid:48)

As τ is G-continuous, let us apply point 2 of the Syncing Lemma on τ (cid:48), the equation
(aω = 1), from the pair of states (q(cid:48), q(cid:48)) to (q, q(cid:48)). With Z = τ•,q(cid:48) (cid:46)(cid:47) τ•,q(cid:48), a nonempty subset
of the identity, we have that Z × P ⊆ EquV (x(yz)ω−1y, 1). We write, in the following, ν−1 for
νω−1, to convey the fact that ν−1 is the inverse of ν in V; that is: ν · ν−1 =V 1 (this analogy
naturally carries further, since for instance, (νη)−1 =V η−1 · ν−1). Let (s, s, u, u(cid:48)) ∈ Z × P ,
then:

(By the Syncing Lemma)

s · u(cid:48) =V s · x · (yz)ω−1 · y · u
=V s · x · z−1 · y−1 · y · u
=V s · x · z−1 · u
=V s · (x(cid:48)h) · (z(cid:48)h)−1 · u =V s · x(cid:48) · z(cid:48)−1 · u .
By cancellation, this shows that u(cid:48) =V x(cid:48) · z(cid:48)−1 · u. Since u(cid:48) is a word and x(cid:48) and z(cid:48) do not
share a common suﬃx, there is a word w such that u = z(cid:48) · w (this is true in the free group,
which is embedded, in a precise sense, in V [21, § 6.1.9]). This implies that u(cid:48) =V x(cid:48) · w and
shows that P ⊆ (z(cid:48), x(cid:48)) · Id, hence that q = q(cid:48) by the main property of this lemma, and the
of Lemma 5.2.
pan is not proper.

Lemma 5.4. Let V be a variety of group languages that contains Gnil. For any V-continuous
unambiguous transducer, there is an equivalent plurisubsequential V-transducer.

Proof. Let τ be a V-continuous unambiguous transducer. The proof is split in three facts:

Fact 5.5. There is a utilitarian recurrent transducer τ (cid:48) that deﬁnes the same function as τ .

24:18

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

Fact 5.6. Any recurrent transducer is plurisubsequential.

Fact 5.7. Any V-continuous utilitarian plurisubsequential transducer is a V-transducer.

These facts together naturally imply the lemma.

Proof of Fact 5.5. We ﬁrst apply Lemma 5.2 on τ . We turn the resulting transducer—which
we call τ again—into a recurrent transducer one letter at a time. After each letter, we
apply again Lemma 5.2, thus obtaining at the end of the process a utilitarian and recurrent
transducer equivalent to τ .

In the following, for any state q, we write Lq for {w | q ∈ I.w} and Rq for {w | q.w ∩ F (cid:54)=
∅}. The preimage of τ is denoted by L = τ −1(B∗). Since τ is V-continuous, then L is in V.
Finally, we say that a state p is weakly a-recurrent if p ∈ p.aw.

Let a be a letter. We ﬁrst perform the direct product of the automaton with an automaton
remembering the last weakly a-recurrent state seen. Let p be a non weakly a-recurrent state.
Now τ is V-continuous and has no proper pan, hence for any u, v such that u ∈ Lp and
v ∈ Rp, there exist q, q(cid:48) such that:

u−→ q aω

−→ q an

−→ q(cid:48)

I

v−→ F .

By the same argument used in showing the absence of proper pan in Lemma 5.2, it holds
that p = q(cid:48). Since p is connected to some weakly a-recurrent state, there is some k > 0 such
that the above path can be decomposed as follows:
−→ q(cid:48)(cid:48) ak
Since p contains the information of the last weakly a-recurrent state seen, the choice of q(cid:48)(cid:48)
is independent from u and v. Hence the choice of q too is independent from both u and v.
In particular, this shows that Lp ⊆ Lq. Furthermore, for any word in u ∈ Lq and any word
v ∈ Rq, we have uaωv ∈ L, and thus uv ∈ L as well. Hence there exists a state r such that:

−→ p v−→ F .

−→ q aω−k

u−→ q aω

I

u−→ r

v−→ F .

I

By the same argument as above, we necessary have r = p, proving that Lp = Lq.

We now merge together all states p, q satisfying the property that Lp = Lq. Since, by
Lemma 5.2, Fact 5.3 we have either Rp ∩ Rq = ∅ or Rp = Rq, merging p and q will not
change the function computed. After these merges, all states are a-recurrent.

We now ensure that merging these states preserves that states were recurrent for other
letters. Assume that the transducer was b-recurrent. Consider p and q to be merged; since
Lp = Lq, they are both in a cycle of b’s of the exact same length, say n. Let p(cid:48) ∈ p.bk and
q(cid:48) ∈ q.bk. We ﬁnish this proof by showing that Lp(cid:48) = Lq(cid:48), which implies that p(cid:48) and q(cid:48) are
also merged during the process.

For any u ∈ Lp(cid:48), we have ubn−k ∈ Lp = Lq. Hence, ubn is in Lq(cid:48). Since the transducer
is b-recurrent, then necessarily the unique state that can reach q by reading n letters b
backwards is itself, proving that u ∈ Lq(cid:48) and so Lp(cid:48) ⊆ Lq(cid:48). Symmetrically, Lq(cid:48) ⊆ Lp(cid:48),
of Fact 5.5.
entailing Lp(cid:48) = Lq(cid:48) and concluding the proof.

Proof of Fact 5.6. Let a be some letter and q be a state of the transducer. Consider two
states p, p(cid:48) in q.a. Since q.aω = {q}, it holds that p.aω−1 = {q}, and thus that p(cid:48) ∈ p.aω.
Hence p = p(cid:48), since p is a-recurrent.
of Fact 5.6.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:19

Proof of Fact 5.7. Let τ be a V-continuous utilitarian plurisubsequential transducer. Consider
an equation u =V v, a state q of τ , and let p = q.u and p(cid:48) = q.v. We show that p = p(cid:48),
concluding this point. We rely on the Syncing Lemma, since τ is V-continuous; it ensures in
particular that:

(τ•,q (cid:46)(cid:47) τ•,q) × (τp,• (cid:46)(cid:47) τp(cid:48),•) ⊆ EquV (u(cid:48), v(cid:48)) with u(cid:48) = τq,p(u), v(cid:48) = τq,p(cid:48)(v) .

(5.1)
Let (s, s, t1, t2) be in the left-hand side. We have that s · u(cid:48) · t1 =V s · v(cid:48) · t2, thus u(cid:48) · t1 =V v(cid:48) · t2
(here and in the following, we derive equivalent equations by appealing to the fact that the
free group is embedded, in a precise sense, in V [21, § 6.1.9]). Now consider another tuple
1 =V v(cid:48) · t(cid:48)
2) again in the left-hand side of Equation (5.1). It also holds that u(cid:48) · t(cid:48)
(s(cid:48), s(cid:48), t(cid:48)
2,
hence we obtain that t1 · t−1
. This is in turn equal in V to some α · β−1 such that α
and β are words that do not share the same last letter. This shows that t1 = α · t and t2 = β · t
for some word t, and similarly for t(cid:48)
2. More generally: (τp,• (cid:46)(cid:47) τp(cid:48),•) ⊆ (α, β) · Id, and
since τ is utilitarian, p = p(cid:48).
of Fact 5.7 and Lemma 5.4.

2 =V t(cid:48)

1 and t(cid:48)

1 · t(cid:48)−1
2

1, t(cid:48)

As an immediate corollary:

Corollary 5.8. For V ∈ {Gnil, Gsol, G}, any V-continuous rational function is V-realizable.

Theorem 5.9. Let V be a decidable variety of group languages that includes Gnil and that is
closed under inverse V-realizable rational functions. It is decidable, given an unambiguous
transducer, whether it realizes a V-continuous function. This holds in particular for Gsol
and G.

Proof. Lemma 5.4 together with Proposition 4.1 shows that a transducer is V-continuous iﬀ
its equivalent transducer eﬀectively computed by Lemma 5.4 is a V-transducer. This latter
property being testable, the result follows.

5.2. Deciding continuity for aperiodic varieties. We saw in Section 4.1 that the ap-
proach of the previous section cannot work: there is no correspondence between continuity
and realizability for aperiodic varieties. Herein, we use the Syncing Lemma to decide con-
tinuity in two main steps. First, note that all of our aperiodic varieties are deﬁned by an
inﬁnite number of equations for each alphabet. The Syncing Lemma would thus have us
check an inﬁnite number of conditions; our ﬁrst step is to reduce this to a ﬁnite number,
which we stress through the forthcoming notion of “pertaining triplet” of states. Second, we
have to show that the inclusion of the second point of the Syncing Lemma can eﬀectively be
checked. This will be done by simplifying this condition, and showing a decidability property
on rational relations.

We will need the following technical result in combinatorics on words in the proof of the

forthcoming Lemma 5.12:

Lemma 5.10. Let u, v, x, y, s, t ∈ A∗ be words satisfying:
(1) u · v, x · y ∈ s∗;
(2) v · u, y · x ∈ t∗;
(3) s and t are primitive.
There exist z, z(cid:48) ∈ A∗ such that:
(1) s = z · z(cid:48) and t = z(cid:48) · z;
(2) u, x ∈ s∗ · z;
(3) v, y ∈ t∗ · z(cid:48).

24:20

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

Proof. Write u = sc · z and v = z(cid:48) · sc(cid:48) such that s = z · z(cid:48). It follows that v · u ∈ (z(cid:48) · z)∗,
and since z(cid:48) · z is primitive, we have that t = z(cid:48) · z. We can do the same with x and y, letting
x = s ˙c · ˙z and y = ˙z(cid:48) · s ˙c(cid:48), with s = ˙z · ˙z(cid:48). The same reasoning then shows that t = ˙z(cid:48) · ˙z. Since
s has precisely |s| conjugates (by [11, Proposition 1.3.2]), we have that ˙z = z and ˙z(cid:48) = z(cid:48),
and the properties of the Lemma follow.

Deﬁnition 5.11. A triplet of states (p, q, q(cid:48)) is pertaining if there are words s, u, t and an
integer n such that:

un | β

p

u | β(cid:48)

s | x1

I

t | x2

F

s | y1

q

q(cid:48)

t | y2

un−1 | β(cid:48)(cid:48)

where · means “any word.” Further, a pertaining triplet is empty if, in the above picture,
β = β(cid:48)β(cid:48)(cid:48) = 1 and full if both words are nonempty; it is degenerate if only one of β or β(cid:48)β(cid:48)(cid:48)
is empty.

It is called “pertaining” as the second point of the Syncing Lemma elaborates on
properties of such a triplet, in particular, since uω = uω+1 is an equation of A. The following
characterization of A-continuity is then made without appeal to equations or proﬁnite words:

Lemma 5.12. A transducer τ : A∗ → B∗ is A-continuous iﬀ all of the following hold:
(1) τ −1(B∗) ∈ A(A∗);
(2) For all full pertaining triplets (p, q, q(cid:48)), there exist x, y ∈ B∗ and ρ1, ρ2 ∈ (B∗)2 such that

τ•,p (cid:46)(cid:47) τ•,q ⊆ Id · (cid:0)(x∗, x∗)ρ−1

(cid:1)

1

and τp,• (cid:46)(cid:47) τq(cid:48),• ⊆ (cid:0)ρ−1

2 (y∗, y∗)(cid:1) · Id;

(3) For all empty pertaining triplets (p, q, q(cid:48)), we have that (τ•,p (cid:46)(cid:47) τ•,q) · (τp,• (cid:46)(cid:47) τq(cid:48),•) ⊆ Id;
(4) No pertaining triplet is degenerate.

Proof. (Only if.) Suppose τ is A -continuous, and let us appeal to the Syncing Lemma.
Point 1 is then immediate. Point 2 is a direct consequence of the second point of the Syncing
Lemma and of Lemma 5.12.

We shall now check point 3, by contradiction. Let (p, q, q(cid:48)) be an empty pertaining
triplet; we use the notations of Deﬁnition 5.11. Then by functionality of τ , we have that
τ (s · uω · t) = x1 · x2 and τ (s · uω+1 · t) = y1 · y2. By the Preservation Lemma, and since
s · uω · t =A s · uω+1 · t, it should hold that x1 · x2 = y1 · y2, proving point 3.

Point 4 is proven using similar ideas as point 3: with (p, q, q(cid:48)) a degenerate pertaining
tuple, and using the same notations as above, either the production of s · uω · t going through
p is a not a ﬁnite word while the production of s · uω+1 · t through q, q(cid:48) is, or vice-versa. In
both cases, it is not possible for these productions to be equal in A, hence if such a case
happens, τ cannot be A-continuous.

(If.) We again rely on the Syncing Lemma, the ﬁrst point of which being satisﬁed by
hypothesis. Let uω = uω+1 be an equation of A with u a word; the set of such equations
deﬁnes A(A∗). Let p, q, p(cid:48), q(cid:48) be states such that p(cid:48) ∈ p.uω and q(cid:48) ∈ q.uω+1, and let s, t be

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:21

words with p, q ∈ q0.s and p(cid:48).t, q(cid:48).t ∈ F . To conclude and apply the Syncing Lemma, we need
to show that:

τ•,p(s) · τp,p(cid:48)(uω) · τp(cid:48),•(t) =A τ•,q(s) · τq,q(cid:48)(uω+1) · τq(cid:48),•(t) .
(This is a direct consequence of the way proﬁnite words are evaluated in a transducer, as per
Lemma 3.5.)

(5.2)

Consider a large number N = n!, so that p(cid:48) ∈ p.uN and q(cid:48) ∈ q.uN +1. With a large
enough N , there must be two states P and Q, and integers i, j with i + j = N , such that:
• P ∈ p.ui, p(cid:48) ∈ P.uj, and P ∈ P.uN (i.e., P is “between” p and p(cid:48), and belongs to a loop);
• Q ∈ q.ui, q(cid:48) ∈ Q.uj+1, and Q ∈ Q.uN .
(That such a pair exists can easily be seen on the product automaton of τ by itself: The
path from (p, q) to (p(cid:48), q(cid:48)(cid:48)) with q(cid:48) ∈ q(cid:48)(cid:48).u reading uN must go twice through the same pair of
states (P, Q), and this pair respects the above requirements.)

Now deﬁne the following words:

• α = τ•,P (s · ui), β = τP,P (uN ), γ = τP,•(uj · t),
• α(cid:48) = τ•,Q(s · ui), β(cid:48) = τQ,Q(uN ), γ(cid:48) = τQ,•(uj+1 · t).
Using the same reasoning as Lemma 3.6, and the unambiguity of τ , Equation (5.2) is
equivalent to:

α · βω−N · γ =A α(cid:48) · β(cid:48)ω−N · γ(cid:48) .
Naturally, since α · βω−N · γ =A α · βω · γ, and similarly for the right-hand side, Equation
(5.2) is equivalent to:

α · βω · γ =A α(cid:48) · β(cid:48)ω · γ(cid:48) .

To make use of the hypotheses of the present Lemma, deﬁne Q(cid:48) to be in Q.u and such

that Q ∈ Q(cid:48).uN −1: (P, Q, Q(cid:48)) is thus pertaining. The situation is then:

I

s | ·

s | ·

p

q

ui | ·

uN | β

P
u | β(cid:48)

uj | ·

Q

ui | ·

Q(cid:48)

uj | ·

uN −1 | β(cid:48)(cid:48)

p(cid:48)

q(cid:48)

t | ·

t | ·

F

Since by hypothesis this triplet cannot be degenerate, either both of β and β(cid:48) are empty,
or none are. Suppose they are both empty, then the hypothesis on empty triplets shows that:
τ•,P (s · ui) · τP,•(uN +j · t) = τ•,Q(s · ui) · τQ(cid:48),•(uN +j · t) .
The left-hand side evaluates to α · γ. Since τQ(cid:48),•(uN +j · t) = τQ(cid:48),Q(uN −1) · τQ,•(uj+1 · t) = γ(cid:48),
the right-hand side evaluates to α(cid:48) · γ(cid:48), and Equation (5.2) is thus satisﬁed.

Let us thus suppose that both β and β(cid:48) are nonempty. We divide β(cid:48) into b1b2 such that
b1 = τQ,Q(cid:48)(u) and b2 = τQ(cid:48),Q(uN −1). Now let x, y ∈ B∗ and ρ1, ρ2 ∈ (B∗)2 be the (pairs
of) words provided by point 2 for the triplet (P, Q, Q(cid:48)). Deﬁne L = Id · (cid:0)(x∗, x∗)ρ−1
(cid:1) and
1
R = (cid:0)ρ−1
2 (y∗, y∗)(cid:1) · Id. For any k ≥ 1, and letting η = s · ui+k×N and η(cid:48) = uk×N +j · t, it
holds by hypothesis that:

24:22

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

• (τ•,P (η), τ•,Q(η)) = (α · βk, α(cid:48) · β(cid:48)k) ∈ L;
• (τP,•(η), τQ(cid:48),•(η)) = (βk · γ, b2 · β(cid:48)k−1 · γ(cid:48)) ∈ R.
Let us ﬁrst emphasize an easy property of L and R:

(a)
(b)

Fact 5.13. If (w · w(cid:48), w · w(cid:48)(cid:48)) ∈ L with |w(cid:48)|, |w(cid:48)(cid:48)| > |x|, then (w(cid:48), w(cid:48)(cid:48)) ∈ L. Moreover, if
(w, w(cid:48)) ∈ L, then w is a preﬁx of w(cid:48) or vice-versa.

Similarly, if (w(cid:48) · w, w(cid:48)(cid:48) · w) ∈ R with |w(cid:48)|, |w(cid:48)(cid:48)| > |y|, then (w(cid:48), w(cid:48)(cid:48)) ∈ R. Moreover, if

(w, w(cid:48)) ∈ R, then w is a suﬃx of w(cid:48) or vice-versa.

Proof. We only show this for L, the case for R being similar.

For the ﬁrst part of the statement, the hypothesis ensures the existence of a word z,
integers n(cid:48), n(cid:48)(cid:48), and two preﬁxes x(cid:48), x(cid:48)(cid:48) of x such that w · w(cid:48) = z · xn(cid:48) · x(cid:48) and w · w(cid:48)(cid:48) = z · xn(cid:48)(cid:48) · x(cid:48)(cid:48).
If w is a preﬁx of z, the property is easy to verify. In the other cases, w = z · xn · χ for
some integer n < n(cid:48), n(cid:48)(cid:48) (strictness coming from the hypothesis) and x = χχ(cid:48). Hence
w(cid:48) = χ(cid:48) · xn(cid:48)−n−1 · x(cid:48) and w(cid:48)(cid:48) = χ(cid:48) · xn(cid:48)(cid:48)−n−1 · x(cid:48), and thus both belong to L. The case of R is
similar.

For the second part of the statement, w and w(cid:48) start with a common word z, then some
of Fact 5.13.

repetitions of x, and a preﬁx of x. Clearly, one has to be a preﬁx of the other.

We ﬁrst focus on the consequences of (a). First, since either α · βk is a preﬁx of α(cid:48) · β(cid:48)k
or vice-versa, we have that either α is a preﬁx of α(cid:48) · β(cid:48)k, or α(cid:48) a preﬁx of α · βk, for some k.
Suppose for instance that α(cid:48) = α · βc · βp, with β = βp · βs; the other case will be treated later.
Appealing to Fact 5.13, for k big enough, factoring out α(cid:48) yields that ((βsβp)k−c−1βs, β(cid:48)k) ∈ L.
Hence (βsβp)∗ and β(cid:48)∗ share common preﬁxes of unbounded length, implying that βsβp and
β(cid:48) are powers of a same primitive word z1 (by, e.g., [11, Proposition 1.3.5]).

Now similarly focusing on (b), we obtain that γ is a suﬃx of β(cid:48)k · γ(cid:48) or γ(cid:48) is a suﬃx of
p · β(cid:48)
s, again delaying
p are powers of a same primitive

βk · γ, for some k. Suppose for instance that γ = β(cid:48)
the other case. It follows, just as above, that β and β(cid:48)
word z2. Noting that (ηc)ω = ηω, for any η, Equation (5.2) is thus equivalent to:

s · β(cid:48)c(cid:48) · γ(cid:48), with β(cid:48) = β(cid:48)

sβ(cid:48)

α · zω

2 · β(cid:48)

s · β(cid:48)c(cid:48)

· γ(cid:48) =A α · βc · βp · zω

1 · γ(cid:48) .

2 · z(cid:48), βp ∈ z(cid:48) · z∗

Lemma 5.10 indicates that there exist words z, z(cid:48) such that z1 = z · z(cid:48), z2 = z(cid:48) · z, and
1. By eliminating α and γ(cid:48) we thus obtain that there are some integers
1 , which clearly
1

s ∈ z∗
β(cid:48)
n1, n2 such that Equation (5.2) is equivalent to zω
holds as both sides evaluate to (z(cid:48) · z)ω · z(cid:48).

2 · z(cid:48) · zn1×c(cid:48)

=A zn2×c
2

· z(cid:48) · zω

(Remaining cases.) We made two suppositions: α(cid:48) is a preﬁx of α, and γ is a suﬃx of γ(cid:48).
The case where α is a preﬁx of α(cid:48) and γ(cid:48) a suﬃx of γ is entirely symmetric. Let us keep our
supposition on α(cid:48) and assume that γ(cid:48) is a suﬃx of γ; the last remaining case is similar to
this one.

Let us thus write γ(cid:48) = ˙βs · βc(cid:48) · γ, with β = ˙βp · ˙βs. We then obtain, factoring out γ(cid:48)
this time, that (βk−c−1 ˙βp, β(cid:48)k) ∈ R. This implies that ( ˙βs ˙βp) and β(cid:48) are powers of the same
primitive word, which can only be z1. Writing z2 for the primitive root of β, Lemma 5.10
2 · z(cid:48), ˙βs ∈ z · z∗
shows the existence of words z, z(cid:48) such that z1 = z · z(cid:48), z2 = z(cid:48) · z, and βp ∈ z∗
2.
By eliminating α and γ, we similarly obtain that Equation (5.2) is equivalent, for some n1, n2,
to zω
2 , hence Equation (5.2)
of Lemma 5.12.
holds.

. Then both sides evaluate to zω

1 · ˙βs · zn2×c(cid:48)

2 =A zn1×c

· βp · zω

2

2

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:23

Example 5.14. We show that the transducer of Proposition 4.3 is A-continuous. Let τ be:

a | a

p

q

a | 1

First, the function is total, hence the ﬁrst point of Lemma 5.12 is satisﬁed. Second,
there are no empty nor degenerate pertaining triplets, hence the third and fourth points
are satisﬁed. Now the full pertaining triplets are (p, p, p), (p, p, q), (q, q, q), and (q, q, p).
We check that the pertaining triplet (p, p, q) satisﬁes the second condition of Lemma 5.12,
the other cases being similar or clear. The ﬁrst half of the condition is immediate. Now
τp,• (cid:46)(cid:47) τq,• = {(a(cid:98)n+1/2(cid:99), a(cid:98)n/2(cid:99)) | n ≥ 0} which satisﬁes the condition.

We now show that the property of Lemma 5.12 is indeed decidable:

Proposition 5.15. It is decidable, given a rational relation R ⊆ A∗ × A∗, whether there is
a word x ∈ A∗ and a pair ρ ∈ (A∗)2, such that R ⊆ Id · (cid:0)(x∗, x∗)ρ−1).

Proof. We rely on the classical result that it is decidable whether a rational relation is
included in the identity [23, p. 650].

We ﬁrst tackle a related, simpler decision problem: Given a rational relation R ⊆
(A∗ × A∗) and a word x ∈ A∗, check whether R ⊆ Id · (x∗, x∗). Write f : A∗ → A∗ for
the function that removes the longest suﬃx in x∗ of its argument, and note that f is a
rational function. Closure under inverse and composition of rational relations implies that
R(cid:48) = {(f (u), f (v)) | (u, v) ∈ R} is a rational relation computable from R. We have that
R(cid:48) ⊆ Id if and only if R ⊆ Id · (x∗, x∗), hence the decision problem at hand is equivalent to
checking whether R(cid:48) ⊆ Id, which is decidable.

We now reduce the main decision problem to the previous one.
First, we note that if a solution (x, ρ) exists, then there is another solution ( ˙x, ˙ρ) with one
component of ˙ρ empty. Indeed, write x(cid:48) = xρ−1
2 . Assume x(cid:48) is also a preﬁx of x(cid:48)(cid:48)
(the symmetric case being similar). We may thus write x = x(cid:48)y and x(cid:48)(cid:48) = x(cid:48)z, and have that
R ⊆ Id · (cid:0)(yx(cid:48))∗, (yx(cid:48))∗z(cid:1), showing that ˙x := yx(cid:48) and ˙ρ := (1, z−1yx(cid:48)) ﬁt the requirements.
We thus task ourselves with ﬁnding a solution (x, ρ) with ρ2 empty (the symmetric case
being similar). We ﬁrst check that R ⊆ Id. If this is not the case, we can compute a pair
(u, v) ∈ R \ Id (again by [23, p. 650]). All the suﬃxes of u are candidates for xρ−1
1 ; we go
through all these candidates x(cid:48) (including the empty word). We say that x(cid:48) is a valid choice
if it stems from a valid solution (x, ρ).

1 , x(cid:48)(cid:48) = xρ−1

Next, we verify that all pairs (u, v) ∈ R are such that u ends with x(cid:48) (this is decidable,
e.g., since R ∩ (cid:0)(A∗x(cid:48))c × A∗(cid:1) = ∅ is decidable [3, Proposition 2.6, Proposition 8.2]). If this
is not the case, then x(cid:48) is not a valid choice. Otherwise, let us write R(cid:48) = R · (x(cid:48), 1)−1, a
rational relation.

We now check again that R(cid:48) ⊆ Id; if it is the case, we are done and values of (x, ρ) can
be deduced. Otherwise, we are given a pair (u, v) ∈ R(cid:48) \ Id. Now if x(cid:48) is a valid choice, then
either u is a preﬁx of v, or vice-versa. In the former case, write v = u · z; if x(cid:48) is a valid
choice, then z ∈ x∗, and this provides us with candidates for x: all the possible roots z(cid:48) of
z. We may now test that one such z(cid:48) starts with x(cid:48), and check whether R ⊆ Id · (z(cid:48)∗, z(cid:48)∗)
using the above decision problem. If this holds, then there do exist an x and a ρ satisfying
R ⊆ Id · (cid:0)(x∗, x∗)ρ−1(cid:1). Moreover, if such words exist, this procedure will ﬁnd them.

24:24

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

Remark 5.16. In general, the problem of deciding, given a rational relation R and a
recognizable relation K, whether R ⊆ Id · K, is undecidable. Indeed, testing R ∩ Id = ∅ is
undecidable [3], and equivalent to testing:

R ⊆ Id · (cid:0)(A+ × {1}) ∪ ({1} × A+) ∪

(cid:91)

(a · A∗ × b · A∗)(cid:1) ,

a(cid:54)=b∈A

the right-hand side being of the form Id · K.

Theorem 5.17. It is decidable, given an unambiguous transducer, whether it realizes an
A-continuous function.

Proof. This is a consequence of Lemma 5.12: Given a transducer, one can list all its pertaining
triplets, and whether they are empty, full, or degenerate. For full pertaining triplets, the
property of Lemma 5.12 is checked with Proposition 5.15 and the same Proposition applied
on the reverse of the transducer. The property for empty triplets can be checked since the
inclusion of a rational relation in Id is decidable.

The rest of this section focuses on conditions à la Lemma 5.12 for J , R, L, and DA. In
each of these cases, we deﬁne the proper notion of “pertaining” and rewrite the conditions
of Lemma 5.12 to match the deﬁning equations. Since the proofs are simple variants of
that of Lemma 5.12, we omit them; we note that in each case, the conditions are eﬀectively
veriﬁable.

5.2.1. The case of J . We use a diﬀerent set of equations to deﬁne J , that can easily be
proved to be equivalent to the one given in the Preliminaries. Speciﬁcally, J is deﬁned over
any alphabet A by the set of equations xω = y · xω · z, with y, z ∈ alph(x). The deﬁnition of
“pertaining” then reads as follows:

Deﬁnition 5.18. For two alphabets C, D, a quadruplet of states (p, q, q(cid:48), q(cid:48)(cid:48)) is (C, D)-per-
taining if there are words s, u, t with alph(u) = C, words z, z(cid:48) ∈ C∗, and an integer n such
that:

s | ·

alph(u)∗
∈
z | ·

I

s | ·

q

un | β

p

q(cid:48)

un | β(cid:48)

t | ·

alph(u)∗
∈
z(cid:48) | ·

F

t | ·

q(cid:48)(cid:48)

and moreover alph(β) ∪ alph(β(cid:48)) = D. The pertaining quadruplet is empty if D = ∅; it is full
if alph(β) = alph(β(cid:48)) (cid:54)= ∅, and degenerate otherwise.

Lemma 5.19. A transducer τ : A∗ → B∗ is J -continuous iﬀ all of the following hold:
(1) τ −1(B∗) ∈ J (A∗);

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:25

(2) For all full (C, D)-pertaining quadruplets (p, q, q(cid:48), q(cid:48)(cid:48)):

(cid:16)

τ•,p (cid:46)(cid:47)
(cid:16)

τp,• (cid:46)(cid:47)

τ•,q · (cid:0)ε, τq,q(cid:48)(C∗)(cid:1) · τq(cid:48),q(cid:48)
τq(cid:48),q(cid:48) · (cid:0)ε, τq(cid:48),q(cid:48)(cid:48)(C∗)(cid:1) · τq(cid:48)(cid:48),•

(cid:17)

(cid:17)

⊆ Id · (D∗, D∗) and

⊆ (D∗, D∗) · Id ;

(3) For all empty (C, D)-pertaining quadruplets (p, q, q(cid:48), q(cid:48)(cid:48)):

(τ•,p · τp,•) (cid:46)(cid:47)

(cid:16)

τ•,q · (cid:0)ε, τq,q(cid:48)(C∗)(cid:1) · τq(cid:48),q(cid:48) · (cid:0)ε, τq(cid:48),q(cid:48)(cid:48)(C∗)(cid:1) · τq(cid:48)(cid:48),•

(cid:17)

⊆ Id ;

(4) No pertaining quadruplet is degenerate.

5.2.2. The case of R. Again, we slightly diverge from the usual equations for R, as presented
in the Preliminaries. Indeed, R is also deﬁned, over any alphabet A, by xω = xω · y with
y ∈ alph(x). We turn to the deﬁnition of “pertaining:”

Deﬁnition 5.20. For an alphabet C, a triplet of states (p, q, q(cid:48)) is C-pertaining if there are
words s, u, t with alph(u) = C, words z ∈ C∗, and an integer n such that:

un | β

s | ·

p

t | ·

I

s | ·

q

alph(u)∗
∈
z | ·

q(cid:48)

F

t | ·

un | β(cid:48)

The pertaining triplet is empty if, in the above picture, β = β(cid:48) = 1; it is full if none of β, β(cid:48)
is empty, and degenerate otherwise.

Lemma 5.21. A transducer τ : A∗ → B∗ is R-continuous iﬀ all of the following hold:
(1) τ −1(B∗) ∈ R(A∗);
(2) For all full C-pertaining triplets (p, q, q(cid:48)), there exist x ∈ B∗ and ρ ∈ (B∗)2 such that

both inclusions hold:

τ•,p (cid:46)(cid:47) τ•,q ⊆ Id · (cid:0)(x∗, x∗)ρ−1(cid:1) ,

τq,q · (cid:0)ε, τq,q(cid:48)(C∗)(cid:1) · τq(cid:48),•
(3) For all empty C-pertaining triplets (p, q, q(cid:48)):

τp,• (cid:46)(cid:47)

(cid:16)

(cid:17)

⊆ (cid:0)alph(x)∗, alph(x)∗(cid:1) · Id ;

(τ•,p · τp,•) (cid:46)(cid:47)

(cid:16)

τ•,q · (cid:0)ε, τq,q(cid:48)(C∗)(cid:1) · τq(cid:48),•

(cid:17)

⊆ Id ;

(4) No pertaining triplet is degenerate.

Note that the x of Proposition 5.15 can be eﬀectively found. The case of L can be simply
seen as the reversal of the previous case.

24:26

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

5.2.3. The case of DA. Similarly, we use a slightly less standard equational deﬁnition of DA.
Indeed, DA is also deﬁned, over any alphabet A, by xω = xω · y · xω with y ∈ alph(x). The
deﬁnition of “pertaining” reﬂects these equations:

Deﬁnition 5.22. For an alphabet C, a triplet of states (p, q, q(cid:48)) is C-pertaining if there are
words s, u, t with alph(u) = C, a word z ∈ C∗, and an integer n such that:

un | β

s | ·

p

t | ·

I

s | ·

q

alph(u)∗
∈
z | ·

q(cid:48)

F

t | ·

un | β(cid:48)

un | β(cid:48)(cid:48)

Further, a pertaining triplet is empty if, in the above picture, β = β(cid:48) = β(cid:48)(cid:48) = 1; it is
left-empty if only β(cid:48) is empty, right-empty if only β(cid:48)(cid:48) is empty, full if none of β, β(cid:48), β(cid:48)(cid:48) is
empty, and degenerate in the other cases.

Lemma 5.23. A transducer τ : A∗ → B∗ is DA-continuous iﬀ all of the following hold:
(1) τ −1(B∗) ∈ DA(A∗);
(2) For all full C-pertaining triplets (p, q, q(cid:48)), there exist x, y ∈ B∗ and ρ1, ρ2 ∈ (B∗)2 such

that these three inclusions hold:

τ•,p (cid:46)(cid:47) τ•,q ⊆ Id · (cid:0)(x∗, x∗)ρ−1
τp,• (cid:46)(cid:47) τq(cid:48),• ⊆ (cid:0)ρ−1

(cid:1) ,
2 (y∗, y∗)(cid:1) · Id ,

1

(3) For all empty C-pertaining triplets (p, q, q(cid:48)):

τq,q(cid:48)(C∗) ⊆ alph(x · y)∗ ;

(τ•,p (cid:46)(cid:47) τ•,q) · (ε, τq,q(cid:48)(C∗)) · (τp,• (cid:46)(cid:47) τq(cid:48),•) ⊆ Id ;
(4) For all right-empty C-pertaining triplets (p, q, q(cid:48)), there exist x, y ∈ B∗ and ρ1, ρ2 ∈ (B∗)2

such that:
τ•,p (cid:46)(cid:47) τ•,q ⊆ Id · (cid:0)(x∗, x∗)ρ−1

1

(cid:1)

and τp,• (cid:46)(cid:47) (cid:0)(ε, τq,q(cid:48)(C∗)) · τq(cid:48),•

(cid:1) ⊆ (cid:0)ρ−1

2 (y∗, y∗)(cid:1) · Id ;

(5) For all left-empty C-pertaining triplets (p, q, q(cid:48)), there exist x, y ∈ B∗ and ρ1, ρ2 ∈ (B∗)2

such that:
τ•,p (cid:46)(cid:47) (cid:0)τ•,q · (ε, τq,q(cid:48)(C∗))(cid:1) ⊆ Id · (cid:0)(x∗, x∗)ρ−1

1

(6) No pertaining triplet is degenerate.

(cid:1)

and τp,• (cid:46)(cid:47) τq(cid:48),• ⊆ (cid:0)ρ−1

2 (y∗, y∗)(cid:1) · Id ;

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:27

5.3. Deciding Com- and Ab-continuity. The case of COM and AB is comparatively much
simpler, in particular because these varieties are deﬁned using a ﬁnite number of equations
for each alphabet. However, the argument relies on diﬀerent ideas:

Theorem 5.24. For V = COM, AB, it is decidable, given an unambiguous transducer, whether
it realizes a V-continuous function.

Proof. We apply the Syncing Lemma. Its ﬁrst point is clearly decidable. We reduce its
second point to decidable properties about semilinear sets (see, e.g., [10]). We also rely on
the notion of Parikh image, that is, the mapping Pkh : A∗ → NA such that Pkh(w) maps
a ∈ A to the number of a’s in the word w.

Since every AB-continuous function is COM-continuous (Proposition 4.6), the conditions
to test for AB-continuity are included in those for COM-continuity—this can also be seen as a
consequence of the fact that if u, v are words, EquAB(u, v) = EquCOM(u, v).

Let τ : A∗ → B∗ be a given transducer. Consider an equation ab = ba and four states
p, p(cid:48), q, q(cid:48) of τ . Write u = τp,p(cid:48)(ab) and v = τq,q(cid:48)(ba). We ought to check, by the Syncing
Lemma, the inclusion in EquCOM(u, v) = {(s, s(cid:48), t, t(cid:48)) | s · u · t =COM s(cid:48) · v · t(cid:48)} of some input
synchronization. Now this set is the set of (s, s(cid:48), t, t(cid:48)) such that Pkh(s · u · t) = Pkh(s(cid:48) · v · t(cid:48)),
and is thus deﬁned by a simple semilinear property. The input synchronizations themselves,
e.g., τ•,p (cid:46)(cid:47) τ•,q, are rational relations, and their component-wise Parikh image is thus a
semilinear set. Since the inclusion of semilinear sets is decidable, the inclusion of the second
point of the Syncing Lemma is also decidable.

For AB, we should additionally check the equations aω = 1. The reasoning is similar.
Consider three states (p, p(cid:48), q), and write x · uω−1 · y for τp,p(cid:48)(aω). By commutativity and
the fact that uω−1 acts as an inverse of u in the equations holding in AB, we have that
(s, s(cid:48), t, t(cid:48)) ∈ EquAB(x · uω−1 · y, 1) iﬀ s · t =AB s(cid:48) · u · t(cid:48). This again reduces the inclusion of
the second point of the Syncing Lemma to a decidable semilinear property.

6. Discussion

We presented a study of continuity in functional transducers, on the one hand focused on
general statements (Section 3), on the other hand on continuity for classical varieties. The
heart of this contribution resides in decidability properties (Section 5), although we also
addressed natural and related questions in a systematic way (Section 4). We single out two
main research directions.

First, there is a sharp contrast between the genericity of the Preservation and Syncing
Lemma and the technicality of the actual proofs of decidability of continuity. To which extent
can these be uniﬁed and generalized? We know of two immediate extensions: 1. the generic
results of Section 3 readily apply to Boolean algebras of languages closed under quotient,
a relaxation of the conditions imposed on varieties, and 2. Proposition 4.1 and Lemma 5.4
can be shown to also hold for the varieties Gp of languages recognized by p-groups, hence
Gp-continuity is decidable for transducers. Beyond these two points, we do not know how to
show decidability for Gnil (which is the join of the Gp), and the surprising complexity of the
equalizer sets for some Burnside varieties (e.g., the one deﬁned by x2 = x3, see the Remark
on page 10) leads us to conjecture that continuity may be undecidable in that case, hence
that no uniﬁed way to show the decidability of continuity exists.

Second, the notion of continuity may be extended to more general settings. For instance,
departing from regular languages, it can be noted that every recursive function is continuous

24:28

M. Cadilhac, O. Carton, and C. Paperman

Vol. 16:1

for the class of recursive languages. Another natural generalization consists in studying
(V, W)-continuity, that is, the property for a function to map W-languages to V-languages
by inverse image. This would provide more ﬂexibility for a suﬃcient condition for cascades
of languages (or stackings of circuits, or nestings of formulas) to be in a given variety.

Acknowledgment. We are deeply indebted to Shaull Almagor, Jorge Almeida (in particular
for the Remark on page 10), Luc Dartois, Bruno Guillon (in particular for the Remark on
page 23), Ismaël Jecker, and Jean-Éric Pin for their insightful comments and kind help.

The ﬁrst and third authors are partly funded by the DFG Emmy Noether program

(KR 4042/2); the second author is funded by the DeLTA project (ANR-16-CE40-0007).

References

[1] Jorge Almeida. Some algorithmic problems for pseudovarieties. Publ. Math. Debrecen, 54(1):531–552,

1999.

[2] Jorge Almeida and Alfredo Costa. Equidivisible pseudovarieties of semigroups. Publ. Math. Debrecen,

90(3-4), 2017.

[3] Jean Berstel. Transductions and Context-Free Languages, volume 38 of Leitfäden der angewandten

Mathematik und Mechanik LAMM. Teubner, 1979.

[4] Janusz A. Brzozowski and Robert Knast. The dot-depth hierarchy of star-free languages is inﬁnite.
Journal of Computer and System Sciences, 16(1):37 – 55, 1978. doi:10.1016/0022-0000(78)90049-1.
[5] Michaël Cadilhac, Andreas Krebs, Michael Ludwig, and Charles Paperman. A circuit complexity approach

to transductions. In MFCS ’15, pages 141–153, 2015. doi:10.1007/978-3-662-48057-1_11.

[6] Laure Daviaud, Ismaël Jecker, Pierre-Alain Reynier, and Didier Villevalois. Degree of sequentiality of
weighted automata. In FOSSACS ’17, pages 215–230, 2017. doi:10.1007/978-3-662-54458-7_13.
[7] Laure Daviaud, Pierre-Alain Reynier, and Jean-Marc Talbot. A generalised twinning property for
minimisation of cost register automata. In LICS ’16, pages 857–866, 2016. doi:10.1145/2933575.
2934549.

[8] Emmanuel Filiot, Olivier Gauwin, and Nathan Lhote. First-order deﬁnability of rational transductions:
An algebraic approach. In LICS ’16, pages 387–396. ACM, 2016. doi:10.1145/2933575.2934520.
[9] Mai Gehrke, Serge Grigorieﬀ, and Jean-Éric Pin. Duality and Equational Theory of Regular Languages,

pages 246–257. Springer, 2008. doi:10.1007/978-3-540-70583-3_21.

[10] Seymour Ginsburg. The Mathematical Theory of Context-Free Languages. McGraw-Hill, Inc., New York,

NY, USA, 1966.

[11] M. Lothaire. Combinatorics on Words. Cambridge University Press, second edition, 1997.
[12] M. Lothaire. Algebraic combinatorics on words. Number 90. Cambridge University Press, 2002.
[13] Jean-Éric Pin. Mathematical Foundations of Automata Theory. 2016.
[14] Jean-Éric Pin and Jacques Sakarovitch. Some operations and transductions that preserve rationality. In

Theoretical Computer Science, pages 277–288. Springer, 1982. doi:10.1007/BFb0036488.

[15] Jean-Éric Pin and Jacques Sakarovitch. Une application de la representation matricielle des transductions.

Theoretical Computer Science, 35:271 – 293, 1985. doi:10.1016/0304-3975(85)90019-2.

[16] Jean-Éric Pin and Pedro V. Silva. A topological approach to transductions. Theoretical Computer

Science, 340(2):443 – 456, 2005. doi:10.1016/j.tcs.2005.03.029.

[17] Jean-Éric Pin and Pedro V. Silva. On proﬁnite uniform structures deﬁned by varieties of ﬁnite monoids.
Int. J. of Algebra and Computation, 21(01n02):295–314, 2011. doi:10.1142/S0218196711006170.
[18] Jean-Éric Pin and Pedro V. Silva. On uniformly continuous functions for some proﬁnite topologies.

Theoretical Computer Science, 658, Part A:246 – 262, 2017. doi:10.1016/j.tcs.2016.06.013.

[19] Jean-Éric Pin and Pascal Weil. Proﬁnite semigroups, Mal’cev products and identities. Journal of Algebra,

182(3):604–626, 1996.

[20] Christophe Reutenaeur and Marcel-Paul Schützenberger. Variétés et fonctions rationnelles. Theoretical

Computer Science, 145(1–2):229–240, July 1995. doi:10.1016/0304-3975(94)00180-Q.

[21] Derek J.S. Robinson. A Course in the Theory of Groups. Springer, 2 edition, 1995.

Vol. 16:1

CONTINUITY OF FUNCTIONAL TRANSDUCERS

24:29

[22] Jacques Sakarovitch. Sur la déﬁnition du produit en couronne. Codages et Transductions, G. Pirillo

(éd.), pages 285–299, 1979.

[23] Jacques Sakarovitch. Elements of automata theory. Cambridge University Press, 2009.
[24] Klaus Schneider. Veriﬁcation of Reactive Systems: Formal Methods and Algorithms. Springer, 2004.
[25] Howard Straubing. Finite Automata, Formal Logic, and Circuit Complexity. Birkhäuser, Boston, 1994.
[26] Pascal Tesson and Denis Thérien. Logic meets algebra: the case of regular languages. Logical Methods in

Computer Science, 3(1), 2007.

This work is licensed under the Creative Commons Attribution License. To view a copy of this
license, visit https://creativecommons.org/licenses/by/4.0/ or send a letter to Creative
Commons, 171 Second St, Suite 300, San Francisco, CA 94105, USA, or Eisenacher Strasse
2, 10777 Berlin, Germany

