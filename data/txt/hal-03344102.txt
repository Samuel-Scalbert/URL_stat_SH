Facilitating Heterogeneous Dataset Understanding
Nelly Barret

To cite this version:

Nelly Barret. Facilitating Heterogeneous Dataset Understanding. BDA 2021 - informal publication
only, Oct 2021, Paris, France. ￿hal-03344102￿

HAL Id: hal-03344102

https://hal.science/hal-03344102

Submitted on 14 Sep 2021

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Facilitating Heterogeneous Dataset Understanding

Nelly Barret
Inria & Institut Polytechnique de Paris
nelly.barret@inria.fr

ABSTRACT
The era of Big Data and data sharing has lead to very large volumes
of data becoming available to users across the world. This data
is heterogeneous in its modelling, format and quality. Taking full
advantage of such data raises many challenges, in particular related
to the integration and the understanding of such data. My PhD
thesis, started in January 2021, seeks to develop novel methods to
help users without advanced IT skills discover a new dataset, by
(𝑖) building an abstract understanding of the data, as consisting
of records and collections, (𝑖𝑖) interpreting or classifying the data
based on users’ interests, and leveraging Information Extraction
and Natural Language tools.

1 INTRODUCTION
Since the last decades, the Open Data Initiative has led to an in-
creasing number of publicly-spread datasets. Such datasets are often
quite large and heterogeneous (depending on the source provider,
the field, the kind of data, etc). Many such datasets are large; further,
they are extremely heterogeneous, in particular for what concerns
their data model (RDF, JSON, XML, CSV, property graphs, relational
databases, etc.), their schema (if a schema exists), etc. The scale
and heterogeneity make it challenging for human users to identify,
among the many available datasets, those that could be used for a
given application they have in mind.

This thesis is part of the ConnectionLens project [1], which aims
at integrating heterogeneous data into a graph. Our goal is to create
small expressive descriptions of what a dataset is about, using the
power of integration of ConnectionLens. In this paper, we present
the challenges (Section 2), then the approach (Section 3) and finally
some preliminary results (Section 4) before concluding (Section 5).
2 CHALLENGES
Finding the right dataset is complicated, especially because they
are often not well-documented and it can be difficult to appreciate
how it can be useful. Our approach, which aims at helping users to
choose a dataset, should satisfy the following requirements:

• R1: The approach should be applicable to any kind of
data. There are various data formats, such as RDF (as in the
Open Data Cloud), but also XML (as in the PubMed database),
JSON (most of French open data), relational databases, and
so on. This requirement is handled by Section 3.1.

• R2: The data descriptions we build for users should be
sufficiently expressive, but also compact. Users need
to understand what is inside a dataset, but when a full de-
scription is complex, we need to bring them only the most
important facts about it. We discuss how to fulfil this require-
ment in Sections 3.2 and 3.3.

3 APPROACH
ConnectionLens is a system capable to produce a graph 𝐺 from any
dataset of any format, where each node is a piece of data and edges

link these nodes to reflect the content of the original source. More-
over, an entity extraction process is applied on text nodes, to extract
from them named entities, such as Person, Location, Organization,
Date, etc. In my thesis, to be able to produce compact descriptions of
any data format, we leverage ConnectionLens to start our summa-
rization method from the graph 𝐺. Our approach is the following:
(1) Build a structural summary of 𝐺. The structural sum-
mary 𝐺 ′ is a graph computed out of 𝐺, potentially much
smaller than 𝐺, and which gives us a first idea of groups
of nodes that may contain similar information: each such
group of 𝐺 nodes is represented by a single node in 𝐺 ′.
(2) Find collections and records. Starting from the summary,
we seek to identify the nodes that represent records, that is,
objects of a certain “kind” with some internal structure, and
collections, that is, containers of potentially many records of
the same “kind”.

(3) Categorize collections. Finally, we aim at classifying collec-
tions among a set of categories K, containing (𝑖) the kind(s)
of data that the user is looking for, if the user can formu-
late such a request, e.g., “Books”, or “Places to visit”, and/or
(𝑖𝑖) a set of generic categories we pre-define, such as Person,
Organization, Location, Event and Creative work. The cate-
gorization adds a limited form of semantics (we keep things
simple on purpose since we assume non-technical users),
and enable adapting to the users’ interest.

3.1 Summarization
We explain now how we compute the summary 𝐺 ′ of 𝐺. For effi-
ciency, we distinguish two cases: rooted, acyclic data source graphs,
vs. the general case where graphs may have cycles and/or may not
have a root.

Rooted acyclic graphs. These graphs are obtained for instance
from XML or JSON datasets. On such graphs, we apply the strong
DataGuide summarization method [4] to create 𝐺 ′ from 𝐺. A Dataguide
is a concise summary of the structure of a database. This method
builds a set of paths, such that each path of the DAG appears exactly
once in the summary. Such summarization method works only on
acyclic graphs because the recursion should not encounter a cycle.
General graphs. Such graphs can originate in RDF, property
graphs, or relational database datasets (where primary-foreign keys
can lead to cyclic connections between the tuples). For such graphs,
we need a graph summarization method that (𝑖) reflects all the
graph, (𝑖𝑖) groups nodes into equivalence classes and (𝑖𝑖𝑖) can be
computed efficiently even from large graphs. RDFQuotient [3], orig-
inally introduced for RDF but easy to adapt to arbitrary graphs,
meets these criteria, thus we rely on it to compute the summary 𝐺 ′
of 𝐺 for non-acyclic graphs. RDFQuotient gives a set of equivalence
classes between nodes based on their types and their properties.

3.2 Records and Collections
We seek to understand 𝐺 ′ based on two key concepts:

• A Record is basically a thing; in data modelling terms, it
describes either an entity or a relationship. It has some prop-
erties (e.g. a title and a DOI for a paper) and can handle
nested collections (e.g. the authors list of a paper).

• A Collection is a set of similar records (e.g. a bibliography is
a collection of books). They are explicit when a node handles
similar records; or implicit when some records refer to the
same purpose without being handled by a node.

Other nodes in 𝐺 ′ are called Sub-Records and are mainly the
properties of the records (i.e. the set of outgoing properties of a
record 𝑟 , referred as 𝑟 .P). Furthermore, we compute the signature
of each sub-record 𝑠, where the signature is compound of a domain
(“to which categories 𝑠 belongs to?") and a range (“to which categories
𝑠 points to?"). For example, the sub-record settledDownIn has for
domain {Person, Organization} and for range {Location}.

To find them, we first determine collections and then, in a top-
down fashion, the direct children of collections are identified as
records. To compute collections, we rely on a clustering algorithm
we devised, based on the support of a set of properties among
a set of potential records (how many of these records have this
set of properties). Our clustering algorithm identifies both explicit
collections, where a 𝐺 ′ node is actually the parent of all the nodes
representing the records in the collection, and implicit collections,
where such a common parent/collection node does not exist in 𝐺 ′.

3.3 Analysis and Categorization of Collections
Given a set of hints H and a set of user-defined categories K, we
aim at categorizing a collection 𝑐 among K, i.e. give a category
𝑘 ∈ K to 𝑐 using H , as illustrated by Algorithm 1. A hint ℎ is a
triple ⟨𝐴, 𝑙, 𝐵⟩ where A is the domain ⊆ K, 𝑙 is the label and 𝐵 is the
range ⊆ K. For instance, the hint ⟨Organization, hasCEO, Person⟩
states that a collection having a record holding the property hasCEO,
whose signature’s range matches Person, should be categorized as
an Organization.

For each record 𝑟 ∈ 𝑐, we initialize K𝑟 (set of candidate categories
in which 𝑟 may belong) and scores (score of 𝑛𝑐 for each hint in H ).
Then, if 𝑟 has a label semantically close to one of the category in K,
this category is stored as a candidate category in K𝑟 . For each child
𝑛𝑐 ∈ 𝑟 , we create a pair 𝜋 containing the label and the signature
of 𝑛𝑐. Then, we compute the similarity of 𝜋 with each hint ℎ in H ,
where the similarity is based on the label and the signature of both
elements. We choose the hint ℎ leading to the highest similarity
score for each 𝜋. Each category indicated by the domain of ℎ gets
a vote. Then, we classify 𝑟 in the category that gets the highest
number of votes or Other if no category is frequent enough. Finally,
we classify 𝑐 in the most represented category in its records. We
also determine if a collection describes entities or relationships, by
looking at the connections between the collections.
4 STATUS
We have fully implemented our approach in a prototype, which
leverages the graph creation and storage of ConnectionLens [1],
and includes the novel algorithms described in Section 3. More
details can be found in a short paper [2].

Figure 1 shows an example of our approach applied on a set of
PubMed articles. The set of articles is considered as a collection of
Creative Work. Moreover, the authors are identified as a collection
of Persons.

Nelly Barret

Algorithm 1: Classifying a collection 𝑐
Input: a collection 𝑐, hints H, categories K
Output: a category 𝑘 ∈ K or Other

1 foreach 𝑟 ∈ C do
2

K𝑟 ← ∅
scores ← ∅
foreach 𝑘 ∈ K do

if the similarity between 𝑘 and the label of 𝑟 is higher than a threshold then

K𝑟 ← K𝑟 ∪ {𝑘 }

3

4
5
6

7
8

9
10

11

12

foreach 𝑛𝑐 ∈ 𝑟 .children do

𝜋 ← (𝑛𝑐.𝑙𝑎𝑏𝑒𝑙, 𝑛𝑐.𝑠𝑖𝑔𝑛𝑎𝑡𝑢𝑟𝑒)
foreach ℎ ∈ H do

scores ← scores (cid:208)(ℎ, 𝑠𝑖𝑚 (𝜋, ℎ))

bestHint ← argmax(scores)
K𝑟 ← K𝑟 ∪ { bestHint.domain }

Classify 𝑟 in the most frequent 𝑘 ∈ K𝑟 , or Other
13
14 Classify 𝑐 with the most frequent category of its records

Figure 1: Example of 𝐺 ′, an abstract graph with collections
and categorized records.

5 CONCLUSION AND PERSPECTIVES
My PhD thesis aims to create expressive descriptions of big het-
erogeneous datasets by using summarization methods and catego-
rization of expressive structures (records and collections). Beyond
finalizing the implementation of our platform for all the data models
we consider (notably, beyond XML and RDF, also JSON and prop-
erty graphs), we will experiment to analyse its scalability as well as
the expressiveness and precision of the record categorization. Next,
we will investigate the adoption of sampling-based approaches, to
try to construct such dataset descriptions without traversing the
dataset entirely, in order to further improve performance.
Thesis context My PhD is funded by DIM RFSI and is a collab-
oration between Inria and WeDoData, a SME specialized in data
visualization and interactive data-driven Web content. My PhD ad-
visers are Ioana Manolescu (Inria) and Karen Bastien (WeDoData).
Acknowledgments. This work is funded by DIM RFSI PHD 2020-
01 and AI Chair SourcesSay project (ANR-20-CHIA-0015-01) grants.

REFERENCES
[1] A. C. Anadiotis, O. Balalau, C. Conceicao, H. Galhardas, M. Y. Haddad, I. Manolescu,
T. Merabti, and J. You. Graph integration of structured, semistructured and un-
structured data for data journalism. Information Systems, July 2021.

[2] N. Barret, I. Manolescu, and P. Upadhyay. Toward generic abstractions for data of

any model. 2021. Short paper, accepted for publication at BDA 2021.

[3] F. Goasdoué, P. Guzewicz, and I. Manolescu. RDF graph summarization for first-

sight structure discovery. The VLDB Journal, 29(5), Apr. 2020.

[4] R. Goldman and J. Widom. Dataguides: Enabling query formulation and optimiza-

tion in semistructured databases. In VLDB, 1997.

