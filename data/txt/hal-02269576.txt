On the Height of Towers of Subsequences and Prefixes
Stěpán Holub, Tomáš Masopust, Michaël Thomazo

To cite this version:

Stěpán Holub, Tomáš Masopust, Michaël Thomazo. On the Height of Towers of Subsequences and
Prefixes. Information and Computation, 2019, ￿10.1016/j.ic.2019.01.004￿. ￿hal-02269576￿

HAL Id: hal-02269576

https://inria.hal.science/hal-02269576

Submitted on 23 Aug 2019

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

On the Height of Towers of Subsequences and Preﬁxes(cid:73)

ˇStˇep´an Holuba,1,∗, Tom´aˇs Masopustb,2, Micha¨el Thomazoc,3

aCharles University, Sokolovsk´a 83, 175 86 Praha, Czech Republic
bInstitute of Mathematics, Czech Academy of Sciences, ˇZiˇzkova 22, 616 62 Brno, Czechia
cInria, France

Abstract

A tower is a sequence of words alternating between two languages in such a way that every word is a subsequence
of the following word. The height of the tower is the number of words in the sequence. If there is no inﬁnite tower
(a tower of inﬁnite height), then the height of all towers between the languages is bounded. We study upper and
lower bounds on the height of maximal ﬁnite towers between two regular languages with respect to the size of the
NFA (respectively the DFA) representation. Our motivation to study the bounds on maximal ﬁnite towers comes
from a method to compute a piecewise testable separator of two regular languages. We show that the upper bound is
polynomial in the number of states and exponential in the size of the alphabet, and that it is asymptotically tight if the
size of the alphabet is ﬁxed. If the alphabet may grow, then, using an alphabet of size approximately the number of
states of the automata, the lower bound on the height of towers is exponential with respect to that number. In this case,
there is a gap between the lower and upper bound, and the asymptotically optimal bound remains an open problem.
Since, in many cases, the constructed towers are sequences of preﬁxes, we also study towers of preﬁxes.

Keywords: Automata, languages, alternating towers, subsequences, preﬁxes, upper and lower bounds
2010 MSC: 68R05, 68Q45

1. Introduction

A tower between two languages is a sequence of words alternating between the languages in such a way that
every word is a subsequence of the following word. The number of words in a tower is the height of the tower. As a
consequence of a more general result [3, Lemma 6], the existence of towers of arbitrary height implies the existence
of an inﬁnite tower. Therefore, if there is no inﬁnite tower, the height of all towers is bounded.

Although we believe that the maximal height of towers between two regular languages is an interesting topic on its
own, our motivation comes from the construction of a piecewise testable separator of two regular languages [3, 6, 12].
It was independently shown by Czerwi´nski et al. [3] and Place et al. [12] that the non-separability by piecewise testable
languages is equivalent to the existence of a common pattern in the two automata (called an (u, B)-path in Place et
al. [12] and synchronized languages in Czerwi´nski et al. [3]). This pattern is further equivalent to the existence of an
inﬁnite tower between the languages [3], and its existence can be detected in polynomial time. Deciding piecewise
testable separability is thus in PTime. The problem is also hard for PTime [10]. A similar pattern has recently been
identiﬁed for general word languages [4].

To actually construct a separator is a more diﬃcult problem. Place et al. [12] construct the separator as a union of
∼κ-equivalence classes, where u ∼κ v if and only if the words u and v have the same set of subsequences of length up to

(cid:73)A preliminary version of this work was presented at the MFCS 2014 conference [6].
∗Corresponding author
Email addresses: holub@karlin.mff.cuni.cz ( ˇStˇep´an Holub), masopust@math.cas.cz (Tom´aˇs Masopust),

michael.thomazo@inria.fr (Micha¨el Thomazo)

1Research supported by the Czech Science Foundation grant number 13-01832S
2Research supported by the by DFG in Emmy Noether grant KR 4381/1-1 (DIAMOND), and by RVO 67985840.
3Research supported by the Alexander von Humboldt Foundation

Preprint submitted to Elsevier

July 28, 2018

Upper bound

Lower bound

Upper bound

Lower bound

NFAs

DFAs

µ|Σ|+1 − 1
µ − 1

|Σ| = k

|Σ| ≥ n + m

Θ (cid:16)

µk(cid:17)

Ω (2n+m)

NFAs

DFAs

(2n−1)(2m−1)+1
2

nm
2

+ 1

|Σ| = 2
(cid:32)
(cid:113)
2

2ν
log 2ν

(cid:33)

Ω

nm
2

+ 1

|Σ| ≥ n + m

2n+m−2

nm
2

+ 1

(a) Towers of subsequences over Σ; µ = max(n, m)

(b) Towers of preﬁxes; ν = min(n, m)

Table 1: Upper and lower bounds on the height of towers of subsequences and preﬁxes for automata with n and m states

κ. The diﬃcult part is to ﬁnd a suitable κ. Place et al. [12] ﬁnd such a κ that is exponential in the size of the automaton
and doubly exponential in the size of the alphabet. The separator is then κ-piecewise testable and it can be constructed
as the union of ∼κ classes that cover one of the languages. Our present research is motivated by a diﬀerent approach,
which we brieﬂy describe in Subsection 2.1. The relation between the maximal height of towers and the number κ of
Place et al. is an interesting question. The number of classes of the equivalence relation ∼κ indeed depends on κ and
was investigated by Karandikar et al. [9]. In Subsection 2.2, we show that, in some sense, κ provides an upper bound
on the maximal height of towers, and that κ can be arbitrarily larger than the maximal height of towers.

Not much is known about the upper bound on the height of towers between two regular languages if no inﬁnite
tower exists. The only result we are aware of is a result by Stern [13] giving an exponential upper bound 2|Σ|2n on the
height of towers between a piecewise testable language over an alphabet Σ represented by an n-state minimal DFA
and its complement. In this paper, we give a better bound that holds in a general setting of two arbitrary regular
languages (having no inﬁnite tower) represented by NFAs. We show in Theorem 1 that the upper bound on the height
of towers between two regular languages represented by NFAs is polynomial with respect to the depth of the NFAs
and exponential with respect to the size of the alphabet.

Considering the lower bound, in Theorem 2 we ﬁrst improve an existing bound for binary regular languages [6].
Theorems 4 and 5 and Corollary 6 then show that the upper bound is asymptotically tight if the alphabet is ﬁxed,
for both NFAs and DFAs. If the alphabet may grow with the depth of the automata, Theorem 4 shows that we can
achieve an exponential lower bound for NFAs with respect to the number of states. The same is shown for DFAs in
Theorem 7. Notice that it does not contradict the polynomiality of the upper bound with respect to the number of
states because the automata require an alphabet of size approximately the number of states. These lower bounds are
not asymptotically equal to the upper bound and it is not known what the (asymptotically) tight bound is, cf. Open
Problem 1. Speciﬁcally, we do not know whether an alphabet of size greater than the number of states may help to
build higher towers. In Theorems 8 and 9, we show how to transform general NFAs to DFAs preserving the height of
towers.

Surprisingly, it turns out that the towers we construct to demonstrate lower bounds are mostly sequences of pre-
ﬁxes. Therefore, we also investigate towers of preﬁxes. We provide a pattern that characterizes the existence of an
inﬁnite tower of preﬁxes in Theorem 10. We further prove tight bounds on the height of towers of preﬁxes in The-
orem 13 for DFAs and in Theorem 16 for NFAs. We then discuss towers of preﬁxes between two binary NFAs in
Corollary 17.

Our main results are summarized in Table 1. We also formulate the following two open problems:

1. What is the tight bound on the height of towers of subsequences for two NFAs (DFAs) over an alphabet that

may grow with the number of states? See Open Problem 1 below.

2. What is the tight bound on the height of towers of preﬁxes for NFAs over a ﬁxed (binary) alphabet? See Open

Problem 2.

2

2. Preliminaries

The cardinality of a set Σ is denoted by |Σ| and its power set by 2Σ. The free monoid generated by Σ is denoted by
Σ∗. An element of Σ∗ is called a word; the empty word is denoted by ε. For a word w ∈ Σ∗, alph(w) ⊆ Σ denotes the
set of all letters occurring in w, and |w|a denotes the number of occurrences of letter a in w.

A nondeterministic ﬁnite automaton (NFA) is a quintuple A = (Q, Σ, δ, I, F), where Q is the ﬁnite nonempty set
of states, Σ is the alphabet, I ⊆ Q is the set of initial states, F ⊆ Q is the set of accepting states, and δ : Q × Σ → 2Q
is the transition function that can be extended to the domain 2Q × Σ∗ in the usual way. The language accepted by A
is the set L(A) = {w ∈ Σ∗ | δ(I, w) ∩ F (cid:44) ∅}. A path π from a state q0 to a state qn under a word a1a2 · · · an, for
some n ≥ 0, is a sequence of states and input letters q0, a1, q1, a2, . . . , qn−1, an, qn such that qi+1 ∈ δ(qi, ai+1) for all
i = 0, 1, . . . , n − 1. The path π is accepting if q0 ∈ I and qn ∈ F, and it is simple if the states q0, q1, . . . , qn are pairwise
w
−→ q(cid:48) to denote
distinct. The number of states on the longest simple path in A is called the depth of A. We write q
that q(cid:48) ∈ δ(q, w) and say that there exists a path from state q to state q(cid:48) under the word w, or labeled by the word w.
w
The NFA A has a cycle over an alphabet Γ ⊆ Σ if there exists a state q and a word w over Γ such that q
−→ q. A path
π contains a cycle over Γ if q

w
−→ q is a subpath of π for some state q and alph(w) = Γ.

The NFA A is deterministic (DFA) if |I| = 1 and |δ(q, a)| ≤ 1 for every q in Q and a in Σ. Note that we allow
some transitions to be undeﬁned. In the sequel, we consider only automata without useless states, that is, automata
where every state appears on an accepting path. In other words, if it is necessary to add a sink state in order to obtain
a complete automaton, such a sink state is not considered when counting the number of states.

For two words v = a1a2 · · · an and w ∈ Σ∗a1Σ∗a2Σ∗ · · · Σ∗anΣ∗, we say that v is a subsequence of w or that v can
be embedded into w, denoted by v (cid:52) w. A word v ∈ Σ∗ is a preﬁx of w ∈ Σ∗, denoted by v ≤ w, if w = vu for some
u ∈ Σ∗.

We deﬁne towers of subsequences as a generalization of Stern’s alternating towers between a language and its
i=1 of words is a tower of subsequences between L and

complement [13]. For two languages L and R, a sequence (wi)r
R if w1 ∈ L ∪ R and, for all i < r,

1. wi (cid:52) wi+1,
2. wi ∈ L implies wi+1 ∈ R, and
3. wi ∈ R implies wi+1 ∈ L.

Similarly, a sequence (wi)r
wi ∈ L implies wi+1 ∈ R, and wi ∈ R implies wi+1 ∈ L.

i=1 of words is a tower of preﬁxes between L and R if w1 ∈ L ∪ R and, for all i < r, wi ≤ wi+1,

The number of words in the sequence, r, is the height of the tower. If r = ∞, then we speak about an inﬁnite tower
between L and R. The languages L and R are not necessarily disjoint. However, if there is a word w ∈ L ∩ R, then
there is a trivial inﬁnite tower w, w, w, . . .. If the languages are clear from the context, we usually omit them. By a
tower between two automata, we mean a tower between their languages.

In what follows, if we talk about towers without a speciﬁcation, we mean towers of subsequences. If we mean

towers of preﬁxes, we always specify it explicitly.

2.1. Computing a piecewise testable separator

In this section, we brieﬂy describe our approach to compute a piecewise testable separator that motivates the

investigation of this paper.

For a word w = a1a2 · · · a(cid:96), where ai ∈ Σ, let up(w) denote the language Σ∗a1Σ∗a2Σ∗ · · · Σ∗a(cid:96)Σ∗ of all superse-
quences of w (the upward closure). For a language L, let up(L) = (cid:83)
w∈ML up(w), where
ML is the set of minimal elements of L with respect to (cid:52), which is ﬁnite by Higman’s Lemma [5]. A regular language
is piecewise testable if it is a ﬁnite boolean combination of upward closures of some words. Then, up(L) is piecewise
testable for any L. If the words used in the boolean combination are of length at most k, then the language is called
k-piecewise testable.

w∈L up(w). Then up(L) = (cid:83)

Let L and R be two disjoint languages over Σ. To construct a piecewise testable language K ⊇ L disjoint from
R (called a piecewise testable separator), we choose up(L) as the ﬁrst approximation of K. Typically, up(L) is not
disjoint from R and, therefore, we try to ﬁx it by putting R1 = up(L) ∩ R and taking K0 = up(L) \ up(R1). Although

3

K0 is obviously disjoint from R, it may not be a superset of L, namely if L1 = L ∩ up(R1) is not empty. We therefore
repeat the construction for L1, and construct another “layer” of K deﬁning R2 = up(L1) ∩ R and K1 = up(L1) \ up(R2).
In this way, we obtain a sequence K0, K1, K2, . . . of piecewise testable sets deﬁned by L0 = up(L) and by

Ri+1 = up(Li) ∩ R,
Li+1 = up(Ri+1) ∩ L,

Ki = up(Li) \ up(Ri+1) .

i≥0 Ki. Deﬁnitions imply that w ∈ Ri+1 if and only if there is a tower w1 (cid:52) w(cid:48)
1

Finally we deﬁne K = (cid:83)
(cid:52)
= w between L and R. Therefore, if the maximum height of a tower between L and R is r ≤ 2 j − 1,
· · · (cid:52) wi (cid:52) w(cid:48)
i
then R j+1 is empty. Then K j = up(L j) and K = (cid:83) j
i=0 Ki is the piecewise testable separator we are looking for. Notice
that the complexity of the above construction depends on the maximal height of the tower between L and R, which
motivates our study on the upper and lower bounds on the height of ﬁnite towers.

(cid:52) w2 (cid:52) w(cid:48)
2

2.2. The height of towers versus the number κ

Recall that Place et al. [12] construct a number κ for which the separator is κ-piecewise testable. In this section,
we show that the number κ provides, in some sense, an upper bound on the maximal height of towers, and that κ can
be arbitrarily larger than the maximal height of towers.

We ﬁrst show that the maximal height of ﬁnite towers is bounded by the number of classes of the relation ∼κ.
Let L and R be two separable regular languages, and let κ be such that every class of the relation ∼κ has a nonempty
intersection with at most one of the languages L and R. Let w1 (cid:52) w2 (cid:52) w3 be a part of a tower, where w1, w3 ∈ L,
w2 ∈ R, and w1 ∼κ w3 be two elements of the tower that belong to the same ∼κ-class. Let subκ(w) denote all
subsequences of w of length up to κ. Then subκ(w1) ⊆ subκ(w2) ⊆ subκ(w3) = subκ(w1) implies that w1 ∼κ w2. This
means that both w1 and w2 belong to the same class of the ∼κ relation, and hence this class has a nonempty intersection
with both L and R, which is a contradiction. Thus, every ∼κ-class contains at most one element of the tower.

To show that κ can be arbitrarily larger than the height of the maximal ﬁnite tower, let c be a constant, and let
L1 = {w | |w| = c} and L2 = {w | |w| = 2c} be two languages over {0, 1}, where the DFA representations have c + 1 and
2c + 1 states. Then the height of the maximal tower is two and our algorithm computes a piecewise testable separator
K = {w | c ≤ |w| < 2c} = up(L1) \ up(L2) in one step using time that is easily seen to be polynomial in c. On the
other hand, the optimal κ is c + 1. Therefore, the method of Place et al. [12] needs to check 2Θ(c log c) classes in order
to construct the separator [9]. This also illustrates the fact that L1 being piecewise testable itself is not helpful in
general. Indeed, deciding whether the language of an NFA is κ-piecewise testable is a PSpace-complete problem even
if the NFA is of a very restricted form [11].

2.3. The height of towers versus the number of words in the boolean combination deﬁning separators

The complexity of a separator K can also be measured by the number of elementary languages of the form up(w)
needed in the boolean expression deﬁning K. Let F be the set of words such that K is a boolean combination
of languages up(w), where w ∈ F. For each word u ∈ Σ∗, the truth value of u ∈ K is determined by the set
σ(u) = {w ∈ F | u ∈ up(w)}. In particular, σ(u) = σ(v) implies that u ∈ K if and only if v ∈ K. Observe that u (cid:52) u(cid:48)
implies that σ(u) ⊆ σ(u(cid:48)). We now deduce that σ(w1) (cid:40) σ(w2) (cid:40) · · · (cid:40) σ(wr) ⊆ F for any tower (wi)r
i=1 between two
languages L and R, and hence |F| ≥ r − 1.4 This means that any such a boolean expression requires at least as many
elements as is the height of the maximal tower. The required number of elements then follows from our lower-bound
results.

3. Upper bound on the height of towers of subsequences

Let two languages over Σ be given, represented as NFAs with n and m states. As already mentioned in the intro-
duction, it is known that there is either an inﬁnite tower between the languages, or the height of towers is bounded [3].

4We thank an anonymous reviewer of an earlier version of this paper for pointing this out.

4

We now estimate that bound in terms of µ = max{n, m} and k = |Σ|. Stern’s bound for minimal DFAs is 2k2µ. Our new
bound is O
and holds for NFAs. Consequently, if the alphabet is ﬁxed, our bound is polynomial with
respect to the number of states; otherwise, it is exponential in the size of the alphabet.

µk(cid:17) = O

2k log µ(cid:17)

(cid:16)

(cid:16)

Before stating our upper-bound result, we recall that the depth of an automaton is the number of states on the

longest simple path, and hence it is bounded by the number of states of the automaton.

Theorem 1. Let A0 and A1 be NFAs with n and m states, respectively, over an alphabet Σ. Assume that there is no
inﬁnite tower between the languages L(A0) and L(A1), and let (wi)r
i=1 be a tower between the languages such that
wi ∈ L(Ai mod 2). Let 1 < µ ≤ max(n, m) denote the maximum of the depths of A0 and A1. Then r ≤ µ|Σ|+1−1
µ−1 .

Proof. To prove the upper bound, we assign to each wi of the tower an integer Wi in such a way that 0 ≤ W1 < W2 <
· · · < Wr < µ|Σ|+1−1
µ−1 . To this aim, we deﬁne a factorization of wr using an accepting path of wr in Ar mod 2. Then we
inductively deﬁne factorizations of all wi, 1 ≤ i < r, depending on an accepting path of wi in Ai mod 2 and on the
factorization of wi+1. The value of Wi is derived from these factorizations.

We now deﬁne the concepts we need in the proof. We say that a sequence (v1, v2, . . . , vk) of nonempty words is a
cyclic factorization of w = v1v2 · · · vk with respect to some path π from a state q to a state q(cid:48) under w in an automaton
vi−→ qi contains a
A if π can be decomposed into qi−1
cycle over alph(vi). We call vi a letter factor if it is a letter and qi−1 (cid:44) qi, and a cycle factor otherwise. Note that our
cyclic factorization is closely related to the factorization by Almeida [1], see also Almeida [2, Theorem 8.1.11], and
also to factorizations used in [12].

vi−→ qi , i = 1, 2, . . . k, and either vi is a letter, or the path qi−1

We now show that if π is a path q

w
−→ q(cid:48) in some automaton A with depth µ, then w has a cyclic factorization
(v1, v2, . . . , vk) with respect to π that contains at most µ cycle factors and at most µ − 1 letter factors. Moreover,
if k > 1, then alph(vi) is a strict subset of alph(w) for each cyclic factor vi, i = 1, 2, . . . , k. We call such a cyclic
factorization nice. By convention, the empty sequence is a nice cyclic factorization of the empty word with respect to
the empty path.

Consider a path π of the automaton A from q to q(cid:48) labeled by a word w. Let q0 = q and deﬁne the factorization
(v1, v2, . . . , vk) inductively by the following greedy strategy. Assume that we have deﬁned the factors v1, v2, . . . , vi−1
v1v2···vi−1
such that w = v1 · · · vi−1w(cid:48) and q0
−−−−−−−→ qi−1. The factor vi is deﬁned as the label of the longest possible initial
w(cid:48)
−→ q(cid:48) such that either πi contains a cycle over alph(vi) or πi = qi−1, a, qi, where vi = a is a
segment πi of the path qi−1
letter. Such a factorization is well deﬁned, and it is a cyclic factorization of w.

Let pi, for i = 1, 2, . . . , k, be a state such that the path qi−1

vi−→ qi contains a cycle pi → pi over the alphabet
alph(vi) if vi is a cycle factor, and pi = qi−1 if vi is a letter factor. If pi = p j with i < j such that vi and v j are cycle
vivi+1···v j
−−−−−−→ q j contains a cycle pi → pi from pi
factors, then we have a contradiction with the maximality of vi since qi−1
to pi over the alphabet alph(vivi+1 · · · v j). Therefore, the factorization contains at most µ cycle factors.

Note that vi is a letter factor only if the state pi, which is equal to qi−1 in such a case, has no reappearance in the
vi···vk−−−−→ q(cid:48). This implies that there are at most µ − 1 letter factors. Finally, if alph(vi) = alph(w) for a cyclic
path qi−1
factor vi, then vi = v1 = w follows from the maximality of v1. Therefore (v1, v2, . . . , vk) is a nice cyclic factorization
of w.

We are now ready to execute the announced strategy. Let (cid:0)vr,1, vr,2, . . . , vr,kr
(cid:1) be a nice cyclic factorization of wr
with respect to some accepting path in the automaton Ar mod 2. Given a (not necessarily nice) cyclic factorization
(vi,1, vi,2, . . . , vi,ki) of wi, i = 2, 3, . . . , r, the factorization (cid:0)vi−1,1, vi−1,2, . . . , vi−1,ki−1
(cid:1) of wi−1 is deﬁned as follows. Let
(cid:52) vi, j for each j = 1, 2, . . . , ki. Such words (possibly empty) exist, since we have that
wi−1 = v(cid:48)
i,2 · · · v(cid:48)
i,ki
wi−1 (cid:52) wi. Let πi, j be paths under v(cid:48)

i, j that together form an accepting path of wi−1 in Ai−1 mod 2. Then

, where v(cid:48)
i, j

i,1v(cid:48)

(vi−1,1, vi−1,2, . . . , vi−1,ki−1) =

ki(cid:89)

j=1

(cid:16)
i, j,1, v(cid:48)(cid:48)
v(cid:48)(cid:48)

i, j,2, . . . , v(cid:48)(cid:48)

i, j,mi, j

(cid:17)

,

(cid:16)
i, j,1, v(cid:48)(cid:48)
v(cid:48)(cid:48)

(cid:17)

i, j,2, . . . , v(cid:48)(cid:48)

where
concatenation of sequences. Note that if vi, j is a letter factor of wi then either mi, j = 0 (if v(cid:48)
v(cid:48)(cid:48)
i, j,1 is a letter factor of wi−1.

i, j with respect to πi, j and the product denotes the
i, j is empty) or mi, j = 1 and

is a nice cyclic factorization of v(cid:48)

i, j,mi, j

5

To deﬁne Wi, let g be the function g(x) = µ µx−1

µ−1 , and let f (vi, j) = 1 if vi, j is a letter factor, and f (vi, j) = g

if vi, j is a cycle factor. We now set

(cid:16)(cid:12)(cid:12)(cid:12)alph(vi, j)

(cid:17)
(cid:12)(cid:12)(cid:12)

j=1
The key property of g is that g(x + 1) = µ · g(x) + (µ − 1) + 1. (In fact, this equality and g(0) = 0 deﬁnes g.) The
deﬁnition of a nice factorization implies that if (v1, v2, . . . , vk) is a nice factorization of w with k > 1, then

ki(cid:88)

(cid:17)

(cid:16)

f

vi, j

.

Wi =

k(cid:88)

i=1

f (vi) ≤ µ · g

(cid:16)(cid:12)(cid:12)(cid:12)alph(w)

(cid:12)(cid:12)(cid:12) − 1

(cid:17) + (µ − 1) < g

(cid:16)(cid:12)(cid:12)(cid:12)alph(w)
(cid:12)(cid:12)(cid:12)

(cid:17)

.

Applying this to the nice factorizations deﬁned above, we obtain

mi, j(cid:88)

(cid:96)=1

(cid:17)

(cid:16)
v(cid:48)(cid:48)
i, j,(cid:96)

f

≤ f

(cid:17)

(cid:16)

vi, j

for all i = 2, 3, . . . , r and j = 1, 2, . . . , ki. In particular,

Wr =

kr(cid:88)

(cid:96)=1

f (cid:0)vr,(cid:96)

(cid:1) ≤ g

(cid:16)(cid:12)(cid:12)(cid:12)alph(wr)
(cid:12)(cid:12)(cid:12)

(cid:17)

≤ g(|Σ|) < g(|Σ|) + 1 = µ|Σ|+1 − 1
µ − 1

.

(1)

(2)

Moreover, we have equality in (1) if and only if mi, j = 1, alph
letter factors, or cyclic factors. We deduce that Wi−1 ≤ Wi, i = 2, 3, . . . , r, and, moreover, Wi−1 = Wi if and only if

, and both vi, j and v(cid:48)(cid:48)

i, j,1 are either

v(cid:48)(cid:48)
i, j,1

vi, j

(cid:16)

(cid:17) = alph

(cid:16)

(cid:17)

• ki−1 = ki,
• alph(vi, j) = alph(vi−1, j) for all j = 1, 2, . . . , ki, and
• for all j = 1, 2, . . . , ki, vi, j is a letter factor if and only if vi−1, j is a letter factor.

We show that if these conditions are met for some i, then there is an inﬁnite tower between A0 and A1. Let Z be the
language of words z1z2 · · · zki such that z j = vi, j if vi, j is a letter factor, and z j ∈ (alph(vi, j))∗ if vi, j is a cycle factor. In
particular, wi, wi−1 ∈ Z. Since wi ∈ L(Ai mod 2) and wi−1 ∈ L(Ai−1 mod 2), the deﬁnition of a cycle factor implies that,
for each z ∈ Z, there exist z(cid:48) ∈ L(A0) ∩ Z such that z (cid:52) z(cid:48) and z(cid:48)(cid:48) ∈ L(A1) ∩ Z such that z (cid:52) z(cid:48)(cid:48). The existence of an
inﬁnite tower follows.

As a trivial case, consider the situation where all factors in question are letter factors. Then wi = wi−1, and the
languages are not disjoint, which yields the inﬁnite tower consisting of the shared word. As a more complicated
example, assume that ki−1 = ki = 2, and let wi−1 = cab · b, wi = aabbcc · b be the corresponding nice factorizations
where factors cab and aabbcc are cyclic with cycles labeled with cab and abbc. Then (cab)∗b ⊆ L(Ai−1 mod 2) and
a(abbc)∗c b ⊆ L(Ai mod 2). The inﬁnite tower is now for example cabb (cid:52) a(abbc)3cb (cid:52) (cab)13b (cid:52) a(abbc)39cb (cid:52)
· · · .

We have therefore proved that Wi−1 < Wi, which together with (2) completes the proof.

The question is how good this bound is. We study this question next and show that it is tight if the alphabet is ﬁxed.
If the alphabet grows with the number of states of the automata, then we can construct a tower of exponential height
with respect to the number of states of the automata (as well as with respect to the size of the alphabet). However, we
do not know whether this bound is tight. We formulate this question as the following open problem asking how much
the size of the alphabet can increase the height of the tower, given the number of states (or the depth). In Theorem 1,
the alphabet plays an important role. It is a natural and very intriguing question, what the potential of the alphabet
really is.

Open Problem 1. Let A0 and A1 be NFAs with n and m states, respectively, over an alphabet Σ with |Σ| ≥ n + m.
Let µ be the maximum depth of A0 and A1. Assume that there is no inﬁnite tower between the languages L(A0) and
L(A1), and let (wi)r

i=1 be a tower between them. Is it true that r ≤ µn+m+1−1

or even that r ≤ 2n+m?

µ−1

6

b

4

a

b

3

b

2

a

b

1

a

a

0

b

b

0A

0

b

a

1

5

b

b

2

4

b

b

3

Figure 1: Automata Ad and Be of Theorem 2 for d = e = 5

4. Lower bounds on the height of towers

The upper bound of Theorem 1, as well as its proof, indicate that the size of the alphabet is signiﬁcant for the
height of towers. This is conﬁrmed by lower bounds considered in this section. We consider two cases, namely (i) the
size of the alphabet is ﬁxed and (ii) the size of the alphabet may grow with the size of the automata. We show that the
upper bound of Theorem 1 is asymptotically tight if the size of the alphabet is ﬁxed, and that the lower bound may be
exponential with respect to the size of the automata if the alphabet may grow. In this case, the size of the alphabet is
approximately the number of states of the automata. However, the precise upper bound for this case is left open, cf.
Open Problem 1.

To warm up, we start with the binary alphabet. The upper bound of Theorem 1 gives n2 + n + 1 in this case, and
it is known to be tight up to a linear factor [6]. Namely, for every odd positive integer n, there are two binary NFAs
with n − 1 and n states having a tower of height n2 − 4n + 5 and no inﬁnite tower. We now improve this bound.

Theorem 2. For every positive integer d and every odd positive integer e, there exists a binary NFA with d + 1 states
and a binary DFA with e + 1 states having a tower of height d(e + 1) + 2 and no inﬁnite tower.

Proof. We deﬁne the automata Ad and Be with d + 1 and e + 1 states, respectively, as depicted in Figure 1 for
d = e = 5. The NFA Ad = ({0, 1, . . . , d − 1} ∪ {0A}, {a, b}, δd, {0, 1, . . . , d − 1}, {0}) consists of an a-path through the
states d − 1, . . . , 0, of self-loops under b in all states 1, . . . , d − 1, and of a b-cycle from 0 to 0A and back to 0. The
DFA Be = ({0, 1, . . . , e}, {a, b}, δe, 0, {i | 1 ≤ i ≤ e and i is odd}) consists of a b-path through the states 0, 1, . . . , e and
of an a-transition from state e to state 0. All odd states are accepting.

Consider the word w = (bea)d−1be+1. Note that Ad accepts all preﬁxes of w ending with an even number of b’s,
including those ending with a, and the empty preﬁx. On the other hand, the automaton Be accepts all preﬁxes of w
ending with an odd number of b’s. Moreover, the automaton Be accepts the word (bea)d−1beab. Hence the sequence
(wi)|w|+2
i=1 , where, for i = 1, 2, . . . , |w| + 1, wi is the preﬁx of w of length i − 1, and w|w|+2 = (bea)d−1beab is a tower
between Ad and Be of height |w| + 2 = (e + 1)(d − 1) + e + 1 + 2 = d(e + 1) + 2.

We show that there is no higher tower between the languages, in particular, there is no inﬁnite tower. Notice that
any word in L(Be) is a preﬁx of a word in (bea)∗. As the languages are disjoint (they require a diﬀerent parity of the
b-tail), any tower (wi)r
i=1 is
larger than d(e + 1) + 2 the word wd(e+1)+1 or wd(e+1)+2 is in L(Be) and therefore contains at least d occurrences of letter
a. However, no such word can be embedded into a word of L(Ad), since each word of L(Ad) contains at most d − 1
occurrences of letter a.

i=1 is strictly increasing with respect to (cid:52) and thus |wi| ≥ i − 1. Thus if the height of (wi)r

As a consequence of Theorem 2, we obtain the following lower bound on the height of binary towers.

Corollary 3. For every even positive integer n, there exists a binary NFA with n states and a binary DFA with n states
having a tower of height n2 − n + 2 and no inﬁnite tower.

Proof. Set d = e = n − 1 in Theorem 2.

The construction used in Theorem 2 reveals the main mechanism behind high towers. The automaton Ad bounds
the number of possible occurrences of letter a (by d − 1) but it is very generous concerning letter b. On the other
hand, the automaton Be requires at least one a for each sequence of e occurrences of letter b. This general strategy is

7

employed in a more complicated way in the following two theorems, which eventually allow to show that the upper
bound from Theorem 1 is asymptotically tight, even for deterministic automata.

Theorem 4. For all integers n, m ≥ 2 there exist two NFAs with n and m states over an alphabet of cardinality n+m−2
having a tower of height 2n+m−2 − 2m−2 + 1 and no inﬁnite tower.

Proof. For k ≥ 0, let Σk = {b, a1, a2, . . . , ak} and Γk = {c1, c2, . . . , ck} be alphabets (with Σ0 = {b} and Γ0 = ∅). We
deﬁne two NFAs An,m and Bn,m over Σn−1 ∪ Γm−2 as follows.

The set of states of the NFA An,m is Qn = {0, 1, 2, . . . , n − 1}. All states are initial, and state 0 is the unique

accepting state. The transition function of An,m consists of

• a self-loop under Σ j−1 for all states j with j > 0,

• an ai-transition i to j if 0 ≤ j < i, and

• transitions under Γm−2 from state 0 to each state j > 0.

The NFA A5,m is shown in Figure 2.

Γm−2

Γm−2

b, a1, a2, a3

b, a1, a2

b, a1

Γm−2
b

4

a4

3

a4

a3

a4

a2

1

a2

a3

2

a3

a4

Figure 2: Automaton A5,m of Theorem 4

Γm−2

a1

0

The NFA Bn,m has the state set Qm = {0, 1, 2, . . . , m − 2} ∪ {0B}. All states are initial, except for state 0B, which, in

turn, is the unique accepting state. The transitions of Bn,m consist of

• self-loops under Σn−1 ∪ Γ j−1 for all states j with j > 0, and of self-loops under Σn−1 in state 0,
• a ci-transition from i to j if 0 ≤ j < i, and from i to 0B, and
• transitions under Γm−2 ∪ {b} from 0 to 0B.

The NFA Bn,6 is shown in Figure 3.

We now deﬁne a word un+m−3b such that all its preﬁxes form a tower. To do this, we ﬁrst inductively deﬁne a word
k and |uk| = 2k+1 − 2. We now use the word un−1 to
un−1 so that u0 = ε and uk = uk−1bakuk−1 for 0 < k < n. Then uk ∈ Σ∗
deﬁne, for 0 < p ≤ m − 2, a word un+p−1 = un+p−2cpun+p−2. Then un+p−1 ∈ (Σn−1 ∪ Γp)∗ and |un+p−1| = 2n+p − 2p − 1.
Finally, the word un+m−3b is of length 2n+m−2 − 2m−2, therefore it has 2n+m−2 − 2m−2 + 1 preﬁxes.

We now show that the preﬁxes of un+m−3b form a tower between the languages. Namely, we show by induction on
p that every preﬁx v of un+p−1b is accepted by An,m if it ends with a letter from Σn−1 \ {b}, and it is accepted by Bn,m
from a state smaller than p + 1 if it ends with a letter from Γm−2 ∪ {b}.

For p = 0, any preﬁx v of un−1b ending with b is accepted by Bn,m from state 0. The empty word is accepted by
An,m in 0. If v is nonempty and ending with a letter from Σn−1 \ {b}, then it is of the form v = uk−1bakv(cid:48) with k > 0

8

Σn−1 ∪ Γ3

Σn−1 ∪ Γ2

Σn−1 ∪ Γ1

Σn−1

Σn−1

4

c4

3

c4

c3

c4

2

c3

c4

c2

c3

1

c2

c4

c1

0

Γm−2 ∪ {b}

0B

c1

c2

c3

Figure 3: Automaton Bn,6 of Theorem 4

where v(cid:48) is a preﬁx of uk−1. We show by induction on |v| that v is accepted by An,m from state k. By the induction
hypothesis, v(cid:48) is accepted by An,m from some state k(cid:48) < k. Then v is accepted by An,m by the path

uk−1b
−−−−−→ k

ak−−−→ k(cid:48)

k

v(cid:48)
−−→ 0 .

In particular, un−1 is accepted by An,m from the state n − 1.

Let now p ≥ 1 and consider the word un+p−1b. By induction, the claim holds for preﬁxes of un+p−2b and un+p−2 is
accepted in An,m from state n − 1. Let v be a preﬁx of un+p−1b of the form un+p−2cpv(cid:48) where v(cid:48) is a preﬁx (possibly
empty) of un+p−2b. If v(cid:48) ends with a letter from Σn−1 \ {b}, then An,m accepts v(cid:48) from a state k(cid:48) by the induction
hypothesis. Then the whole preﬁx v is accepted in An,m by the path

n − 1

un+p−2
−−−−−→ 0

cp−−−→ k(cid:48)

v(cid:48)
−−→ 0 .

If v(cid:48) ends with a letter from Γp ∪ {b}, then it is accepted by Bn,m from a state p(cid:48) < p by the induction hypothesis. Then
the whole preﬁx v is accepted by Bn,m by the path

This shows the claimed height of the tower.

un+p−2
−−−−−→ p

cp−−−→ p(cid:48)

v(cid:48)
−−→ 0 .

p

i ∈ Σ∗

It remains to show that there is no inﬁnite tower. We ﬁrst show that there is no inﬁnite tower over the alphabet
Σn−1 and then that there is no inﬁnite tower over the alphabet Σn−1 ∪ Γm−2. Suppose the contrary, and let k ≥ 0 be the
smallest integer such that there is an inﬁnite tower over Σk. Since ε, b is the highest tower over Σ0, we have k ≥ 1.
Since every word of L(An,m) ∩ Σ∗
k contains at most one occurrence of the letter ak, we can consider, without loss of
i=1 in which every wi contains exactly one occurrence of ak. Let wi = w(cid:48)(cid:48)
i akw(cid:48)
generality, an inﬁnite tower (wi)∞
i, where
w(cid:48)
i, w(cid:48)(cid:48)
i is accepted by An,m
i=1 is an inﬁnite tower over Σk−1; a contradiction.
i)∞
(by Bn,m resp.) if wi is accepted by An,m (by Bn,m resp.). Then (w(cid:48)
Thus, let p ≥ 1 be the smallest integer such that there is an inﬁnite tower over Σn−1 ∪ Γp. Similarly as above, since
each word from (Σn−1 ∪ Γp)∗ accepted by the automaton Bn,m contains at most one occurrence of cp, we can choose
an inﬁnite tower (wi)∞
i with
i, w(cid:48)(cid:48)
w(cid:48)
i is accepted by An,m (by Bn,m resp.) if wi is
accepted by An,m (by Bn,m resp.). Then (w(cid:48)

i=1 such that all words have exactly one occurrence of the letter cp. Let wi = w(cid:48)(cid:48)

k−1. Since all transitions under ak lead to an initial state in both automata, the word w(cid:48)

i ∈ (Σn−1 ∪ Γp−1)∗. A direct inspection of the automata yields that w(cid:48)

i=1 is an inﬁnite tower over Σn−1 ∪ Γp−1; a contradiction.
i)∞

i cpw(cid:48)

Remark 1. As pointed out, the tower constructed in the previous proof is actually a tower of preﬁxes. Theorem 4
therefore still holds if “tower” is replaced with “tower of preﬁxes”.

The following theorem adapts the previous construction for deterministic automata.

Theorem 5. For all integers k ≥ 1, d ≥ 2 and every odd positive integer e, there exist two DFAs with (k + 1)d + k − 1
and e + 1 states over an alphabet of cardinality k + 1 having a tower of height (e + 1)dk + 2dk−1 and no inﬁnite tower.

9

Proof. For every k ≥ 1, let Σk = {b, a1, a2, . . . , ak}. We deﬁne two DFAs Ak,d and Bk,e over Σk as follows. The set of
j = 0, 1, 2, . . . , d − 1} ∪ {m(cid:48) | m = 2, . . . , k} ∪ {(1, i(cid:48)) | i =
states of the DFA Ak,d is Qk,d = {(m, j) | m = 1, 2, . . . , k;
0, 1, . . . , d − 1}. State (k, d − 1) is initial, and states (1, j), j = 0, . . . , d − 1, are accepting. The transition function of
Ak,d consists of

• an ai-transition from each (i, j) to (i, j − 1), and from (i, 0) to states (i − 1, d − 1) if i > 1 and j > 0,
• an a1-transition from (1, j(cid:48)) to (1, j − 1) if 1 ≤ j ≤ d − 1,
• a transition from (i, d − 1) to i(cid:48) and back under a1 if i ≥ 2,
• a b-transition from (1, j) to (1, j(cid:48)) and back if 0 ≤ j ≤ d − 1,
• self-loops in (i, j) under Σi−1 if i ≥ 2 and 0 ≤ j ≤ d − 2, and
• self-loops under ai in states i(cid:48) if i ≥ 2.

See Figure 4 for an example.

Σ2

Σ1

3, 1

a3

3, 0

a3

2, 1

a2

2, 0

a2

1, 1

1, 0

a1

a1

a1

a1

b

b

a1

b

b

3(cid:48)

a3

2(cid:48)

a2

1, 1(cid:48)

1, 0(cid:48)

Figure 4: Automaton A3,2 of Theorem 5

The DFA Bk,e has the states {0, 1, . . . , e}. State 0 is initial and states with odd numbers are accepting. The
transitions of Bk,e contain b-transitions from state i to state i+1 for each 0 ≤ i ≤ e−1, a transition under {a1, a2, . . . , ak}
from state e to state 0, and a self-loop in state 0 under {a1, a2, . . . , ak}, see Figure 5 for an illustration.

Σk \ {b}

Σk \ {b}

0

b

1

b

2

b

3

b

4

b

5

Figure 5: Automata Bk,5 of Theorem 5

We now show by induction on k that there is a tower of height (e + 1)dk + 2dk−1 between Ak,d and Bk,e. For k = 1,
the automata A1,d and B1,e have the tower of preﬁxes of the word u = (bea1)d−1 be with two additional words: ub
accepted by A1,d, and ua1be accepted by B1,e in the state e. The tower has the required height (e + 1)d + 2.

Let now k ≥ 2 and let (wk−1,i)(cid:96)

where wk−1,1 is accepted by Ak−1,d and wk−1,(cid:96) is accepted by Bk−1,e in the state e. Let uk, j = (a1aka1) jad− j
We show that (wk,i)d(cid:96)

i=1, with (cid:96) = (e + 1)dk−1 + 2dk−2, be a tower between the automata Ak−1,d and Bk−1,e,
(cid:1) j.

(cid:0)wk−1,(cid:96)ak

k

i=1 with

wk, j(cid:96)+m = uk, jwk−1,m,

j = 0, 1, . . . , d − 1, m = 1, 2, . . . , (cid:96),

is a tower between the automata Ak,d and Bk,e, where wk,1 is accepted by Ak,d and wk,d(cid:96) is accepted by Bk,e in the state
e.

10

Since wk−1,(cid:96) ∈ Σ∗

k−1, it is straightforward to verify that, for each j = 0, . . . , d − 1, the word uk, j is a label, in Ak,d,

of a path from (k, d − 1) to (k − 1, d − 1): if j = 0, then

(k, d − 1)

ad
k−−−→ (k − 1, d − 1) ,

and if 0 < j, then the path is

(k, d − 1)

(a1aka1) j
−−−−−−−→ (k, d − 1)

ad− j
k−−−−→ (k, j − 1)

(wk−1,(cid:96)ak) j
−−−−−−−−→ (k − 1, d − 1) .

In Bk,e, each uk, j is a label for a cycle starting and ending in the state 0; namely,

(a1aka1) jad− j
−−−−−−−−−−→ 0

k

0

wk−1,(cid:96)−−−−−→ e
ak−−−→ 0
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
j−times

.

This implies, by induction and by the construction of the automata, that wk,i are accepted as required. By induction,

we have that wk, j(cid:96)+m (cid:52) wk, j(cid:96)+m+1 for each 1 ≤ m < (cid:96), and the deﬁnition of uk, j implies that also

wk, j(cid:96) = (a1aka1) j−1ad− j+1

k

(cid:0)wk−1,(cid:96)ak

(cid:1) j−1 wk−1,(cid:96) (cid:52) (a1aka1) jad− j

k

(cid:0)wk−1,(cid:96)ak

(cid:1) j wk−1,1 = wk, j(cid:96)+1.

This completes the proof that (wk,i)d(cid:96)

i=1 is a tower with required properties.

It remains to show that there is no inﬁnite tower. For k = 1, the proof is similar to the corresponding part of
Theorem 2. Namely, any word from L(A1,d) contains at most d occurrences of a1. Looking at Bk,e, we obtain an
upper bound on the length of words in the tower. For the sake of contradiction, let now k > 1 be the smallest number
such that there exists an inﬁnite tower (wi)∞
i=1 between Ak,d and Bk,e for some d and e. Suppose, ﬁrst, that for all i,
wi ∈ {a1, ak}∗w(cid:48)
i. This implies that after reading the
i)∞
{a1, ak}∗ part, Ak,d is in (k − 1, d − 1) and that Bk,e is in 0. Thus (w(cid:48)
i=1 is an inﬁnite tower between Ak−1,d and Bk−1,e;
(cid:52) wi for some i, where c ∈ Σk \ {a1, ak}.
a contradiction. Let now t > 1 be the largest integer such that a word cat
k
It is straightforward to verify that cad
k cannot be embedded into any word from L(Ak,d), hence t < d. Without loss
i w(cid:48)
of generality, we can suppose that cat
is the shortest preﬁx of wi, such that
i
k
i)∞
cat
i=1 is again a tower between Ak−1,d and Bk−1,e; a contradiction.
k

k−1. We may assume that a1 is not the ﬁrst letter of w(cid:48)

(cid:52) wi for all i. Let wi = w(cid:48)(cid:48)

k−1, and (w(cid:48)

i where w(cid:48)(cid:48)

i . Then w(cid:48)

i where w(cid:48)

i ∈ Σ∗

i ∈ Σ∗

(cid:52) w(cid:48)(cid:48)

As a corollary, we have that the upper bound of Theorem 1 is tight for a ﬁxed alphabet even for DFAs.

Corollary 6. Let k ≥ 2 be a constant. Then the maximum height of a tower between two DFAs with at most n states
over an alphabet of cardinality k having no inﬁnite tower is in Ω (cid:16)
Proof. For a suﬃciently large n, let k(cid:48) = k − 1, d = (cid:106) n−k(cid:48)
exist two DFAs with at most n states having a tower of height at least (n − 1)dk(cid:48) + 2dk(cid:48)−1 ∈ Ω (cid:16)
tower.

(cid:107)
, and n − 2 ≤ e ≤ n − 1. Theorem 5 then implies that there

, and no inﬁnite

nk(cid:17)
.

nk(cid:17)

k

We remark that Corollary 6 in particular improves our former bound Ω(n3) for a four-letter alphabet [6, Theo-

rem 3].

Theorem 4 shows that the height of a tower can be exponential in the number of states of NFAs, if the alphabet is
allowed to grow with the number of states. For DFAs with at most n states, Theorem 5 yields the height of a tower
Ω (cid:16)
(n + 1)2n/3(cid:17)
(for d = 2, k = (n − 1)/3 and e = n − 1). To obtain a better lower bound for DFAs, we combine
Theorem 4 with a “determinization” strategy.
Theorem 7. For every n ≥ 0, there exist two DFAs with at most n + 1 states over an alphabet of cardinality n(n+1)
having a tower of height 2n and no inﬁnite tower.

+ 1

2

Proof. For a given integer n, we deﬁne a pair of deterministic automata An and Bn with n + 1 and two states, respec-
tively, over the alphabet Σn = {b} ∪ {ai, j | i = 1, 2, . . . , n; j = 0, 1, . . . , i − 1} with a tower of height 2n between L(An)

11

b, a1,0,
a2,0, a2,1

b, a1,0,
a3,0, a3,1

b
a2,0, a3,0

3

a3,2

2

a2,1

1

a1,0

0

a3,1

a2,0

a3,0

Σn \ {b}

1

b

Σn \ {b}

b

2

Figure 6: The DFA A3 (left) and the two-state DFA Bn (right), n ≥ 0 of Theorem 7

and L(Bn), and with no inﬁnite tower. The two-state DFA Bn = ({1, 2}, Σn, γn, 1, {2}) accepts all words over Σn ending
with b and is shown in Figure 6 (right). Note that Bn is a deterministic version of Bn,0,1 of Theorem 4.

The idea of the construction of the DFA An = ({0, 1, . . . , n}, Σn, δn, n, {0}) is to use the automaton An,0,1 from the
proof of Theorem 4. Since we take d = 1, we can denote the state (i, 0) simply as i. The nondeterminism is eliminated
ai, j−−→ j. Then the tower of Theorem 4 is modiﬁed by
by relabeling every transition i
relabeling the corresponding letters. However, to preserve embeddability of the new letters, several self-loops must
be added.

ai−→ j with a new unique letter i

Formally, the transition function δn is deﬁned as follows. For every ai, j ∈ Σn, we deﬁne the transition δn(i, ai, j) = j.
For every k = 1, 2, . . . , n and ai, j ∈ Σn such that i (cid:44) k and j < k, we deﬁne the self-loop δn(k, ai, j) = k. Finally, we add
the self-loops δn(k, b) = k to every state k = 1, 2, . . . , n, see Figures 6 and 7 for an illustration.

For every 1 ≤ k ≤ n and 0 ≤ j < k, let αk, j = ak, jak, j−1 · · · ak,0, and let the words uk be deﬁned by u0 = ε and

uk = uk−1b αk,k−1 uk−1. Note that ukb contains 2k letters b.

We ﬁrst give an informal description of the tower of height 2n between An and Bn, which relates the construction to
Theorem 4. The tower is the sequence wn(0), wn(1), . . . , wn(2n − 1), where the longest word wn(2n − 1) is αn,n−1 un−1b ∈
L(Bn). The word wn(2i) is obtained from the word wn(2i+1) by removing the last letter, which is b. The word wn(2i−1)
is obtained from the word wn(2i) by removing the ﬁrst letter of some occurrences of αk, j in wn(2i), see Figure 8 for
the case n = 3.

We now give a formal deﬁnition of wn(i), which is done recursively. For any k ≥ 1, we deﬁne wk(0) = αk,0 = ak,0

and wk(1) = ak,0 b. For 2 ≤ i ≤ 2k − 1, let

We ﬁrst show that

wk(i) = αk,(cid:98)log i(cid:99) u(cid:98)log i(cid:99)−1 b w(cid:98)log i(cid:99)

(cid:16)

i − 2(cid:98)log i(cid:99)(cid:17)

.

(cid:16)

wk

2(cid:96) − 1

(cid:17) = αk,(cid:96)−1 u(cid:96)−1 b

(3)

(4)

b
a3,2
a2,1, a3,1,
a1,0, a2,0, a3,0

b
a4,2
a2,1, a4,1,
a1,0, a2,0, a4,0

b
a3,1, a4,1,
a1,0, a3,0, a4,0

b
a2,0, a3,0, a4,0

4

a4,3

3

a3,2

2

a2,1

1

a1,0

0

a4,2

a4,1

a2,0

a3,0

a3,1

a4,0

Figure 7: Automaton A4 of Theorem 7

12

w3(0) = a3,0
w3(1) = a3,0 b
w3(2) = a3,1a3,0 b a1,0
w3(3) = a3,1a3,0 b a1,0 b
w3(4) = a3,2a3,1a3,0 b a1,0 b a2,0
w3(5) = a3,2a3,1a3,0 b a1,0 b a2,0 b
w3(6) = a3,2a3,1a3,0 b a1,0 b a2,1a2,0 b a1,0
w3(7) = a3,2a3,1a3,0 b a1,0 b a2,1a2,0 b a1,0 b

Figure 8: The tower between L(A3) and L(B3). We underline transitions between diﬀerent states in A3.

holds for each k and each 1 ≤ (cid:96) ≤ k. This is true for (cid:96) = 1. For (cid:96) > 1, we have from (3) and by induction

(cid:16)
2(cid:96) − 1

(cid:17) = αk,(cid:96)−1 u(cid:96)−2 b w(cid:96)−1

(cid:16)

wk

2(cid:96)−1 − 1

(cid:17) = αk,(cid:96)−1 u(cid:96)−2 b α(cid:96)−1,(cid:96)−2 u(cid:96)−2 b = αk,(cid:96)−1 u(cid:96)−1 b .

By double induction on n and i, we now prove that the sequence (wn(i))2n−1
i=0

is the required tower. For n = 1, the
claim holds, and the tower is w1(0) = a1,0, w1(1) = a1,0 b. Let n > 1. The deﬁnition implies, by induction, that wn(i) is
in L(Bn) (that is, it ends with b) if and only if i is odd. Consider wn(i) with even i ≥ 2. Using (3), we show that there
is a path in An labeled by wn(i) and it can be decomposed as

−−−−−−→ (cid:4)log i(cid:5) αn,(cid:98)log i(cid:99)−1 u(cid:98)log i(cid:99)−1 b
an,(cid:98)log i(cid:99)

−−−−−−−−−−−−−−−→ (cid:4)log i(cid:5) w(cid:98)log i(cid:99)

(cid:16)

i−2(cid:98)log i(cid:99)(cid:17)
−−−−−−−−−−−−−→ 0 .

n

For the second segment of the path, note that both the alphabet of αn,(cid:98)log i(cid:99)−1 and the alphabet {b} ∪ {am,m(cid:48)
| m ≤
(cid:4)log i(cid:5) − 1, m(cid:48) < m} of u(cid:98)log i(cid:99)−1 b are contained in the alphabet of self-loops of state (cid:4)log i(cid:5). The last segment exists by
induction, since (cid:4)log i(cid:5) < n, i − 2(cid:98)log i(cid:99) ≤ 2(cid:98)log i(cid:99) − 1, the automaton A(cid:98)log i(cid:99) is a restriction of An, and i − 2(cid:98)log i(cid:99) is even.
We show that wn(i) (cid:52) wn(i + 1). This is true for i = 0, and follows by induction from (3) if (cid:4)log(i + 1)(cid:5) = (cid:4)log i(cid:5).
The latter equality holds unless i is of the form 2(cid:96) −1 for some (cid:96) > 1. If i = 2(cid:96) −1, then (cid:96)−1 = (cid:4)log i(cid:5) (cid:44) (cid:4)log(i + 1)(cid:5) = (cid:96)
and we have from (4)

wn

hence wn

(cid:16)

2(cid:96) − 1

(cid:17) (cid:52) wn

2(cid:96)(cid:17)
(cid:16)

holds.

(cid:16)
2(cid:96) − 1
(cid:16)

(cid:17) = αn,(cid:96)−1 u(cid:96)−1 b,
2(cid:96)(cid:17) = αn,(cid:96) u(cid:96)−1 b w(cid:96)(0) = αn,(cid:96) u(cid:96)−1 b a(cid:96),0 ,

wn

Finally, observe that if (vi)i is a tower between An and Bn, then (P(vi)i) is a tower between An,0,1 and Bn,0,1 of

Theorem 4, where P : ak, j (cid:55)→ ak is the natural projection. Therefore there is no inﬁnite tower between An and Bn.

The “determinization” idea of the previous theorem can be generalized. However, compared to the proof of
Theorem 7, the general procedure suﬀers from the increase of states (see Figure 9). The reason why we need not
increase the number of states in the proof of Theorem 7 is that the automata we are “determinizing” are such that there
is an order in which the transitions/states are used/visited, and that the nondeterministic transitions are acyclic.

(cid:16)
n2(cid:17)

Theorem 8. For every two NFAs A and B with at most n states and k input letters, there exist two DFAs A(cid:48) and B(cid:48)
states and O (k + n) input letters such that there is a tower of height r between A and B if and only if there
with O
is a tower of height r between A(cid:48) and B(cid:48). In particular, there is an inﬁnite tower between A and B if and only if there
is an inﬁnite tower between A(cid:48) and B(cid:48).

13

σs,t

a, b

a

σs(cid:48),t

s

yt

yt(cid:48)

t

t(cid:48)

a, b

a

σs,t(cid:48)

a

yt

a

s(cid:48)

s

b

at

σb,t

a, b

a

σa,t(cid:48)

a

bt

at(cid:48)

σa,t

a

t

t(cid:48)

at

a

s(cid:48)

Figure 9: Determinization by Theorem 8 and Theorem 9 respectively. (Self-loops under new letters in σ-states omitted.)

Proof. Let A and B be two NFAs with at most n states over an alphabet Σ of cardinality k. We ﬁrst add a unique initial
state, if necessary, to the automata A and B and the corresponding transitions in the standard way. Assume now that
A and B have a unique initial state, and let QA and QB denote their respective sets of states. We modify the automata
A and B to obtain the DFAs A(cid:48) and B(cid:48) as follows. Let QA(cid:48) = QA ∪ {σs,t | s, t ∈ QA} and QB(cid:48) = QB ∪ {σs,t | s, t ∈ QB},
where σs,t are new states. We introduce a new letter yt for every state t ∈ QA ∪ QB. It results in O
states and
O (k + n) letters. The transition function is deﬁned as follows. In both automata, each transition s
two transitions s
all transitions are deterministic in A(cid:48) and B(cid:48).

a
−→ t is replaced with
a
−→ t. Moreover, self-loops in all new states are added over all new letters. Note that

yt−→ σs,t and σs,t

n2(cid:17)

(cid:16)

We now prove that if there is a tower of height r between A and B, then there is a tower of height r between A(cid:48)
and B(cid:48). Informally, given a tower between A and B, in order to obtain a tower between A(cid:48) and B(cid:48), a sequence of
“directing” symbols is inserted before each letter in the tower. “Directing” symbols record the list of transitions the
corresponding letter will be responsible for in the rest of the tower. Formally, let (wi)r
i=1 be a tower between A and B.
Let (cid:96) = |wr| and

wr = xr,1 xr,2 · · · xr,(cid:96) ,

with xr, j ∈ Σ. Next, for i = 1, 2, . . . , r − 1, let

wi = xi,1xi,2 · · · xi,(cid:96)
where xi, j is either a letter or the empty word such that xi, j (cid:52) xi+1, j for each i = 1, 2, . . . , r − 1 and j = 1, 2, . . . , (cid:96).
For every wi, we ﬁx an accepting path πi in the corresponding automaton. Let pi, j be the letter yt where s −→ t is the
transition corresponding to xi, j in πi if xi, j is a letter, and let pi, j be empty if xi, j is empty. We deﬁne
w(cid:48)
i

= αi,1αi,2 · · · αi,(cid:96)

where αi, j = pi, j pi−1, j · · · p1, j xi, j if xi, j (cid:44) ε, and αi, j = xi, j = ε otherwise. It is straightforward to verify that
tower of height r between A(cid:48) and B(cid:48).

(cid:16)

(cid:17)r
i=1

w(cid:48)
i

Let now

be a tower between A(cid:48) and B(cid:48). We show that
(cid:16)
w(cid:48)
i

is a tower between A and B, where
(cid:17)
. We now show that if a word w(cid:48)
P is a projection erasing all new letters. Obviously, we have P
is accepted by A(cid:48), then P (w(cid:48)) is accepted by A. Let π(cid:48) be the path accepting w(cid:48), and let τ(cid:48)
2, . . . , τ(cid:48)
d denote the
sequence of all transitions of π(cid:48) labeled with letters from Σ in the order they appear in π(cid:48). By construction, τ(cid:48)
i is of the
ai−→ si for some states si−1, si ∈ QA, i = 1, 2, . . . , d, with s0 being initial and sk being accepting. Moreover,
form σsi−1,si
ai−→ si. It is straightforward to
for i < d, the transition τ(cid:48)
verify that τ1, τ2, . . . , τd is an accepting path of P(w(cid:48)) in A. Analogously for B(cid:48) and B. The fact that the existence of
towers of arbitrary height is equivalent to the existence of an inﬁnite tower then concludes the proof.

i is immediately followed in π(cid:48) by si

ysi+1−−−→ σsi,si+1 . Let τi be si−1

i=1
(cid:16)
w(cid:48)

1, τ(cid:48)

i+1

(cid:16)
(cid:16)
(cid:17)(cid:17)r
w(cid:48)
P
i
(cid:17) (cid:52) P

(cid:16)

(cid:17)r
i=1

w(cid:48)
i

is a

A similar construction yields the following variant of the previous theorem.

Theorem 9. For every two NFAs A and B with at most n states and k input letters, there exist two DFAs A(cid:48) and B(cid:48)
with O(kn) states and O(kn) input letters such that there is a tower of height r between A and B if and only if there is
a tower of height r between A(cid:48) and B(cid:48). In particular, there is an inﬁnite tower between A and B if and only if there
is an inﬁnite tower between A(cid:48) and B(cid:48).

14

u

x

σ

u2

x

σ1

τ2

σ2

y

u1

τ

y

τ1

Figure 10: The pattern (σ, σ1, σ2, τ, τ1, τ2)

Proof. Let QA(cid:48) = QA ∪ {σa,t | a ∈ Σ, t ∈ QA} and QB(cid:48) = QB ∪ {σa,t | a ∈ Σ, t ∈ QB}, where σa,t are new states. The
a
alphabet of A(cid:48) and B(cid:48) is Σ ∪ {at | a ∈ Σ, t ∈ QA ∪ QB}. We have O(kn) states and letters. Each transition s
−→ t, in both
at−→ σa,t and σa,t
a
−→ t. Self-loops in all new states are added over all new
automata, is replaced with two transitions s
letters. The rest of the proof is analogous to the proof of Theorem 8.

5. Towers of preﬁxes

It is remarkable that lower bounds on the height of ﬁnite towers for NFAs in this paper were obtained by examples
where wi is not just a subsequence of wi+1 but even its preﬁx (sometimes this rule is violated by the last element of
the tower). In this section we therefore investigate what can be said about alternating towers of preﬁxes. A simple
example of languages L1 = a(ba)∗ and L2 = b(ab)∗ shows that the towers of preﬁxes and towers (of subsequences)
may behave diﬀerently. Indeed, there is no inﬁnite tower of preﬁxes between L1 and L2, since every word of L1
begins with a and thus cannot be a preﬁx of a word of L2, which begins with b. But there is an inﬁnite tower, namely,
a, bab, ababa, . . .. We ﬁrst describe a pattern on two automata A and B that characterizes the existence of an inﬁnite
tower of preﬁxes between them.

Let A = (QA, Σ, δA, IA, FA) and B = (QB, Σ, δB, IB, FB) be two NFAs. We say that (σ, σ1, σ2, τ, τ1, τ2) is a pattern

of the automata A and B if σ, σ1, σ2, τ, τ1, τ2 are states of the product automaton such that

• σ1 ∈ FA × QB and τ1 ∈ QA × FB,
• σ is reachable from an initial state,
• states σ1 and σ2 are reachable from state σ under a common word,
• states τ1 and τ2 are reachable from state τ under a common word, and
• τ is reachable from σ2 and σ is reachable from τ2.

The deﬁnition is illustrated in Figure 10. We allow any of the words in the deﬁnition to be empty, with the convention
that any state is reachable from itself under the empty word. The following theorem provides a characterization for
the existence of an inﬁnite tower of preﬁxes.

Theorem 10. Let A and B be two NFAs. Then there is an inﬁnite tower of preﬁxes between A and B if and only if
there is a pattern of automata A and B.

Proof. Let (σ, σ1, σ2, τ, τ1, τ2) be a pattern of the automata A and B. Let u be a word under which state σ is reachable
from an initial state (qA, qB), x (y resp.) be a word under which both σ1 and σ2 (τ1 and τ2 resp.) are reachable from
σ (τ resp.), u1 be a word under which τ is reachable from σ2, and u2 a word under which σ is reachable from τ2, see
Figure 10. We then have an inﬁnite tower of preﬁxes ux, ux(u1y), ux(u1y)(u2 x), ux(u1y)(u2x)(u1y), . . . .

Assume now that there exists an inﬁnite tower of preﬁxes (wi)∞

i=1 between the languages L(A) and L(B). Consider
the automaton det(A × B), the determinization of A × B by the standard subset construction, and let qA × B be its
initial state. A suﬃciently long element of the tower deﬁnes a path

qA × B

u
−→ X

zX−→ Y

zY−→ X

15

in the automaton det(A × B), such that X contains a state ( f1, q1) ∈ FA × QB and Y contains a state (q2, f2) ∈ QA × FB.
For every state of X, there exists an incoming path from an element of Y labeled by zY since X = δA × B(Y, zY ).
Similarly, for every state of Y, there exists an incoming path from an element of X labeled by zX since Y = δA × B(X, zX).
Thus, there are inﬁnitely many paths from X to X labeled with words from (zXzY )+ ending in state ( f1, q1). Therefore,
there exists a state (s1, t1) ∈ X and integers k1 and (cid:96)1 such that

Similarly, there exists a state (s2, t2) ∈ X and integers k2 and (cid:96)2 such that

(s1, t1)

(zX zY )k1
−−−−−→ (s1, t1)

(zX zY )(cid:96)1
−−−−−→ ( f1, q1) .

(s2, t2)

(zX zY )k2
−−−−−→ (s2, t2)

(zX zY )(cid:96)2 zX
−−−−−−−→ (q2, f2) .

Let σ = τ = (s1, t2). Since (qA × B)

u
−→ σ. Let x = (zXzY )(cid:96)1 and y = (zXzY )(cid:96)2 zX.
y
x
−→ ( f1, t3) where t3 is a state in the cycle t2
−→ (s3, f2) where s3 is a state in the
(zX zY )k1
−−−−−→ s1 in A. We set σ1 = ( f1, t3) and τ1 = (s3, f2). The pattern is completed by states σ2 and τ2, such that

u
−→ (si, ti), i = 1, 2, also (qA × B)
(zX zY )k2
−−−−−→ t2 in B. Similarly, τ

Then σ

cycle s1

where u1 and u2 can be chosen as u1 = (zXzY )(cid:96)1k1k2−(cid:96)1 and u2 = zY (zXzY )(cid:96)2k1k2−(cid:96)2−1.

x
−→ σ2

u1−→ τ

y
−→ τ2

σ

u2−→ σ

We point out that the identiﬁcation is easy. It could even be shown that to decide whether there is a pattern between
the automata, that is, whether there is an inﬁnite tower of preﬁxes, is an NL-complete problem for both NFAs and
DFAs (cf. our technical report [7]). This is in contrast to deciding the existence of an inﬁnite tower of subsequences,
which is PTime-complete [10]. Notice that if there is a pattern, then there is also a pattern with σ = τ as shown in
the proof above. From the point of view of ﬁnding the pattern, however, it is more natural to keep the more general
deﬁnition of the pattern given above.

We have already mentioned that if there are towers of arbitrary height, then there is an inﬁnite tower. This property
holds for any relation that is a well quasi order (WQO) [3, Lemma 6] of which the subsequence relation is an instance.
The preﬁx relation is not a WQO. However, Theorem 10 and its proof shows that the pattern and therefore also an
inﬁnite tower of preﬁxes can be found as soon as there exists a suﬃciently long tower of preﬁxes. On the other
hand, this argument depends on the fact that the languages are regular. Indeed, the following example shows that the
property in general does not hold for non-regular languages.

Example 11. Let K = {a, b}∗a and L = {am(ba∗)nb | m > n ≥ 0} be two languages. Note that K is regular and L is
non-regular context-free. The languages are disjoint, since the words of K end with a and the words of L with b. For
any r ≥ 1, the words w2i+1 = ar(ba)i ∈ K and w2(i+1) = ar(ba)ib ∈ L for i = 0, 1, . . . , r − 1 form a tower of preﬁxes
between K and L of height 2r. On the other hand, let w1, w2, . . . be a tower of preﬁxes between the languages K and
L. Without loss of generality, we may assume that w1 belongs to L. Then a(cid:96)b is a preﬁx of w1 for some (cid:96) ≥ 1. It is
not hard to see that |wi|b < |wi+2|b holds for any wi ≤ wi+1 ≤ wi+2 with wi, wi+2 in L and wi+1 in K. As any word of L
with a preﬁx a(cid:96)b can have at most (cid:96) occurrences of letter b, the tower cannot be inﬁnite.

Given that the height of ﬁnite towers of preﬁxes for regular languages is bounded, we now investigate the bound.
We need the following auxiliary combinatorial lemma, which is fairly straightforward, but its proof is technical, and
therefore we formulate it outside the main proof.
Lemma 12. Let k1, (cid:96)1, k2, (cid:96)2 ≥ 0 be integers such that k1+k2 > 0 and (cid:96)1+(cid:96)2 > 0. Then 2·min(k1k2, (cid:96)1(cid:96)2) ≤ (k1+(cid:96)1)(k2+(cid:96)2)
Moreover, if k1k2 (cid:44) (cid:96)1(cid:96)2, then 2 · min(k1k2, (cid:96)1(cid:96)2) + 1 ≤ (k1+(cid:96)1)(k2+(cid:96)2)
Proof. Suppose that k1 = 0. Then the ﬁrst claim is obvious. If k1k2 (cid:44) (cid:96)1(cid:96)2, then (cid:96)1, (cid:96)2 > 0. Since also k2 > 0, we get
the second claim. By symmetry, we shall further suppose that k1, (cid:96)1, k2, (cid:96)2 ≥ 1.

.

.

2

2

Let us now assume that k1 ≤ (cid:96)1 and k2 < (cid:96)2. Then

2 min(k1k2, (cid:96)1(cid:96)2) + 1 = 2k1k2 + 1 ≤ 2k1k2 + k1 = 2k1(2k2 + 1)

2

≤

(k1 + (cid:96)1)(k2 + (cid:96)2)
2

.

16

1

b

b

a

a

2

b

b

a

a

3

b

b

a

a

4

b

b

a

a

5

b

b

1(cid:48)

2(cid:48)

3(cid:48)

4(cid:48)

5(cid:48)

0

b

a

1

5

b

b

2

4

b

b

3

Figure 11: DFAs Ad and Be of Theorem 14 for d = e = 5

By symmetry, it remains to consider cases ki ≤ (cid:96)i, (cid:96) j ≤ k j, {i, j} = {1, 2}. Then

2 min(k1k2, (cid:96)1(cid:96)2) + |k1k2 − (cid:96)1(cid:96)2| = k1k2 + (cid:96)1(cid:96)2 ≤ k1k2 + (cid:96)1(cid:96)2 + (k1 − (cid:96)1)((cid:96)2 − k2)

2

= (k1 + (cid:96)1)(k2 + (cid:96)2)
2

,

which concludes the proof.

For DFAs we now have the following bound.

Theorem 13. Let A and B be two DFAs with n and m states that have no inﬁnite tower of preﬁxes. Then the height
of a tower of preﬁxes between A and B is at most nm
2

+ 1.

Proof. Let A = (QA, Σ, δA, qA, FA) and B = (QB, Σ, δB, qB, FB), and let X = FA ×(QB \ FB) and Y = (QA \ FA)× FB.
Final states (pi, qi) = δ((qA, qB), wi) of any tower of preﬁxes (wi)r
i=1 between A and B in the product automaton A × B
have to alternate between the states of X and Y, with the exception of wr: there may be no path labeled by wr in the
non-accepting automaton, and therefore also no path in the product automaton A × B (recall our convention not to
consider states that do not appear on an accepting path).

If (pi, qi) = (p j, q j) for some 1 ≤ i < j < r, then there is a path

(qA, qB)

wi−→ (pi, qi)

u
−→ (pi+1, qi+1)

v
−→ (pi, qi)

with wi+1 = wiu and w j = wiuv. Then there is an inﬁnite tower of preﬁxes wi, wiu, wiuv, wiuvu, . . . , a contradiction.
Therefore, it remains to show that there may be at most nm

2 alternations without repeated states between X and Y.

If |X| = |Y|, then there are at most 2 · min(|X|, |Y|) such alternations, and if |X| (cid:44) |Y|, then there are at most
2 · min(|X|, |Y|) + 1 such alternations. In both cases, the proof is completed by Lemma 12 with k1 = |FA|, (cid:96)2 = |FB|,
k1 + (cid:96)1 = n and k2 + (cid:96)2 = m, noting that for k1 = 0 or (cid:96)2 = 0 the claim holds since then L(A) or L(B) is empty.

The following theorem allows to conclude that the above bound is tight.

Theorem 14. For every positive integer d and every odd positive integer e, there exists a binary DFA with 2d states
and a binary DFA with e + 1 states having a tower of preﬁxes of height d(e + 1) + 1 and no inﬁnite tower.

Proof. We consider the proof of Theorem 2, but instead of taking the NFA Ad, we take its DFA equivalent, which
has 2d states and, for simplicity, we denote it Ad as well, cf. Figure 11. From Theorem 2, there is no inﬁnite tower
between the languages, and hence there is also no inﬁnite tower of preﬁxes between the DFAs.

Consider the word w = (bea)d−1be+1. By the proof of Theorem 2, Ad accepts all preﬁxes of w ending with an even
number of b’s, including those ending with a, and Be accepts all preﬁxes of w ending with an odd number of b’s. The
sequence (wi)|w|+1
i=1 , where wi is the preﬁx of w of length i − 1 for i = 1, 2, . . . , |w| + 1, is therefore a tower of preﬁxes
between Ad and Be of height |w| + 1 = (e + 1)(d − 1) + e + 1 + 1 = d(e + 1) + 1. (The last word of the tower in
Theorem 2 does not ﬁt to a preﬁx tower.)

The following corollary now states that the bound of Theorem 13 is tight.

Corollary 15. For all even positive integers n and m, there exist binary DFAs with n and m states having a tower of
preﬁxes of height nm
2

+ 1 and no inﬁnite tower.

17

Proof. The claim follows from Theorem 14 by setting d = n

2 and e = m − 1.

Comparing towers of subsequences and preﬁxes with respect to the number of states of DFAs, Theorem 7 shows
that there are towers of subsequences of exponential height, while Theorem 13 gives a quadratic bound on the height of
towers of preﬁxes. It shows an exponential gap between the height of towers of subsequences and preﬁxes for DFAs.
What is the situation for NFAs? An immediate consequence of the NFA-to-DFA transformation and Theorem 13 give
the following asymptotically tight bound.

Corollary 16. Given two NFAs with at most n and m states and with no inﬁnite tower of preﬁxes, the height of a tower
of preﬁxes between them is at most 2n+m−1 − 2n−1 − 2m−1 + 1. Moreover, the lower bound is 2n+m−2 − 2m−2 + 1 for any
n, m ≥ 2.

Proof. Let two NFAs with n and m states be given. Their corresponding minimal DFAs have at most 2n − 1 and 2m − 1
2 (2n − 1)(2m − 1) + 1. Taking
nonempty states. By Theorem 13, the upper bound on the height of towers of preﬁxes is 1
the integer part, the height is at most (2n−1)(2m−1)+1

= 2n+m−1 − 2n−1 − 2m−1 + 1.

2

The lower bound is obtained from Theorem 4 and Remark 1.

A natural question is whether there are any requirements on the size of the alphabet in case of automata with
exponentially high towers of preﬁxes. The following corollary shows that the alphabet can be binary and the tower is
still more than polynomial in the number of states.

Corollary 17. For any n there are binary NFAs with at most n states with no inﬁnite tower of preﬁxes and with a
tower of preﬁxes of a superpolynomial height with respect to n.

Proof. An automaton over the alphabet of cardinality k can be transformed into a binary automaton in the obvious
way: replace each letter with its binary code of length log k, and replace every transition by a path with log k − 1 new
states. Note that the property of being a tower of preﬁxes between two automata is preserved by the transformation.
Consider automata A j, j and B j, j of Theorem 4. It can be calculated that each of them has less than 2 j2 transitions.
Therefore, by the transformation, we obtain binary automata A(cid:48)
j, j, each with at most 2 j2 log 2 j states. By
Remark 1, the transformed automata have no inﬁnite tower of preﬁxes and a ﬁnite tower of preﬁxes of height at least
22 j−3. Choosing

j, j and B(cid:48)

(cid:36) (cid:114) n

j =

(cid:37)

,

2 log 2n

the binary automata A(cid:48)

j, j and B(cid:48)

j, j have at most n states, and they have a tower of preﬁxes of height

(cid:32)

(cid:113)

2

Ω

2n
log 2n

(cid:33)

.

The following question is open.

Open Problem 2. Given two NFAs with n and m states over a ﬁxed alphabet with m letters. Assume that there is no
inﬁnite tower of preﬁxes between the automata. What is the tight bound on the height of towers of preﬁxes?

6. Conclusion

We investigated the height of ﬁnite towers between two regular languages as a function of the number of states of
the automata representing the languages. We also paid attention to three additional parameters: (non)determinism, the
structure of the tower (formed by subsequences or by preﬁxes), and the size of the alphabet. The connection between
the parameters is summarized as follows.

The NFA vs. DFA representation does not play a crucial role since any tower between two NFAs can be “deter-

minized” to a tower between two DFAs with only a moderate increase of the number of states.

18

A diﬀerence between towers of subsequences and towers of preﬁxes is less clear. It is conspicuous that our best,
exponentially high towers are essentially towers of preﬁxes. We want to stress that this was not an intention but rather
a surprising observation. Although this holds only for NFAs, it is worth noting that the proper subsequence relation
is used exclusively in the determinization constructions. It leaves an intriguing open question whether, in the nonde-
terministic case, there is any substantial diﬀerence between towers of subsequences and towers of preﬁxes. In other
words, the question is whether the subsequence relation can be simulated by the preﬁx relation using nondeterminism.
The real inﬂuence of the alphabet size is also unclear. We have seen that the height of towers grows exponentially
with the alphabet size up to the point when the alphabet size is roughly the same as the number of states. The second
intriguing question is thus whether the towers can grow beyond this point using a larger alphabet. The unconditional
, where the only limit on the size of Σ is the trivial bound 2n2 on the number
upper bound we have obtained is O
of inequivalent letters in an n-state NFA (a letter a can be identiﬁed with the mapping δ( · , a) : Q → 2Q).

n|Σ|(cid:17)
(cid:16)

The lack of understanding of the impact of the alphabet size seems to be related to the fact that the estimate of
the number κ in Place et al. [12] is doubly exponential in the alphabet size. On a positive side, the diﬃculty to ﬁnd
examples of very high towers means that the construction suggested in Section 2.1 is going to be rather fast on typical
instances. This should be contrasted with the construction by Place et al. [12], where the huge number κ is prohibitive,
even if suspected to be overestimated.

The two open questions formulated in the paper are related. If, for NFAs, towers of preﬁxes are as high as towers

of subsequences, then Θ(2n+m) is the optimal bound (cf. Open Problem 1).

To conclude, we inform the reader that slightly better bounds can be obtained in speciﬁc constellations by more
technical constructions that can be found in the technical report of this paper [8]. We present simpliﬁed constructions
in this paper since they do not have any impact on the asymptotic results.

Acknowledgements. We are grateful to anonymous referees for their suggestions that allowed to improve and simplify
the exposition.

References

[1] Almeida, J., 1990. Implicit operations on ﬁnite J-trivial semigroups and a conjecture of I. Simon. Journal of Pure and Applied Algebra 69,

205–218.

[2] Almeida, J., 1995. Finite semigroups and universal algebra. Vol. 3 of Series in Algebra. World Scientiﬁc.
[3] Czerwi´nski, W., Martens, W., Masopust, T., 2013. Eﬃcient separability of regular languages by subsequences and suﬃxes. In: Fomin, F. V.,
Freivalds, R., Kwiatkowska, M. Z., Peleg, D. (Eds.), International Colloquium on Automata, Languages and Programming (ICALP). Vol.
7966 of LNCS. Springer, pp. 150–161, full version available at http://arxiv.org/abs/1303.0966.

[4] Czerwi´nski, W., Martens, W., van Rooijen, L., Zeitoun, M., Zetzsche, G., 2017. A characterization for decidable separability by piecewise

testable languages. Discrete Mathematics & Theoretical Computer Science 19 (4).

[5] Higman, G., 1952. Ordering by divisibility in abstract algebras. Proceedings of the London Mathematical Society s3-2 (1), 326–336.
[6] Holub, ˇS., Jir´askov´a, G., Masopust, T., 2014. On upper and lower bounds on the length of alternating towers. In: Csuhaj-Varj´u, E., Dietzfel-

binger, M., ´Esik, Z. (Eds.), Mathematical Foundations of Computer Science (MFCS). Vol. 8634 of LNCS. Springer, pp. 315–326.

[7] Holub, ˇS., Masopust, T., Thomazo, M., 2014. Alternating towers and piecewise testable separators. CoRR abs/1409.3943.
[8] Holub, ˇS., Masopust, T., Thomazo, M., 2017. On the height of towers of subsequences and preﬁxes. CoRR abs/1705.02813.
[9] Karandikar, P., Kuﬂeitner, M., Schnoebelen, P., 2015. On the index of Simon’s congruence for piecewise testability. Information Processing

Letters 115 (4), 515–519.

[10] Masopust, T., 2018. Separability by piecewise testable languages is PTime-complete. Theoretical Computer Science 711, 109–114.
[11] Masopust, T., Kr¨otzsch, M., 2018. Deciding universality of ptNFAs is PSpace-complete. In: Tjoa, A. M., Bellatreche, L., Biﬄ, S., van
Leeuwen, J., Wiedermann, J. (Eds.), International Conference on Current Trends in Theory and Practice of Computer Science (SOFSEM).
Vol. 10706 of LNCS. Springer, pp. 413–427.

[12] Place, T., van Rooijen, L., Zeitoun, M., 2013. Separating regular languages by piecewise testable and unambiguous languages. In: Chatterjee,

K., Sgall, J. (Eds.), Mathematical Foundations of Computer Science (MFCS). Vol. 8087 of LNCS. Springer, pp. 729–740.

[13] Stern, J., 1985. Characterizations of some classes of regular events. Theoretical Computer Science 35, 17–42.

19

