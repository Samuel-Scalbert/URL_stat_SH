Passive Learning of Timed Automata from Logs
(Student Abstract)
Lénaïg Cornanguer

To cite this version:

Lénaïg Cornanguer. Passive Learning of Timed Automata from Logs (Student Abstract). AAAI 2021
- 35th AAAI Conference on Artificial Intelligence, Feb 2021, Vancouver (virtual), Canada. pp.15773-
15774. ￿hal-03201649￿

HAL Id: hal-03201649

https://inria.hal.science/hal-03201649

Submitted on 19 Apr 2021

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Passive Learning of Timed Automata from Logs (Student Abstract)

L´ena¨ıg Cornanguer*
Inria, Univ Rennes, CNRS, IRISA
F-35000 Rennes
lenaig.cornanguer@irisa.fr

Abstract

We propose a novel algorithm to passively learn deterministic
Timed Automata from events sequences associated with the
delay occurring between them. This algorithm produces mod-
els that are more speciﬁc than State-of-the-Art algorithms and
that has a better identiﬁcation of the temporal constraints ap-
plying on the systems.

Introduction
Many systems save a history of the events occurring within
it or linked to it. These timestamped events sequences are
named logs and the main purposes of logging are to track
the evolution of a process or to identify the cause when a
problem is occurring. If each logging sequence informs us
about one speciﬁc execution of the system, looking at the
whole set of logs can give us an insight of the global func-
tioning of the system. When the behavior of a system is
time-dependant, this functioning can be complex, and ob-
taining its behavior model helps to understand it. One be-
havior model is the Timed Automaton (TA). Traditionally
used to model electronic circuits and ensure their safety, TA
are now used to model biological ecosystems, software, or
industrial systems. The ﬁrst strength of this modeling is its
expressiveness: in addition to the classical automata expres-
siveness, TA support temporal constraints which can be veri-
ﬁed with temporal logics such as TCTL (Alur, Courcoubetis,
and Dill 1990). This expressiveness has lead to the develop-
ment of numerous tools based on TA. Some of these tools
were created to verify properties (e.g. safety speciﬁcations)
of the represented system thanks to timed logical expres-
sions. Other ones allow the generation of test case scenar-
ios with the controller synthesis. Finally, TA’s formalism can
be translated into a state-transition diagram, which makes it
easily interpretable.

Given timestamped event sequences, learning a TA mod-
elling the sytem’s behavior is a recent issue. We can dis-
tinguish two learning approaches, the active and the pas-
sive one. While active approaches require to query the sys-
tem, passive approaches can learn TA only with labeled se-
quences. The existing algorithms that passively learn TA

*Supervisors: C. Largou¨et, L. Roz´e and A. Termier.

Copyright © 2021, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

tend to lack precision due to their management of the time
constraints or to produce too complex models, which reduce
the interpretability.

We propose a novel algorithm named TAG that passively
learns deterministic TA from timestamped event sequences
and use a new strategy to obtain a good trade-off between
the size of the models and their precision.

Background and State-of-the-Art

Timed Automata
A Timed Automaton is a data structure to model the func-
tioning of dynamic systems whose state is conditioned by
the occurrence of discrete events at speciﬁc moments. The
notion of time is supported by temporal variables named
clocks that can be reset during the transition from one state
to another (e.g., the clock “c0” on the transition from S1 to
S0 in Figure 1) and whose value conditions the transition
from a state to another (e.g., “c0 < 5” on the same transi-
tion as before). Formally, a Timed Automaton A is a 6-uple
A = (Q, Σ, C, E, q0, F ) where Q is a ﬁnite set of states, Σ
is a ﬁnite set of events or symbols, C is a ﬁnite set of clocks,
E is a ﬁnite set of transitions, q0 ∈ Q is the initial state and
F ⊆ Q is a ﬁnite set of ﬁnal states. A transition e ∈ E of A
is a 5-uple e = (q, a, g, r, q(cid:48)) where q and q(cid:48) are respectively
the source state and the destination state of e, g is a guard
i.e. a constraint on the value of a clock, and r is the set of
clocks being reset on the transition.

Timed Automata Passive Learning Algorithms
Learning a TA is a NP-hard problem (Verwer, de Weerdt,
and Witteveen 2010). To reduce the complexity of the task,
the existing approaches use approximations or learn a sub-
class of Timed Automata.

GenProgTA (Tappler et al. 2018) is an algorithm that
learns TA from positive timestamped event sequences based
on genetic programming. This algorithm requires the user to
give a lot of parameters such as the number of clocks or the
relevant guards.

Timed k-Tail (Pastore, Micucci, and Mariani 2017) is an
algorithm that learns TA from a positive set of operations
and their duration. For each state of the initialized automa-
ton, it compares the set of possible trajectories of k transi-
tions starting from this state. This set is called the k-future

Algorithm TPR FPR State number
GenProgTA 0.94
1.00
1.00

0.00
0.22
0.00

RTI+
TAG

5
6
5

Figure 1: The model TA from GenProgTA used to generate
the timestamped sequences of events.

of the state and the states with the same k-future are merged.
One of the drawbacks of Timed k-Tail is that it learns an au-
tomaton that isn’t deterministic in contrast to the algorithm
we propose.

RTI+ (Verwer, de Weerdt, and Witteveen 2010) is an al-
gorithm that learns Probabilistic Deterministic Real-Time
Automata (PDRTA) from only positive timestamped event
sequences. A PDRTA is a TA where the notions of clock
and guards are reduced to intervals of acceptable delays be-
tween two successive events. It is also deterministic. RTI+
introduces the notion of transition division which permits to
model the inﬂuence of time on the target state for the same
event. However, its management of the temporal constraints
leads to models not sensitive enough.

Contribution

We propose a novel algorithm named TAG for Timed Au-
tomata Generator, its strategy is in two phases.

After having initialized an automaton with an input sam-
ple of positive timestamped event sequences, it reduces its
size by merging the states having the same k-future, like
Timed k-Tail. However, if the merge induces a determinism
issue, it also merges the problematic transitions and states
until a deterministic solution.

The second phase attempts to capture the temporal dy-
namic of the system by realizing transition divisions. If the
event occurring after a transition differs in function to the
time value of passage, the transition and its target state are
split into two paths. During this second phase, it also realizes
state merging if needed, but always by favoring the transition
divisions.

It ﬁnally returns a PDRTA consistent with the input sam-
ple, concise in terms of state number but capturing the tem-
poral constraints of the system.

Experimentation

Experimental Setup

In order to compare our new algorithm with algorithms of
the State-of-the-Art, we choose to use an example of Gen-
ProgTA (Figure 1). We generated a set of 1000 event se-
quences with the delay occurring between two events con-
sistent with the model TA. 70% of this set was used to learn
a TA with each algorithm. The 30% remaining were used
to test the models by checking if they were accepted by it
and compute the True Positive Rate (TPR). We also gener-
ated 300 sequences inconsistent with the model automaton
to compute the False Positive Rate (FPR).

Table 1: Validation scores of the learned models.

Results
We did not compute the TPR and the FPR of the TA learned
by Timed k-Tail because it is not deterministic. This TA has
11 states. The TPR, FPR, and the state number of the TA
learned by the other algorithms are presented in Table 1. The
model learned by GenProgTA did not recognize all the se-
quences of the positive set of validation due to an error on
a guard. However, it rejected all the sequences of the neg-
ative one on the contrary to RTI+’s model which accepted
66 negative sequences. The cause is a bad management of
the temporal constraints leading to a model with guards too
large. Finally, our algorithm TAG produced the exact same
automaton as the target and therefore correctly accepts or
rejects the sequences of the validation set.

Conclusion and Future Work
Learning passively TA from logs can be really interesting
to model systems without having to know its functioning or
having to interact with it.

We propose a novel algorithm that passively learns TA
and achieves a trade-off between a model that would be too
sensitive to the input data and a model that wouldn’t be spe-
ciﬁc enough and accept wrong behaviors.

The next step of our work is to improve the validation of
the resultant TA. A study about the distances between TA
has to be done to consolidate the validation. An other step
is the formal veriﬁcation of the algorithm. Then, we would
like to delete progressively the constraints on the learned
automaton to obtain models fully exploitable by the model
checking or controller synthesis tools.

References
Alur, R.; Courcoubetis, C.; and Dill, D. 1990. Model-
checking for real-time systems. In [1990] Proceedings. Fifth
Annual IEEE Symposium on Logic in Computer Science,
414–425.

Pastore, F.; Micucci, D.; and Mariani, L. 2017. Timed k-tail:
Automatic inference of timed automata. In 2017 IEEE In-
ternational conference on software testing, veriﬁcation and
validation (ICST), 401–411.
Tappler, M.; Aichernig, B. K.; Larsen, K. G.; and Lorber, F.
2018. Learning Timed Automata via Genetic Programming.
arXiv:1808.07744 [cs] .
Verwer, S.; de Weerdt, M.; and Witteveen, C. 2010. A
likelihood-ratio test for identifying probabilistic determin-
istic real-time automata from positive data. In International
Colloquium on Grammatical Inference, 203–216. Springer.

