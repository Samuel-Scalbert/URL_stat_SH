QuickFill, QuickMixte : approches par blocs pour la
réduction du nombre de programmes en synthèse de
programmes
Vanessa Fokou, Peggy Cellier, Maurice Tchuente, Alexandre Termier

To cite this version:

Vanessa Fokou, Peggy Cellier, Maurice Tchuente, Alexandre Termier. QuickFill, QuickMixte : ap-
proches par blocs pour la réduction du nombre de programmes en synthèse de programmes. CARI
2022 - Colloque Africain sur la Recherche en Informatique et en Mathématiques Appliquées, Oct 2022,
Yaoundé, Cameroun. pp.1-10. ￿hal-03717860￿

HAL Id: hal-03717860

https://inria.hal.science/hal-03717860

Submitted on 10 Jul 2022

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

QuickFill, QuickMixte : approches par blocs pour la réduction du nombre
de programmes en synthèse de programmes

Vanessa Fokou1, Peggy Cellier2, Maurice Tchuente1,*, Alexandre Termier2

1Université de Yaoundé I, Département d’Informatique, BP 812 Yaoundé Cameroun
1vanfokou@gmail.com, maurice.tchuente@gmail.com
2Univ Rennes, Inria, INSA Rennes, CNRS, IRISA - UMR 6074, France
2prenom.nom@irisa.fr
*IRD, Sorbonne Université, UMMISCO, F-93143, Bondy, France

Résumé
Les tâches répétitives sont le plus souvent fastidieuses ; aﬁn de faciliter leur exécution, les ap-
proches de synthèse de programmes ont été développées. Elles consistent à inférer automatique-
ment des programmes qui satisfont l’intention d’un utilisateur. L’approche la plus connue en syn-
thèse de programmes est FlashFill intégrée au tableur Excel qui permet le traitement des chaînes
de caractères. Dans FlashFill l’intention de l’utilisateur est représentée par des exemples i.e, des
couples (entr´ee, sortie). FlashFill explore un très grand espace de programmes et peut donc
nécessiter un temps d’exécution important et inférer beaucoup de programmes dont certains fonc-
tionnent sur des exemples donnés mais ne capturent pas l’intention de l’utilisateur. Dans cet article,
nous proposons deux approches QuickMixte et QuickFill basées sur les blocs qui visent à guider
l’exploration de l’espace de programmes de FlashFill en enrichissant les spéciﬁcations fournies
par l’utilisateur. Ces approches demandent à l’utilisateur de fournir des associations entre les sous-
parties de la sortie et de l’entrée pour afﬁner les spéciﬁcations. Les expérimentations menées sur
une série de 12 jeux de données montrent que QuickMixte et QuickFill permettent de réduire consi-
dérablement l’espace de programmes de FlashFill. Nous montrons qu’avec ces approches, il est
souvent possible de donner moins d’exemples qu’avec l’algorithme FlashFill original pour une
plus grande proportion de programmes corrects.

Mots-Clés
Synthèse de programmes, programmation par l’exemple, manipulation des chaînes de caractères,
tâches répétitives, approche par blocs.

I

INTRODUCTION

La synthèse de programmes (en anglais, Program Synthesis) consiste à trouver automatique-
ment, à partir d’un langage de programmation sous-jacent, des programmes qui satisfont l’in-
tention de l’utilisateur, souvent exprimée par des exemples (entrée, sortie). Elle a été utilisée
dans plusieurs applications comme la réparation de code [6], la modélisation probabiliste [7], la
suggestion de code [5] ou encore le traitement des données [8]. Le pré-traitement des données
est l’une des tâches les plus chronophages d’un processus d’analyse de données. On estime que
les ingénieurs/scientiﬁques des données consacrent 80% de leur temps au pré-traitement des

1

données [9]. Cette tâche demande souvent de faire des transformations non triviales de formats,
qui sont trop complexes pour être effectuées par les outils existants, mais trop simples pour
mériter l’attention soutenue d’un analyste. En pratique, la solution classique pour effectuer les
tâches de pré-traitement de données est l’écriture de petits scripts dans des langages de pro-
grammation généralistes (par exemple Python). La difﬁculté est que de nombreux utilisateurs
ne maîtrisent pas les bases de la programmation, et n’ont donc pas la possibilité d’écrire de tels
scripts.

Pour pallier ce problème, les techniques de synthèse de programmes, en particulier la program-
mation par l’exemple, sont intéressantes. C’est un sous-domaine de la synthèse de programmes,
où la spéciﬁcation se présente sous la forme d’exemples entrée-sortie. L’approche la plus connue
en synthèse de programmes est FlashFill [4], elle est intégrée à toutes les versions récentes du
tableur Excel pour le traitement automatique de chaînes de caractères. FlashFill considère des
lignes dans le tableur, et apprend des programmes prenant en entrée le contenu d’une ou plu-
sieurs colonnes de la ligne par exemple une colonne des noms et une colonne des prénoms, et
dont le résultat est stocké dans une autre colonne par exemple une colonne contenant la conca-
ténation des noms et prénoms. L’algorithme original FlashFill, tel que présenté dans GULWANI
[4], doit explorer un grand espace de programmes, et peut donc nécessiter un temps d’exécution
important. De plus, beaucoup de programmes peuvent être inférés dont certains fonctionnent sur
les exemples donnés mais ne capturent pas l’intention de l’utilisateur, et donneront des résultats
faux sur d’autres entrées. Ce problème de généralisation est dû au fait que les programmes sont
souvent spéciﬁques aux exemples donnés.

Dans cet article nous présentons QuickMixte et Quickﬁll deux améliorations de FlashFill. Ces
deux approches réduisent l’espace des programmes à explorer par FlashFill en enrichissant
les spéciﬁcations fournies par l’utilisateur. Pour chaque exemple qui consiste en couple (en-
trée, sortie), l’utilisateur est invité à donner le matching entre les sous-parties de l’entrée et les
sous-parties de la sortie. Le but de ces deux approches est de montrer que l’ajout de certaines
interactions avec l’utilisateur peut aider à réduire le nombre de programmes de FlashFill. Les
expériences menées ont permis de vériﬁer cette hypothèse.

Le reste du papier est organisé comme suit : la section 2 présente quelques travaux antérieurs
sur le traitement de données via la synthèse de programmes, la section 3 présente les approches
QuickMixte et QuickFill, la section 4 présente les expérimentations et la section 5 conclut le
papier.

II ÉTAT DE L’ART SUR LA PROGRAMMATION PAR L’EXEMPLE

La synthèse de programmes comprends beaucoup de sous-domaines parmi lesquels la program-
mation par l’exemple et la programmation par démonstration, elles peuvent automatiser de nom-
breuses tâches courantes - à l’exemple de l’édition de texte - qui tendent à consommer une
fraction frustrante du temps des utilisateurs. En programmation par l’exemple, l’idée est d’ap-
prendre des programmes qui correspondent aux actions de l’utilisateur à partir des exemples
qu’il fournit par interaction avec un agent logiciel. L’agent peut ensuite généraliser ces pro-
grammes aﬁn qu’ils puissent fonctionner dans d’autres situations similaires, mais pas nécessai-
rement identiques, aux exemples sur lesquels ils sont appris [1]. En 2003, LAU, WOLFMAN,
DOMINGOS et WELD [2] formalisent l’algèbre des espaces de version, une méthode permettant
de composer des espaces de version plus simples pour construire des espaces plus complexes et
l’appliquent à la programmation par démonstration dans le domaine de l’édition de texte en l’oc-
currence SMARTedit, un système qui apprend les procédures répétitives d’édition de texte par

2

l’exemple. En 2009, LAU [3] explique pourquoi les systèmes de programmation par démons-
tration échouent ; elle y mentionne que la facilité d’utilisation reste un obstacle majeur pour ces
systèmes ; SMARTedit étant un cas d’étude. La démonstration fournit par l’utilisateur consiste
en une séquence de l’état de l’éditeur après chaque action primitive expliquant comment effec-
tuer la transformation. Par ailleurs, le langage de SMARTedit n’est pas aussi expressif que ce
qui est nécessaire dans le cadre des feuilles de calcul. Les outils de type tableurs comme Mi-
crosoft Excel sont particulièrement adaptés à la manipulation et la transformation des données
numériques. De ce fait, on ne dispose que de fonctions élémentaires pour la manipulation des
chaînes de caractères. En 2011, GULWANI [4] propose l’approche FlashFill pour le traitement
automatique de chaînes de caractères dans les tableurs.

FlashFill est un synthétiseur de programmes pour les transformations syntaxiques de chaînes de
caractères à partir d’un ensemble de couples d’exemples (entrée, sortie) fournis par l’utilisateur.
Il prend en entrée un ensemble d’exemples de type (σ, s) où σ = (σ1, ..., σn) est un tuple
dont chaque élément est une chaîne de caractères, et où s est une chaîne de caractères. Dans
un tableur comme Excel, chaque ligne est un exemple, σ est un ensemble de cellules de la
ligne contenant des données, et s est le résultat d’une transformation de chaîne de caractères
sur les cellules σ. Par exemple ((A1 : ”Jean”, B1 : ”Dupont”), C1 : ”Jean Dupont”)
permet d’inférer qu’il faut concaténer le contenu des colonnes A et B et ranger le résultat
dans la colonne C. Pour un exemple (σ, s) donné, FlashFill traite chaque sous-partie de s à
partir de l’entrée σ pour trouver les sous-programmes associés, et combine par la suite ces
sous-programmes pour obtenir l’ensemble des programmes permettant d’obtenir s à partir de
σ. Ce procédé conduit à un grand nombre de programmes car le chevauchement qu’il y a entre
les sous-parties de s implique que certaines sous-parties sont traitées à plusieurs reprises, ce
qui augmente le nombre de programmes de FlashFill. Dans la suite, nous présentons deux
approches par blocs qui permettent de réduire le nombre de programmes de FlashFill.

III APPROCHES PAR BLOCS : QUICKMIXTE, QUICKFILL

Dans cette section, nous rappelons tout d’abord les principales notions de FlashFill avant d’in-
troduire les deux approches QuickMixte et QuickFill.

3.1 Explications sur FlashFill

Pour résoudre le problème de transformation syntaxique de chaînes de caractères dans les ta-
bleurs, FlashFill s’appuie sur deux principaux éléments : un langage qui contient des primitives
simples pour de la manipulation de chaînes de caractères et un algorithme de synthèse qui
utilise ce langage spéciﬁque pour construire des programmes de transformation. Ce langage
contient des expressions telles que : ConstStr pour les constantes, SubStr pour l’extraction de
sous-chaînes, Concatenate pour la concaténation, etc. Les éléments dudit langage sont expli-
qués en Annexe. Étant donné S un ensemble de couples d’exemples entrée-sortie (σ, s) avec
σ = (σ1, ..., σn), le but de FlashFill est d’apprendre des programmes de transformation de
chaînes de caractères cohérents avec tous les couples (σ, s) ∈ S i.e, capables de transformer
chaque entrée σ en sa sortie s. Sa première étape consiste à calculer pour chaque couple (σ, s)
∈ S indépendamment les programmes permettant de transformer σ en la sortie s. La deuxième
étape consiste à construire l’ensemble des programmes cohérents avec tout couple (σ, s) ∈ S
par intersection des programmes individuels si tous les exemples sont de même forme ou par
partitionnement des exemples puis intersection des programmes par partition sinon. Pour ce qui
est de la troisième étape, elle intervient uniquement lorsque le partitionnement a lieu ; nous ne

3

nous y intéressons pas dans ce papier. Comme mentionné précédemment, la grande taille de
l’espace de programmes qu’explore FlashFill est due au fait qu’il traite chaque sous-partie de
s ; pour chacune d’elle, il se sert de toute l’entrée σ pour construire les sous-programmes corres-
pondant, le nombre de tels sous-programmes est inﬂuencé par la longueur de σ. Notre but est de
réduire l’espace de programmes à explorer par FlashFill via les approches par blocs QuickMixte
et QuickFill qui diminuent le nombre de sous-parties à traiter et empêchent d’utiliser toute l’en-
trée en demandant à l’utilisateur des associations entre les sous-parties de l’entrée et celles de la
sortie. Il est à noter que QuickMixte et QuickFill partent du même problème initial que FlashFill
i.e, à partir d’un ensemble d’exemples, il faut apprendre un ensemble des programmes pouvant
transformer l’entrée σ en la sortie s.

3.2 QuickMixte

j

j

j

j

, si) est tel que si est une sous-partie de s, σsub

QuickMixte demande à l’utilisateur, pour chaque couple d’exemple entrée-sortie (σ = (σ1, ..., σn), s),
d’identiﬁer dans s l’ensemble de sous-chaînes {s1, ..., sk} impactées par l’entrée σ, et pour
chaque sous-chaîne si, d’identiﬁer l’élément de l’entrée lui étant associée : une sous-chaîne σsub
∈ σj. Ce matching entre les sous-parties si de s et les chaînes σsub
de σ associées représente les
couples de blocs. Les sous-chaînes de s n’étant pas impactées par l’entrée σ sont des constantes.
Un couple de blocs (σsub
une sous-chaîne de σ
pouvant permettre de construire si. Les couples de blocs lui étant fournis, QuickMixte construit
les sous-programmes permettant de construire chaque sous-chaîne si par appel de FlashFill et à
la ﬁn procède à une combinaison de sous-programmes pour obtenir des programmes permettant
de construire s à partir de σ. Les sous-programmes obtenus sur chaque couple de blocs, sont
de la forme d’un programme retourné par FlashFill i.e, une formule de concaténation (Conca-
tenate). Le but étant d’obtenir des programmes cohérents avec l’exemple (σ = (σ1, ..., σn), s),
on va combiner les sous-programmes dans l’ordre des si pour obtenir les programmes ﬁnaux.
Ces couples de blocs fournis permettent de guider plus ﬁnement l’espace de recherche dans la
mesure où le traitement d’une partie de la sortie ne se fait pas en exploitant toute l’entrée mais
une partie précise de cette dernière. Par exemple, soit un couple d’exemple (σ = "Data wran-
gling", s = "Dg") ; on a deux couples de blocs à savoir ("Data", "D") et ("wrangling", "g").
Avec le premier couple de blocs, on trouve les sous-programmes permettant d’obtenir "D" dans
"Data" (extraction du premier caractère) et le deuxième couple de blocs permet de trouver les
sous-programmes permettant d’obtenir "g" dans "wrangling" (extraction du dernier caractère) ;
les concaténations de ces sous-programmes donnent les programmes permettant d’obtenir "Dg"
à partir de "Data wrangling". En d’autres termes, QuickMixte est une combinaison des résultats
d’exécutions de FlashFill sur les couples de blocs. Pour plusieurs couples d’exemples donnés,
l’ensemble de programmes est l’intersection des programmes obtenus pour chaque exemple.

3.3 QuickFill

L’approche QuickMixte précédente permet de réduire l’espace de programmes car elle laisse
certaines sous-chaînes de s inexplorées et pour chaque sous-chaîne de s traitée, elle exploite
une sous-partie σj de σ. Cependant, l’algorithme de FlashFill est entièrement conservé sur le
traitement de chaque couple de blocs car, chaque couple de blocs (σj, si) est traitée par appel
de FlashFill. Cette pratique peut empêcher une réduction stricte de l’espace de programmes,
car comme l’algorithme original, par conséquent,QuickMixte hérite de certains défauts de Fla-
shFill. Pour chaque couple (σj, si), QuickFill se sert du langage de FlashFill pour construire les
programmes correspondant. Au lieu de traiter individuellement chaque sous-partie de si pour
trouver les sous-programmes, QuickFill cherche directement la chaîne si pour construire les

4

j

j

j

sous-programmes . Il faut noter que dans QuickFill, la constructions de blocs se fait de la même
façon que dans QuickMixte à la seule différence que pour un couple de blocs (σsub
, si), si doit
être une sous-chaîne consécutive de la sous-partie de σsub
associée ; pourtant avec QuickMixte,
si n’est pas nécessairement une sous-chaîne consécutive de σsub
. Par exemple, avec QuickMixte
on peut avoir pour couple de blocs ("Docteur", "Dr") mais avec QuickFill ce n’est pas pos-
sible car "Dr" n’est pas une sous-chaîne de "Docteur" ; par contre, ("Docteur", "D") est valide
comme couple de blocs que ce soit pour QuickMixte ou pour QuickFill. Il est important de noter
que dans de nombreux cas, QuickMixte et QuickFill demandent le même nombre de couples de
blocs et que QuickFill obtenir de meilleurs résultats comme le montrent les expérimentations.
Une chaîne s de longueur n a au total n(n+1)
sous-chaînes possibles. Étant donné (σ, s) un
couple de blocs, FlashFill construit les sous-programmes associés à chaque sous-chaîne de s à
partir de toute l’entrée σ. QuikFill évite d’explorer toutes les sous-chaînes de s et n’utilise que
les parties de σ associées aux sous-chaînes de s à explorer. Contrairement à quickMixte, Les
sous-programmes obtenus avec QuickFill sont élémentaires i.e, sans formules de concaténation.
les programmes ﬁnaux s’obtiennent par construction des formules Concatenate dans l’ordre des
si comme dans QuickMixte. La section suivante présente les expérimentations.

2

IV EXPÉRIMENTATIONS

Il est important de noter que dans cet article, nous nous basons sur l’algorithme FlashFill tel
que déﬁni dans [4], et pas sur la version qui peut être testée dans Excel 365. Par ailleurs, notre
but étant de tester l’intérêt d’ajouter certaines interactions avec l’utilisateur et pas de reproduire
FlashFill dans toute sa généralité, nous ne considérons pas le constructeur Loop du langage
de manipulation de chaînes de caractères. Nous ne considérons pas non plus le constructeur
Switch, qui permet de gérer des conditions dans les programmes lorsque les exemples sont de
différentes formes i.e lorsque les exemples se partitionnent en plusieurs ”types”, chaque type
étant résolu par une forme de programme de transformation de chaînes différent 1.

Aﬁn de montrer l’intérêt de QuickFill et QuickMixte, nous avons mené une série d’expérimenta-
tions dans laquelle nous évaluons le nombre de programmes inférés par QuickFill et QuickMixte
par rapport à FlashFill, le taux de programmes corrects - un programme est dit correct lorsqu’il
capture bien l’intention de l’utilisateur i.e, produit de bonnes sorties sur toutes les entrées - dans
QuickFill et QuickMixte par rapport à FlashFill. Nous évaluons aussi le temps de construction
des programmes et l’espace mémoire qu’ils occupent.

Les expérimentations ont été menées sur une machine Core i3 2.1 GHz dotée d’une mémoire
RAM de 8Go. Les méthodes QuickMixte, QuickFill et FlashFill Light ont été implémentées en
Python. Le code et les données sont disponibles sur github 2.

Jeux de données. Les jeux de données utilisés 3 ont été obtenus en adaptant les cas traités dans
l’article de FlashFill [4]. La génération de ces jeux de données s’est faite via un générateur aléa-
toire de mots à partir d’expressions régulières 4. Chaque jeu de données contient 30 éléments
dont les premiers couples (entr´ee, sortie) représentent les exemples d’entraînement (i.e., à
partir desquels les programmes sont appris) et le reste représente les exemples de tests (i.e., les

1. Nous travaillons dans la suite avec une version simpliﬁée de FlashFill que nous avons appelé FlashFill Light.
2. https://github.com/vanes11/FlashFill_QuickFill_Mixte
3. https://github.com/vanes11/FlashFill_QuickFill_Mixte/tree/master/Bench

marks

4. https://onlinerandomtools.com/generate-random-data-from-regexp

5

entrées sur lesquelles les programmes générés sont testés). Les jeux de données couvrent plu-
sieurs types de tâches comme l’extraction des prénoms à partir des adresses mails, l’extraction
des jours dans les dates ou encore l’extraction des initiales d’un sigle.

Évaluation du nombre de programmes. On cherche à comparer le nombre total de programmes
et le nombre de programmes corrects produits par FlashFill par rapport à QuickFill et Quick-
Mixte. Les programmes sont obtenus sur chaque jeu de données pour un nombre d’exemples
d’apprentissage allant de 1 à 4, le tableau 1 présente les résultats pour 1 exemple d’appren-
tissage sur nos 12 jeux de données. La colonne T otal représente la totalité des programmes
générés et la colonne Correct représente le nombre de programmes corrects dans la totalité
des programmes. On observe que QuickMixte permet de réduire le nombre total de programmes
générés de plus de 75% pour 10 jeux de données. Toutefois, de part la réutilisation directe de
l’algorithme FlashFill sur chaque couple de blocs par QuickMixte, il reste 2 jeux de données
où aucune réduction n’est observée. Notre deuxième contribution QuickFill, qui élague plus
l’espace de recherche, permet d’obtenir une réduction supérieure à 81% sur l’intégralité des des
jeux de données.

FlashFill

QuickMixte

QuickFill

Benchmarks
B1
B2
B3
B4
B5
B6
B7
B8
B9
B10
B11
B12

Total
6482
27398
196
13744
2089550
96914
2106048
473170
2897578
783760
32
14486

Correct
2
18302
9
6
2
96914
756899
471396
982278
779076
22
228

Total
6482 (0.0%)
3158 (88.47%)
49 (75.0 %)
672 (95.11%)
4244 (99.8%)
1521 (99.43 %)
11520 (98.45 %)
4489 (99.05%)
343 (99.99%)
20497 (97.38%)
32 (0.0%)
25 (99.83%)

Correct
57
2102
9
51
2
1521
9920
4356
54
20196
22
21

Total
6 (99.91%)
22 (99.92%)
36 (81.63%)
60 (99.56%)
18 (99.99%)
1444 (98.51%)
14 (99.99%)
4356 (99.08%)
216 (99.99%)
20196 (97.42%)
6 (81.25%)
16 (99.89%)

Correct
3
22
9
15
2
1444
14
4356
54
20196
6
1

TABLE 1 – Nombre de programmes générés par FlashFill, QuickMixte et QuickFill ; le pourcentage entre
parenthèse représentent le pourcentage de réduction par rapport à FlashFill.

Évaluation du taux de programmes corrects.

Le tableau 1 donne une idée de la réduction en nombre de programmes générés qu’effectuent
QuickMixte et QuickFill. Nous évaluons ensuite la variation des taux de programmes corrects
dans QuickFill, QuickMixte et FlashFill en fonction du nombre d’exemples d’apprentissage al-
lant de 1 à 4 pour chaque jeu de données. La ﬁgure 1 se limite à deux jeux de données ; des
résultats similaires sont observés sur les autres jeux de données. Cette expérience montre que
pour un nombre d’exemples donné, QuickFill et QuickMixte ont, dans la majorité des cas, de
meilleurs taux de programmes corrects par rapport à FlashFill. En pratique, cela signiﬁe qu’il
faut souvent moins d’exemples pour découvrir les programmes capturant l’intention de l’utili-
sateur. Par ailleurs, on remarque aussi que QuickMixte n’est pas aussi efﬁcace que QuickFill en
terme en réduction du nombre de programmes et de meilleur taux de programmes corrects.

6

FIGURE 1 – Taux de programmes corrects dans les benchmarks {B3, B4}.

Évaluation du temps de construction des programmes et de l’occupation mémoire. Nous
observons ici le comportement de QuickFill, QuickMixte et FlashFill en terme de temps de
construction des programmes et d’occupation mémoire en fonction du nombre d’exemples
d’apprentissage (de 1 à 4). Ces deux métriques nous permettent de vériﬁer l’hypothèse selon
laquelle, réduire le nombre de programmes permettrait de gagner en temps d’exécution et en
occupation mémoire.

La ﬁgure 2 présente la variation du temps de construction des programmes dans QuickFill, Qui-
ckMixte et FlashFill sur les jeux de données {B5, B6}. La légende est la suivante : t-QuickFill
= temps de QuickFill, t-Mixte = temps de QuickMixte et t-FlashFill = temps de FlashFill.
Nous observons sur cette ﬁgure que le temps de construction des programmes dans FlashFill
est toujours supérieur à celui de QuickFill et QuickMixte.

FIGURE 2 – Temps de construction des programmes dans les benchmarks {B5, B6}.

La ﬁgure 3 présente la variation de l’occupation en mémoire des programmes dans Quick-
Fill, QuickMixte et FlashFill sur les jeux de données {B4, B5}. La légende est la suivante :
t-QuickFill = mémoire de QuickFill, t-Mixte = mémoire de QuickMixte et t-FlashFill = mé-
moire de FlashFill. Comme pour le temps de construction de programmes, les programmes
inférés par FlashFill requièrent plus d’espace mémoire que ceux de QuickFill, QuickMixte car
ils sont plus nombreux.

V CONCLUSION

La synthèse de programmes est une solution de plus en plus utilisée pour décharger l’utilisateur
de tâches fastidieuses et répétitives comme certaines transformations de données. La difﬁculté

7

FIGURE 3 – Occupation mémoire des programmes dans les benchmarks {B4, B5}.

de ce domaine est de naviguer dans un espace de recherche immense, tout en limitant au maxi-
mum les interactions avec l’utilisateur (en général il est juste autorisé de lui demander quelques
exemples). Plus l’espace de programmes est grand, plus il peut être coûteux de trouver le(s)
programme(s) cohérent(s) avec l’intention de l’utilisateur. Dans cet article, nous avons présenté
QuickMixte et QuickFill, deux approches qui demandent à l’utilisateur des interactions plus sou-
tenues sur les exemples qu’il fournit, mais en contrepartie réduisent dans la majorité des cas le
nombre total de programmes, peuvent arriver plus vite à des programmes correspondant à son
intention : à la fois en moins de temps de calcul, et via moins d’exemples.

Une perspective d’amélioration du temps demandé à l’utilisateur par QuickMixte et QuickFill
serait de fournir les blocs uniquement dans les sous-chaînes de sorties ; ce qui empêche l’uti-
lisateur de fournir les correspondances dans les chaînes d’entrées et réduit ainsi le nombre de
blocs à fournir.

RÉFÉRENCES

[1] H. LIEBERMAN. Your wish is my command : Programming by example. Morgan Kauf-

mann, 2001.

[2] T. LAU, S. A. WOLFMAN, P. DOMINGOS et D. S. WELD. « Programming by demonstra-
tion using version space algebra ». In : Machine Learning 53.1 (2003), pages 111-156.
[3] T. LAU. « Why programming-by-demonstration systems fail : Lessons learned for usable

ai ». In : AI Magazine 30.4 (2009), pages 65-65.

[4] S. GULWANI. « Automating string processing in spreadsheets using input-output examples ».

In : ACM Sigplan Notices 46.1 (2011), pages 317-330.

[5] D. PERELMAN, S. GULWANI, T. BALL et D. GROSSMAN. « Type-directed completion of
partial expressions ». In : Proceedings of the 33rd ACM SIGPLAN conference on Program-
ming Language Design and Implementation. 2012, pages 275-286.

[6] H. D. T. NGUYEN, D. QI, A. ROYCHOUDHURY et S. CHANDRA. « Semﬁx : Program
repair via semantic analysis ». In : 2013 35th International Conference on Software Engi-
neering (ICSE). IEEE. 2013, pages 772-781.

[7] A. V. NORI, S. OZAIR, S. K. RAJAMANI et D. VIJAYKEERTHY. « Efﬁcient synthesis of
probabilistic programs ». In : ACM SIGPLAN Notices 50.6 (2015), pages 208-217.
[8] S. GULWANI. « Programming by examples ». In : Dependable Software Systems Enginee-

ring 45.137 (2016), pages 3-15.

[9] S. GULWANI, O. POLOZOV, R. SINGH et al. « Program synthesis ». In : Foundations and

Trends® in Programming Languages 4.1-2 (2017), pages 1-119.

8

A ANNEXE

Un langage est principalement représenté par sa syntaxe et sa sémantique ; sa syntaxe décrit la forme propre de ses
programmes, tandis que sa sémantique indique ce que ses programmes signiﬁent i.e, ce que fait chaque programme
lorsqu’il est exécuté. Nous présentons ci-dessous la syntaxe et la sémantique du langage moteur de FlashFill, pour
plus de details, se référer à [4].

Syntaxe

FlashFill manipule des ensembles de programmes de chaînes de caractères. Ainsi, l’élément principal du langage
est une expression de programme qui représente un programme de transformation de chaînes de caractères capables
de transformer des chaînes d’entrée σ en des chaînes de sortie s. La ﬁgure 4 représente la syntaxe d’une expression
de programme de transformation de chaînes de caractères.

FIGURE 4 – Syntaxe d’une expression de programme [4]

Les règles de production de cette grammaire sont les éléments de la forme A := B, le non-terminal P qui est
une expression de programme de transformation de chaînes de caractères représente l’axiome de cette grammaire.
Soit C la classe de caractères constituée de l’ensemble des caractères : numériques, alphabétiques (majuscule,
minuscule), alphanumériques, d’autres caractères spéciﬁques comme les ponctuations et ¬C la classe des éléments
qui ne sont pas dans C ; nous présentons ci-dessous les éléments de la ﬁgure 4.

− p := Cpos(k), Pos(r1, r2, c) est une expression de position, où c := k | k1w + k2 est une expression entière,
− T := C + | [¬C] + |SpecialT oken est un token, SpecialT oken étant un StartTok ou un EndTok et r :=

TokenSeq(T1, .., Tm) est une séquence d’expressions régulières,

− f := SubStr(vi, p1, p2) | ConstStr(s) | Loop(λw : w) est une expression atomique, e := Concatenate(f1,...,f n)

est une "trace expression",

− π := Match(vi, r, k) | ¬ Match(vi, r, k) est un prédicat,
− P := Switch((b1, e1),..,(bn, en)) est une expression de programme et b := d1 ∧ .. ∧ dn est expression

booléenne.

Sémantique

Cette section présente la signiﬁcation des opérateurs du langage précédent.

− (cid:15) dénote une chaîne de caractères vide, ⊥ dénote une valeur indéﬁnie i.e, si l’un des arguments d’un

constructeur est ⊥, il retourne ⊥.

− ConstStr est l’expression de constante ; soit s une sous-chaîne,ConstStr(s) = s.

− Concatenate(f1,...,f n) = f1f2...fn.
− TokenSeq(T1, .., Tm) est une séquence de tokens T1, .., Tm, tout comme l’opération de concaténation. Les
Tokens sont représentés par leurs noms représentatifs ; par exemple AlphTok renvoie à une séquence de
caractères alphabétiques, NumTok renvoie à une séquence de caractères numériques.

− SubStr(vi, p1, p2) retourne la sous-chaîne de vi allant des positions p1 à p2, la chaîne étant numéroté de 0

à n − 1, où n est la longueur de vi. Par exemple, soit vi = "IBM" alors SubStr(vi, 1 ,2) = "BM".

9

− Cpos(k) et Pos(r1, r2, c) sont des expressions de positions. Une position peut être obtenue en parcourant la
chaîne de la gauche vers la droite (selon que k soit positif pour Cpos(k) et c positif pour Pos(r1, r2, c)) ou
de la droite vers la gauche (selon que k soit négatif ou c négatif). Pour une chaîne s donnée, nous avons les
déﬁnitions suivantes :

[[CPos(k)]] s =

(cid:26) k

Length(s) + k

if k ≥ 0
otherwise

Par exemple, soit la chaîne de caractères s = "IBM", nous pouvons représenté quelques positions comme
suit : Cpos(0) représente l’indice du premier caractère ("I") de s à partir de la gauche, Cpos(-1) représente
l’indice du dernier caractère ("M") de s à partir de la droite i.e Cpos(0) = 0 et Cpos(-1) = 2.

[[Pos]] s = t, ∃t1, t2, 0 ≤ t1 < t ≤ t2, s[t1 : t − 1] match r1, s[t : t1] match r2.

Pos(r1, r2, c) retourne l’indice de la cieme occurrence de la sous-chaîne qui match r1r2 dans s à partir de
la gauche si c positif et à partir de la droite sinon.
Par exemple, soit la chaîne de caractères s = "Vanes10Laure11" :

− Pos(AlphTok, NumTok, 1) = 5 : indice de début de la chaîne NumTok dans la première occurrence
de "AlphaTokNumtok" ("vanes10") à partir de la gauche ; il s’agit de l’indice de début de "10".
− Pos(AlphTok, NumTok, -1) = 12 : indice de début de la chaîne NumTok dans la première occurrence

de "AlphaTokNumtok" ("laure11") à partir de la droite ; il s’agit de l’indice de début de "11".

− Si r2 = (cid:15), par convention (cid:15) n’a ni indice de début ni indice de ﬁn, par conséquent, Pos(r1, r2, c)

retourne l’indice de ﬁn de cieme occurrence de r1 dans s.

− Une expression de programme P est un constructeur Switch dont les arguments sont les paires disjointes

(b1, e1),..,(bn, en) où les bi sont des expressions booléennes et les ei sont les "trace expression".

− Le constructeur Loop(λ w : e) sur une entrée σ permet de générer la concaténation des chaînes obtenues
en exécutant de manière répétitive l’expression e tout le long de σ. Loop(λ w : e) produit la concaténation
d’une séquence e1, ...en où ei est le ieme résultat d’exécution du Loop sur σ lorsque le paramètre w vaut i.

FlashFill manipule des ensembles d’expressions de programmes pour des transformations de chaînes de caractères.
Pour cela, il faut une structure de données permettant de manipuler aisément de grands ensembles de données donc,
les opérations de construction d’expressions de programmes doivent pouvoir prendre des ensembles de données
en arguments. Pour se faire, le langage correspondant n’est rien d’autre qu’une généralisation du langage présenté
précédemment. En d’autres termes, il s’agit du langage précédent à la différence que les constructeurs ont été
surchargés pour prendre en argument des ensembles de données.

10

