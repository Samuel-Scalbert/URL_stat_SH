Effectiveness assessment of Cyber-Physical Systems
Gérald Rocher, Jean-Yves Tigli, Stéphane Lavirotte, Nhan Le Thanh

To cite this version:

Gérald Rocher, Jean-Yves Tigli, Stéphane Lavirotte, Nhan Le Thanh. Effectiveness assessment of
International Journal of Approximate Reasoning, 2020, 118, pp.112-132.
Cyber-Physical Systems.
￿10.1016/j.ijar.2019.12.002￿. ￿hal-02441654￿

HAL Id: hal-02441654

https://hal.science/hal-02441654

Submitted on 16 Jan 2020

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Effectiveness Assessment of Cyber-Physical Systems

Gérald Rochera,b, Jean-Yves Tiglib,c, Stéphane Lavirotteb,c, Nhan Le Thanhb,c

aGFI Informatique, Saint-Ouen, France
bUniversité Côte d’Azur (UCA), Sophia Antipolis, France
cCNRS, laboratoire I3S, Sophia Antipolis, France

9
1
0
2
c
e
D
3
1

]
I

A
.
s
c
[

4
v
3
4
3
6
0
.
1
0
9
1
:
v
i
X
r
a

Abstract

By achieving their purposes through interactions with the physical world, Cyber-Physical Sys-
tems (CPS) pose new challenges in terms of dependability. Indeed, the evolution of the physi-
cal systems they control with transducers can be affected by surrounding physical processes
over which they have no control and which may potentially hamper the achievement of their
purposes. While it is illusory to hope for a comprehensive model of the physical environment
at design time to anticipate and remove faults that may occur once these systems are de-
ployed, it becomes necessary to evaluate their degree of effectiveness in vivo. In this paper,
the degree of effectiveness is formally deﬁned and generalized in the context of the measure
theory. The measure is developed in the context of the Transferable Belief Model (TBM), an
elaboration on the Dempster-Shafer Theory (DST) of evidence so as to handle epistemic and
aleatory uncertainties respectively pertaining the users’ expectations and the natural vari-
ability of the physical environment. The TBM is used in conjunction with the Input/Output
Hidden Markov Modeling framework we denote by Ev-IOHMM to specify the expected evolu-
tion of the physical system controlled by the CPS and the tolerances towards uncertainties.
The measure of effectiveness is then obtained from the forward algorithm, leveraging the
conﬂict entailed by the successive combinations of the beliefs obtained from observations of
the physical system and the beliefs corresponding to its expected evolution. The proposed
approach is applied to autonomous vehicles and shows how the degree of effectiveness can
be used for bench-marking their controller relative to the highway code speed limitations and
passengers’ well-being constraints, both modeled through an Ev-IOHMM.

Keywords: Cyber Physical Systems, Degree of Effectiveness, Transferable Belief Model,
Input/Output Hidden Markov Model, Zone of Viability

1. Introduction

Generally, computing systems are understood as being purposeful processing units, directed
to produce expected results by means of computational resources manipulating data through
controlled computational environments.

At the infrastructure level, some hardware and software mechanisms ensure correct opera-
tion of the computing resources (e.g. power-on self-test, etc.), integrity and persistence of
the data (e.g. Cyclic Redundancy Check (CRC), memory content refresh, etc.). At the system
level, accesses to the computational resources are made safe by an operating system or a
middleware. The computational environments being controlled, the production and the per-
sistence of the expected results are guaranteed "by design" solely provided that the computer

Email addresses: gerald.rocher@gfi.fr (Gérald Rocher), jean-yves.tigli@unice.fr (Jean-Yves Tigli),

stephane.lavirotte@unice.fr (Stéphane Lavirotte), nhan.le-thanh@unice.fr (Nhan Le Thanh)

Accepted for publication to International Journal of Approximate Reasoning

December 16, 2019

 
 
 
 
 
 
program issues the right commands to the computational resources. In this sense, a computer
program is a perfect deterministic model of a computing system and the question does not
even arise that, x being a variable, the execution of the following code snippet will lead its
value to be set to 6 into the memory.

1 x ← 1;
2 Wait(10000s);
3 Add(x, 5);
4 Wait(10000s);
5 Assert(x, 6);

// TRUE

Let us now consider Cyber-Physical Systems (CPS) as being orchestrations of distributed com-
puting and physical systems [1]. CPS can be understood as being "cyber" physical processes
where some properties of a physical system of interest are purposefully modiﬁed by means
of computational resources manipulating them through transducers (e.g. sensors and actua-
tors). For instance, let us keep the template of the preceding code snippet by considering that
the variable to be modiﬁed now corresponds to a physical property of the physical system
(e.g. the temperature in a living room).

1 SetTemperature(LivingRoom, 18 ℃);
2 Wait(10000s);
3 IncreaseTemperature(LivingRoom, 5 ℃);
4 Wait(10000s);
5 Assert(Temperature, LivingRoom, 23 ℃);

// ???

What trust can we have that the temperature in the living room is going to be changed to
23 ℃? In other words, can one consider the above code snippet as a perfect deterministic
model of the physical system? Considering that the living room is a non-isolated physical
system, the answer is "no". Such systems are driven by non-deterministic dynamics, at any
time, the temperature of the living room can be affected by surrounding processes over which
the computing system has no control [2] [3] [4]. This situation is aggravated for the Internet
of Things (IoT)-based CPS whose underlying infrastructure is volatile. Indeed, their structural
components being embedded into physical things, their availability cannot be ensured over
time. Consequently, the attainment of the CPS purposes cannot be guaranteed solely "by
design" [1].

As a solution to this problem, we propose to quantitatively assess, at run-time, to which extent
the CPS purposes are met. In other words, it is about providing the degree of effectiveness
of the CPS as a measure of the concrete evolution of the physical system according to the
expected evolution. To be more precise about the measure and the meaning we seek to give
it as an assessment of the degree of effectiveness of the CPS, we borrow some terminol-
ogy employed in the viability theory [5]. Let us assume that the expected evolution of the
physical system can be speciﬁed as a deterministic model, free from uncertainties, where (1)
state transitions are determined by contextual events (stimuli), (2) states are qualiﬁed by the
expected physical effects resulting from actuators over which the computing system has con-
trol. Zones of Viability extend this deterministic point of view with tolerances accounting for
aleatory uncertainties pertaining the natural variability of actuators effects and sensors read-
ings and for epistemic uncertainties relative to the users’ satisfaction towards the concrete
evolution of the physical system.
In this paper, we propose to generalize the deterministic model in the framework of the mea-
sure theory. Doing so, one can leverage the set of measures (probabilities, possibilities, etc.)

2

as a means of deﬁning zones of viability from which one can reason in order to obtain the
degree of effectiveness. By obtaining a quantitative measure of the degree of effectiveness,
(1) one can leverage this measure within a feedback loop so as for the controller of the system
to minimize the behavioral drift (e.g. negative feedback control systems [6]), (2) one can use
this measure as a bench-marking tool used to compare algorithms deployed for controlling
CPS.

2. Related work and contributions

The work presented in this paper is closely related to the dependability of the computing sys-
tems [7]. Within computer science, this term refers to the trust that can justiﬁably be placed
in the service delivered by computing systems and covers all their critical quality aspects [8].
In other words, it reﬂects users’ degree of trust in these systems. Among the attributes of
dependability [9], availability (i.e. readiness for correct service), reliability (i.e. continuity of
correct service), safety (i.e. absence of consequences on the users and the environment) and
integrity (i.e. absence of improper system alterations) characterize the immunity of comput-
ing systems towards uncontrolled physical processes and associated uncertainties (i.e. threats
that can affect computing systems operation and undermine their dependability [9]).
The assessment of the dependability can be done at design time through analytic metrics
using models of the systems and, whenever possible, the known uncertainties (e.g. U-Test
[10]). Run-time monitoring involves direct and indirect empirical metrics, respectively mea-
suring the system itself through probes (whenever possible) and its effects within the physical
environment through sensors.

While methodologies involved at design time (e.g. Model-based design) and at testing phase
(e.g. Model checking, simulation, etc.) are respectively devoted to fault prevention and fault
removal, run-time monitoring is devoted to automatic fault and anomaly detection [11]. The
most common formulation of the anomaly detection problem is to determine if a given test se-
quence is anomalous with respect to normal sequences. More formally, given a set of n normal
sequences S = {(Sk)1,k∈(cid:78)(cid:63) , . . . , (Sk)n,k∈(cid:78)(cid:63) } and a test sequence (Sk)k∈(cid:78)(cid:63) , it is about comput-
ing an anomaly score for (Sk)k∈(cid:78)(cid:63) , with respect to S. It is assumed that test sequences might
be misaligned in time and space w.r.t the normal sequences. We do also consider complex,
and collective anomalies. On the one hand, when contextual attributes can be associated with
observations (e.g. time, location, etc.), contextual anomalies are corresponding to behaviors
that are valid under some conditions but are abnormal in others. For instance, in European
countries, normally high temperatures during the summer can be considered as contextual
anomalies if they occur during the winter (time-based contextual anomaly). On the other
hand, collective anomalies correspond to a collection of consecutive behaviors which are not
abnormal by themselves but are abnormal when they occur together as a collection [12].
Approaches that address these anomalies fall into three categories described hereafter.

2.1. Prediction-based approaches
These approaches consist in modeling legitimate behavior through a parametric
model learned from observations and further used for predicting observation at
each time t. Abnormal behaviors are those whose real observations differ from the
predicted ones.

In [13], authors use stacked Long Short-Term Memory (LSTM) networks [14] for anomaly/fault
detection in time series. A network is trained on non-anomalous data and used as a predictor
over a number of time steps. The resulting prediction errors are modeled as a multivariate
Gaussian distribution, which is used to assess the likelihood of anomalous behavior. In [15],

3

authors present an unsupervised approach to detect cyber-attacks in Cyber-Physical Systems
(CPS). A Recurrent Neural Network (RNN) [16] is used as a time series predictor. The Cumu-
lative Sum method is further used to identify anomalies in a replicate of a water treatment
plant.

pros & cons: these models are difﬁcult to train [17] and are generally hardly interpretable,
their intrinsic structure and parameters making unclear the mapping between the variables
and the observations [18]. For instance, such models, once learned make difﬁcult, if not
impossible, the modiﬁcation of their intrinsic parameters in order to tune a posteriori the tol-
erances pertaining the epistemic uncertainties. More importantly, learning a comprehensive
model of the CPS behavior based on observations is often impracticable with regards to their
complexity [1].

2.2. Model drift-based approaches
These approaches are relative to the anomalous evolution of the model parameters.
The basic idea is to build a parametric behavioral test model from test sequences
as they arrive and compare it with the normal behavioral model. Dissimilarities
between models give the anomaly score.

Authors in [19] focus on the quantitative measure of concept drift and introduce the notion of
drift magnitude whose value can be quantiﬁed through distance functions such as Kullback-
Leibler Divergence or Hellinger Distance. Close to the idea of concept drift is the notion of
It quantiﬁes a
Bayesian Surprise [20]. A surprise quantiﬁes how data affects an observer.
mismatch between an expectation and what is actually observed by measuring the difference
between posterior and prior beliefs of the observer. In [21] authors propose using Bayesian
surprise as a measure of the learning progress of reinforcement learning agents.

pros & cons: being based on the distance between prior and posterior beliefs, the main
disadvantage of these approaches concerns the speed of convergence to an accurate test
model, highly dependent on the number of observations needed to learn it. Hereby, a short
time anomalous behavior might be "attenuated" or even not detected. These approaches are
mainly leveraged in autonomic computing and the models@run-time community [22] where
an initial model is updated over time taking into account unanticipated evolutions of the
environment. In this context, above a given threshold, the quantitative drift value is used to
trigger the update of the model with the newly learned parameters, assuming it represents
the correct behavior.

2.3. Likelihood-based approaches
These approaches consist in modeling legitimate behavior through a parametric
model and considering abnormal behaviors as those having low "likelihood" to have
been generated by the model.

In this category, Dynamic Bayesian networks (DBN) and derivatives (n-order Markov chains)
are widely used where tolerances towards uncertainties are generally described through prob-
ability density functions (pdf). An extension of the Markovian models, denoted by Hidden
Markov Models (HMM), consists in considering the case where states of the model are "hid-
den" [23], i.e. not directly observable, or partially hidden [24]. Such models are particularly
well suited in the context of this paper where it is assumed that while the expected behavior
of a CPS can be described a priori, the prior knowledge of its concrete internals and surround-
ing environment is unlikely available [1]. In this context, the likelihood of a given observation
sequence ( (cid:126)yt)T
is inferred from the model of the expected behavior of the system by using

t=1

4

the probabilistic forward algorithm. This algorithm computes the likelihood of all the possi-
ble sequences of hidden states given the observation sequence ( (cid:126)yt)T
. The likelihood of a
particular sequence of hidden states (t)T
is given
by:

given the observation sequence ( (cid:126)yt)T

t=1

t=1

t=1

p (cid:128)(t)T

t=1

|( (cid:126)yt)T

t=1

(cid:138) = p(1) × p(1| (cid:126)y1) ×

(cid:0)p((t)|(t−1)) × p((t)| (cid:126)y(t))(cid:1)





(1)





T
(cid:89)

t=2

=1

Some works have extended the HMM in the framework of the Transferable Belief Model (TBM)
[25], an elaboration on the Dempster-Shafer Theory (DST) of evidence where tolerances to-
wards uncertainties are neither described by probabilities but by belief functions. In [26], the
author describes previous works in using HMM with TBM [27],[28] in the context of analyz-
ing time series and denoted as Evidential HMM (EvHMM). Probability-based HMM is built upon
the Closed World Assumption (CWA), i.e. probabilities are spread on the states {1, . . . , N}
deﬁned in the model with (cid:80)N
p() = 1, i.e. p(Ω) = 1 and p(∅) = 0. TBM, on his side, is
built upon the Open World Assumption (OWA). It allows to associate a belief value (mass of
conﬂict m) to the empty set, i.e. m(∅) ≥ 0, meant to quantify the degree of inconsistency
of the observations with regards to the model. This is coherent with the meaning we seek to
give to the measure of effectiveness. In this context, it is proven in [29] that the plausibility
of the observation sequence to have been produced by the model, i.e. the plausibility of the
model, is given by p(Ω) = 1 − m(∅) obtained from the evidential forward algorithm, likewise
the likelihood obtained from the probabilistic forward algorithm.
Close to the concern of CPS behavioral analysis, the case of Evidential HMM with application
to dynamical system analysis is described in [30]. However, HMM-based methods do not con-
sider state-transitions probabilities governed by inputs necessary in modeling CPS expected
behavior.
A way to cope with this limitation is to use the Input/Output HMM (IOHMM), ﬁrst introduced in
[31]. With this modeling framework, state-transitions probabilities are not hardcoded as it is
the case with HMMs. Instead, the probability of a state-transition to occur depends on some
input values. In this context, the observation sequence consists in an input sequence ( (cid:126)t)T
and an output sequence ( (cid:126)yt)T
hidden states (t)T

t=1
In this context, the likelihood of a particular sequence of

given the sequences ( (cid:126)t)T

is given by :

and ( (cid:126)yt)T

t=1

.

t=1

t=1

t=1

p (cid:128)(t)T

t=1

, ( (cid:126)t, (cid:126)yt)T

t=1

(cid:138) = p(1) × p(1| (cid:126)y1) ×

(cid:0)p((t)|(t−1), (cid:126)(t−1)) × p((t)| (cid:126)y(t))(cid:1)





(2)





T
(cid:89)

t=2

pros & cons: a key advantage here is that these models are interpretable, making clear (1)
the mapping between the variables and the observations, (2) the description of the zones
of viability through probabilities or belief functions.
In this category, HMM-based modeling
frameworks and more particularly the IOHMM where state-transitions probabilities depend on
some input values, are well suited for representing dynamical systems [32][33]. Moreover,
such models assume that the internals and the environment of the systems considered are
not necessarily known a priori. This makes sense in the context of CPS that, with regards
to their complexity, are unlikely to be comprehensively modeled. At best, one can deﬁne
their expected behavior through the effects they are supposed to produce in response to
some events. By assuming OWA, the Ev-IOHMM would be a good candidate so as to
compute the degree of effectiveness of CPS. However, to date, no effort has been
put on elaborating on such modeling framework.

5

2.4. Contributions
In this paper, we do extend previous works on the probabilistic and the possibilistic IOHMM
likelihood-based approaches respectively described in [34] and [35] in the framework of the
TBM (we denote Ev-IOHMM). The work done in [36],[37] and [38] being considered as the
starting points, the main contributions of this paper are the following:

1. The degree of effectiveness is formally deﬁned and generalized in the context of the

measure and the viability theories,

2. The probabilistic IOHMM described in [31] is extended into the TBM framework, resulting
in the Ev-IOHMM. To this end, we do rely on previous contributions done on extending
HMM to EvHMM [29][27]. The associated evidential forward algorithm is provided and
used for inferring the likelihood of the input/output observations to have been generated
by the model whose zones of viability are neither deﬁned through probabilities [34] nor
possibilities [35] but by belief functions.

3. The Evaluation of the approach is carried out on a simple yet revealing example, com-
plemented with a list of use-cases emphasizing its interest. Among these use-cases, we
do elaborate on a use-case in the domain of autonomous vehicles. The idea is to lever-
age the proposed approach as means for designers to benchmark the control systems
of these vehicles by relying on the measure of their effectiveness against constraints of
the highway code relative to speed limitations and passengers well-being, both modeled
through an Ev-IOHMM.

3. Mathematical background

3.1. Deterministic model of the expected behavior
In this paper, we do consider physical systems whose expected evolution under a CPS control
can be constrained through a deterministic model λ whose state transitions are determined by
contextual events (stimuli) while states are qualiﬁed by the expected physical effects resulting
from actuators over which the computing system has control. This model is formally deﬁned
by:






(t) = ((t−1), (cid:126)(t−1))
ψ(t) = G((t))
U(t) = U ((t−1), (t))
Y(t) = Y((t))

(State prediction)
(State emission)
(Finite set of inputs)
(Finite set of outputs)

(3)

with:

– t ∈ (cid:78)(cid:63),

– (t=1) is the known initial state,

– Ω = {1, . . . , N} is the ﬁnite set of states,

–  : Ω × (cid:82)m(t) → Ω, m(t) = |U(t)| ∈ (cid:78)(cid:63), is a state-transition function mapping a state (t) ∈ Ω
and an input vector (cid:126)(t) ∈ (cid:82)m(t) to a next state (t+1) ∈ Ω. Each element of (cid:126)(t) qualiﬁes
the observation of an event supposed to act on the state (t) to yield (t+1).
In this
context, (cid:116)((t)|(t−1)) = { (cid:126)1, . . . , (cid:126)n} (denoted (cid:116)(t) in the sequel) represents the set of input
vectors whose values are supposed to trigger a state-transition from the state (t) to the
state (t+1).

– G : Ω (cid:160) ψΩ, is a set-valued output function mapping each state (t) to a set ψ(t) =
{ (cid:126)y1, . . . , (cid:126)yj} of expected observations while being in state (t). The p elements of (cid:126)y ∈
(cid:82)p(t) , p(t) = |Y(t)|, 1 ≤  ≤ j, qualiﬁes an expected physical effect while being in state (t).

6

– U : Ω × Ω (cid:160) U is a function mapping a state-transition ((t−1), (t)) to the set of inputs U(t)

needed to qualify this state-transition,

– Y : Ω (cid:160) Y is a function mapping a state (t) to the set of outputs Y(t) needed to qualify

this state.

For instance, Fig.1 depicts the expected behavior of a simple CPS whose purpose is to adjust
the luminosity (physical property) of a room (the physical system) according to whether an
inhabitant is present or not. While no inhabitant is present in the room (characterized by
pres < 3) then the value provided from the luminosity sensor should be less than 5 (charac-
terized by m < 5). Here m = p = 1. Here, one may see a parallel with unit tests performed in

pres < 3.0

pres > 20.0

pres > 20.0

lum < 5.0

lum > 25.0

lowLuminosity (1)

pres < 3.0

highLuminosity (2)

Figure 1: Deterministic model describing the expected evolution of a physical system (here a room whose luminosity
level is supposed to change depending on whether an inhabitant is present or not).

software engineering for validating an algorithm. Some inputs are provided to the algorithm.
The output, resulting from the treatment of these inputs by the algorithm, is compared with
an expected output value. In this context, let us imagine one want to test that the sequence
( (cid:126)t, (cid:126)yt)T
: the algorithm under test is the one controlling
the CPS considered. The deterministic model of the expected behavior, here, plays the role of
an unit test deﬁned as follows :

leads the sequence of states (t)T

t=1

t=1

1(t) ((t−1), (cid:126)(t−1)) =

1(t) ( (cid:126)y(t)) =

(cid:167) 1 if (cid:126)(t−1) ∈ (cid:116)((t)|(t−1))

0 otherwise
(cid:167) 1 if (cid:126)y(t) ∈ ψ(t)
0 otherwise

The result of the test is then computed by :

Test(

(t)T
t=1
(cid:124) (cid:123)(cid:122) (cid:125)
Expected result

, ( (cid:126)t, (cid:126)yt)T
(cid:124)

(cid:123)(cid:122)
npts

t=1
(cid:125)

) =

T
(cid:89)

t=2

(cid:0)1(t) ((t−1), (cid:126)(t−1)) × 1(t) ( (cid:126)y(t))(cid:1)

(4)

without room for tolerance towards uncertainties, the test result can only be PASS or
FAIL, i.e. ∈ {0, 1}.

However, without being perfect, the luminosity level at 22.8 (state 2 in Fig.1) when an inhab-
itant is present may be still acceptable and effectiveness ∈ [0, 1]. So, one needs to extend
the deterministic model allowing to deﬁne tolerances pertaining the following uncertainties:

– The aleatory uncertainties which are most likely objective and relative to the natural
variability of the physical properties of interest whose values over time are most likely
distributed around an average value,

7

– The epistemic uncertainties which are most likely subjective and relative to users’ satis-

faction towards the physical system evolution.

Besides these uncertainties, one may also consider reliability uncertainties such as:

– The spatial uncertainties relative to the sensors location with respect to the physical

property of interest,

– The hardware uncertainties relative to the sensors accuracy and resolution,

– The model uncertainties relative to the designer of the model and its expertise on the

application domain.

3.2. Towards its formalization into the measure theory
So as to handle the uncertainties previously described, we propose to generalize the deter-
ministic model in the framework of the measure theory. Doing so, one can leverage the set
of measures (probabilities, possibilities, beliefs, etc.) as a means of deﬁning zones of viability
from which one can reason in order to obtain the degree of effectiveness.

3.2.1. Background
Before formally generalizing the deterministic model in the framework of the measure theory
and deﬁning the degree of effectiveness, let us ﬁrst review some key concepts of the measure
theory. The reader is referred to the literature for details on this theory [39].

Deﬁnition 1. (Measure) Let (X, X) be a measurable space where X is a countable set and
X is a σ-algebra over X. A function μ : X → (cid:82)≥0 is [40]:

1. Monotone if ∀A, B ∈ X, A ⊆ B implies μ(A) ≤ μ(B),

2. Normalized if μ(X) = 1,

3. Non-negative if ∀A ∈ X, μ(A) ≥ 0,

4. Additive if ∀A, B ∈ X where (A ∩ B) = ∅ then μ(A ∪ B) = μ(A) + μ(B),

The function μ is said to be an additive measure if it is monotone, non-negative, additive and
μ(∅) = 0. It is said to be a non-additive measure if it is monotone, non-negative, non-additive
and μ(∅) = 0. A measure is said to be a sub-measure if ∀A, B ∈ X, μ(A ∪ B) ≤ μ(A) + μ(B).

Deﬁnition 2. (Measurable Function) Let (X, X) and (Y, Y ) be measurable spaces where
X and Y are countable sets and where X and Y are ﬁnite σ-algebras. A function ƒ : (X, X) →
(Y, Y ) is said measurable if ƒ −1(A) ∈ X ∀A ∈ Y .
For instance, let X = {, b, c, d}, and X = {{, b}, {c, d}, X, ∅}. Let Y = {1, 2, 3}, and Y =
{{1}, {2, 3}, {2}, {1, 3}, {3}, {1, 2}, Y, ∅}. The function ƒ , deﬁned by ƒ () = 1, ƒ (b) = 1,
ƒ (c) = 2 and ƒ (d) = 2, is measurable. Indeed, ƒ −1({1}) = {, b} ∈ X, ƒ −1({2, 3}) = {c, d} ∈
X, ƒ −1({3}) = ∅ ∈ X, ƒ −1({1, 2}) = X ∈ X, etc.

Deﬁnition 3. (Kernel) Let (X, X) and (Y, Y ) be measurable spaces where X and Y are
countable sets and where X and Y are ﬁnite σ-algebras. A ﬁnite kernel from X to Y is a
function K : X × Y → (cid:82)≥0 that satisﬁes:

– ∀ ∈ X, K(, Y) is a measure on (Y, Y ),

– ∀Y ∈ Y ,  (cid:55)→ K(, Y) is measurable.

8

X and Y being countable sets, the kernel can be speciﬁed as a matrix {k(, y) : (, y) ∈ X × Y}.
One can think of k(, y) as providing the conditional measure of y given . The kernel is
referred to as a stochastic kernel (a.k.a. Markov kernel or probability kernel) when K : X × Y →
[0, 1] and (cid:80)

y∈Y k(, y) = 1, ∀ ∈ X, i.e. K(, Y) = 1 ∀ ∈ X.

Deﬁnition 4. (Kernel Product) Let (X, X), (Y, Y ) and (Z, Z) be measurable spaces. Let
k1 : X × Y → (cid:82)+ and k2 : (X × Y) × Z → (cid:82)+ .

Then, one can deﬁne the kernel product k1 ⊗ k2 : X × (Y ⊗ Z) → (cid:82)+ as a function of k1 and
k2 [41] where ⊗ is a product operator1.

Theorem 5. (Ionescu-Tulcea Extension Theorem) [43] Let us consider a sequence of
measurable spaces (Xn, n)n∈(cid:78)(cid:63) . Let assume that for each n, there exists a kernel Kn from
× k=n−1
k=1 Xk to Xn. Then, for every sequence (Sn)n∈(cid:78)(cid:63) taking values in (Xn, n) there exists a
unique measure μ(S1, S2, . . . , Sn) = ⊗ n

Kk.

k=1

With these key concepts deﬁned, one can generalize the deterministic model described by
Eq.3 in the measure theory framework.

3.2.2. Generalizing the function  to the ﬁnite kernel KS
Let us consider the measurable spaces (Ω × (cid:85), Ω(cid:85)) and (Ω, Ω) where Ω is the ﬁnite set of
states, (cid:85) ⊆ (cid:82)m is the input vector, Ω(cid:85) is a ﬁnite σ-algebra on Ω× (cid:85) and Ω is a ﬁnite σ-algebra
on Ω. A ﬁnite kernel KS from Ω × (cid:85) to Ω is deﬁned by (Deﬁnition.3):

KS : (Ω × (cid:85)) × Ω → [0, 1]

(5)

Ω being a countable set, the kernel KS can be speciﬁed as a matrix {kS((, (cid:126)), (cid:48)) : ((, (cid:126)), (cid:48)) ∈
(Ω × (cid:85)) × Ω}. Think of kS((, (cid:126)), A) as the conditional measure that the process will be
in the state A ⊂ Ω at time t given its state at time t − 1 is  ∈ Ω and the input vector
is (cid:126). Here, it is assumed that the state at time t depends on the state at time t − 1 and not on
the previous states t − 2, t − 3, . . . , t1 (ﬁrst order Markov property). Thus, {Xt, Ut}t∈(cid:78)(cid:63) , where
Xt and Ut are random variables taking values in Ω and (cid:85) respectively, is a chain with kernels
KS(t≥2) and initial distribution π where π : Ω → [0, 1] is a measure on (Ω, Ω) at t = 1.

3.2.3. Generalizing the function G to the ﬁnite kernel KE
Let us consider the measurable spaces (Ω, Ω) and ((cid:89), (cid:89)) where (cid:89) ⊆ (cid:82)p is the output vector
and (cid:89) is a σ-algeba on (cid:89). A ﬁnite kernel KE from (Ω, Ω) to ((cid:89), (cid:89)) is deﬁned by:

KE : Ω × (cid:89) → [0, 1]

(6)

Think of KE(t)(, (cid:126)y) as the conditional measure that the process is in the state  at
time t given the output vector (cid:126)y ⊂ (cid:89) at time t. Per Deﬁnition.4, at each time t, the Markov
transition kernel KS ⊗ KE : (Ω × (cid:85)) × (Ω ⊗ (cid:89)) → [0, 1], is a function of KS and KE (Fig.2). Think
of KS ⊗ KE as the conditional measure of (t) given (cid:126)y(t), (cid:126)(t−1) and (t−1).

3.3. Transferable Belief Model (TBM)

3.3.1. Basic deﬁnitions and notations
Let us consider Ω = {1, 2, . . . , N} the discrete frame of discernment (FoD) representing
the states of a physical system where 1, 2, . . . are hypothesis. In this paper, hypothesis are

1In the literature, this operator is also known as fusion operator [42]

9

(t−2)

(cid:126)(t−1)

· · ·

(t−2)

(t−1)

(cid:126)y(t−2)

(cid:126)y(t−1)

(t)

(t)

(cid:126)y(t)

(t+1)

(t+1)

· · ·

(cid:126)y(t+1)

kS

(cid:0)((t−1), (cid:126)(t−1)), (t)
State prediction

(cid:1)

⊗

kE((t), (cid:126)y(t))
State emission

Figure 2: Markov transition kernel KS ⊗ KE.

supposed to be exhaustive and exclusive, i.e. the system cannot be in two states at once. A
mass function mΩ, a.k.a. Basic Belief Assignment (BBA) is deﬁned by:

mΩ : 2Ω → [0, 1]

(7)

where 2Ω = {∅, {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}, ..., Ω}. A BBA is
non-additive, i.e

mΩ({1, 2}) (cid:54)= mΩ({1}) + mΩ({2})
This is a fundamental difference with probability theory. A proposition A = {1, 2} ∈ 2Ω
explicitly represents the doubt between hypothesis composing A and the mass of belief mΩ(A)
assigned to A is not informative regarding the elements of A.
A BBA is a set of belief masses concerning propositions A ∈ 2Ω verifying:

(8)

(cid:88)

mΩ(A) = 1

A∈2Ω

(9)

A ∈ 2Ω is a focal element of the BBA if mΩ(A) > 0.

In the Dempster-Shafer theory of evidence mΩ(∅) is constrained to 0. This con-
straint is relaxed in TBM [25] where mΩ(∅) > 0 is given different interpretations
[44]:

1. Inaccuracy of the sensors measurements (Observations),

2. Incompleteness of the model leading to non-exhaustive FoD.

3.3.2. Belief functions
BBAs can be transformed to one-to-one relationships [25] representing the same information
(a.k.a. belief functions), albeit in different forms. Some are described hereafter.

– Plausibility p where

and reversely

pΩ(A) = (cid:88)
B∩A(cid:54)=0

mΩ(B), ∀A, B ∈ 2Ω

mΩ(A) = (cid:88)
B⊆A

(−1)|A|−|B|+1pΩ( ¯B), ∀A, B ∈ 2Ω

10

(10)

(11)

– Belief be where

beΩ(A) = (cid:88)

mΩ(B), ∀A, B ∈ 2Ω, with mΩ normal, i.e. mΩ(∅) = 0.

(12)

∅(cid:54)=B⊆A

– Commonality q where

qΩ(A) = (cid:88)
B⊇A

mΩ(B), ∀A, B ∈ 2Ω

and reversely

mΩ(A) = (cid:88)
A⊆B

(−1)|B|−|A|qΩ(B), ∀A, B ∈ 2Ω

(13)

(14)

3.3.3. CRC/DRC combination rules
There have been many combination rules proposed in the literature [45]. In the sequel, we do
consider the Conjunctive Rule of Combination (CRC) and the Disjunctive Rule of Combination
(DRC).

Deﬁnition 6. Conjunctive Rule of Combination (CRC). Let us consider two BBAs deﬁned
by mΩ
1

and mΩ
2

.

Assuming their sources are independent and reliable then the unnormalized con-
junctive rule of combination (CRC ∩ ) can be used as follows [37]:

∀A ∈ 2Ω, by:

mΩ

1 ∩ 2

(A) = (cid:88)

B∩C=A

mΩ
1

(B).mΩ
2

(C), A ∈ 2Ω

qΩ

1 ∩ 2

(A) = qΩ
1

(A).qΩ
2

(A)

(15)

(16)

This combination may result in a sub-normal BBA, i.e. mΩ(∅) > 0. The mass of conﬂict is
given by:

mΩ

1 ∩ 2

(∅) = (cid:88)

mΩ
1

(A).mΩ
2

(B), A, B ∈ 2Ω

It is worth noting that the CRC can be computed from commonality functions:

A∩B=∅

mΩ

1 ∩ 2

(∅) = 1 + (cid:88)

(−1)|A| · qΩ
1

(A).qΩ
2

(A)

A∈2Ω,A(cid:54)=∅

(17)

(18)

Deﬁnition 7. Disjunctive Rule of Combination (DRC). Let us consider two BBAs deﬁned
by mΩ
1

and mΩ
2

.

Assuming their sources are independent and at least one source is reliable, then
the unnormalized disjunctive rule of combination (DRC ∪ ) can be used as follows
[37]:

mΩ

1 ∪ 2

(A) = (cid:88)

B∪C=A

mΩ
1

(B).mΩ
2

(C), A ∈ 2Ω

beΩ

1 ∪ 2

(A) = beΩ
1

(A).beΩ
2

(A)

(19)

(20)

11

4. Degree of effectiveness

4.1. Formalization in the measure theory
On the basis of the formalization of the deterministic model of the CPS expected behavior in
the measure theory described in 3.2 and extending Eq.4, the degree of effectiveness can be
formulated as follows:

Deﬁnition 8. The degree of effectiveness is a function δ : Ω(t) × ((cid:85) × (cid:89))(t) → [0, 1], t ∈ (cid:78)(cid:63) such
that given the state sequence (t)T
, the degree of
effectiveness δ (cid:128)(t)T

and the observation sequence ( (cid:126)t, (cid:126)yt)T

t=1
(cid:138) is given by:

, ( (cid:126)t, (cid:126)yt)T

t=1

t=1

t=1

δ (cid:128)(t)T

t=1

, ( (cid:126)t, (cid:126)yt)T

t=1

(cid:138) = π(1) ⊗ KE(1, (cid:126)y1)

⊗

(cid:124)

(cid:123)(cid:122)
Initialization

(cid:125)








T
(cid:79)

t=2
(cid:124)

KS

(cid:0)((t−1), (cid:126)(t−1)), (t)

(cid:1) ⊗ KE

(cid:0)(t), (cid:126)y(t)

(cid:1)

(cid:123)(cid:122)
prediction - update mechanism

(cid:125)








(21)

The process consists in propagating the measure over the state sequence (t)T
. At each
time t, it satisﬁes a "prediction (KS) - update (KE)" mechanism. It can be understood as the
’likelihood’ of the state sequence (t)T
to have been produced by the observation sequence
( (cid:126)t, (cid:126)yt)T

. π() gives the measure of the state sequence to start by the state .

t=1

t=1

t=1

As Eq.21 provides the degree of effectiveness for one possible sequence of states, one needs
to ﬁnd the sequence of states leading the highest degree of effectiveness over all the possible
sequences of states given the observation sequence, i.e.

δ (cid:128)( (cid:126)t, (cid:126)yt)T

t=1

(cid:138) = mx
(t )T

t=1

δ (cid:128)(t)T

t=1

, ( (cid:126)t, (cid:126)yt)T

t=1

(cid:138)

(22)

Note 1. The chain {Xt, Ut, Yt}t∈(cid:78)(cid:63) where Xt,Ut and Yt are random variables taking values in
Ω, (cid:82)m(t) and (cid:82)p(t) respectively, with transition kernel KS ⊗ KE and initial distribution π ⊗ KE, is
an Input/Output Hidden Markov Model (IOHMM)2 [46] (claim derived from [47]).

Following this deﬁnition, an observation sequence ( (cid:126)t, (cid:126)yt)T

t=1

is said perfect when

δ (cid:128)( (cid:126)t, (cid:126)yt)T

t=1

(cid:138) = 1 ,∀T ∈ (cid:78)(cid:63)

To be more precise about the meaning we seek to give to the degree of effectiveness, we bor-
row some terminology employed in the viability theory [5]. Let us consider that the constraints
the physical system evolution has to comply with are encoded into information . Then, the
following deﬁnitions are adopted:

Deﬁnition 9. A zone of comfort Cfrt(t)() associated to an event E ∈ Ω at time t corre-
sponds to the set C ⊂ (cid:85) × (cid:89) of values for which the event E is certain according to I, such
that:

δ (cid:128)(t)T

, ( (cid:126)t, (cid:126)yt)T

t=1

t=1

(cid:138) = 1

(23)

2In this paper we do assume that the state at time t only depends on the state at time t − 1 and not on the previous

states t − 1, t − 2, . . . , t1 (ﬁrst order Markov chain).

12

Deﬁnition 10. A zone of tolerance Tol(t)() associated to an event E ∈ Ω at time t corre-
sponds to the set T ⊂ (cid:85) × (cid:89) of values for which the event E is uncertain according to I,
such that:

0 < δ (cid:128)(t)T

, ( (cid:126)t, (cid:126)yt)T

t=1

t=1

(cid:138) < 1

(24)

Deﬁnition 11. A zone of viability Viab(t)() associated to an event E ∈ Ω at time t corre-
sponds to the union of Cfrt(t)() and Tol(t)(). Note that outside the zone of viability, the event
E is impossible according to I:

δ (cid:128)(t)T

t=1

, ( (cid:126)t, (cid:126)yt)T

t=1

(cid:138) = 0

(25)

Thus, the degree of effectiveness determines zones of viability according to the
model, i.e. it determines the boundaries of the states deﬁned in the model. When
δ(.) = 0, one faces a model breakdown, i.e. the state of the system is outside the
boundaries of the states deﬁned in the model.

The Fig.3 provides an illustrative example. Here, the event E can be stated as "the passengers
of the ship are safe". An input of the model might be the geographic position of the ship
(latitude/longitude), while the output might be the heart rate of the passengers. Within the
zone of comfort one can be certain that the passengers are safe, i.e. their heart rate is at the
expected level. Within the zone of tolerance, passengers may suffer from disturbances and
their safety is at risk, i.e. their heart rate is higher than expected. The ship is not supposed to
go outside the boundary of the zone of viability. . .

Zone of comfort

Zone of tolerance

?

Figure 3: Example of a viability zone where the event E can be stated as "passenger of the ship are safe"
Photo: Courtesy of Raftrek Travel [48].

4.2. Application to the Transferable Belief Model
Per Eq.21 and Eq.22, by replacing kernels KS and KE with BBAs, the computation of the degree
of effectiveness can be factored as follows :

13

δΩT [( (cid:126)t, (cid:126)yt)T
(cid:128)mΩ
π

] = mx(t )T
({1}) × mΩ1 [ (cid:126)y1]({1}) × (cid:148)(cid:81)T

t=1

t=1

t=2

mΩ(t)|Ω(t−1) [{(t−1)}, (cid:126)(t−1)]({(t)}) × mΩ(t) [ (cid:126)y(t)]({(t)})(cid:151)(cid:138)

(26)
where mΩ(t)|Ω(t−1) [A](B) represents a belief function deﬁned on Ω(t) conditionally to the subset
A ⊆ Ω(t−1). For the sake of simplicity, mΩ(t)|Ω(t−1) [A](B) is replaced by mΩ(t) [A](B) in the sequel.
It is worth noting that in Eq.26 the masses involved in the computation are supposed to be
known.

4.3. Evidential Input/Output Hidden Markov Model (Ev-IOHMM)
The work presented in this paper extends works done on Evidential HMM (Ev-HMM) [26][27]
and probabilistic Input/Output HMM (IOHMM) [31]. In the sequel, we do assume the reader is
familiar with basics in HMM.

Formally, an Evidential IOHMM (Ev-IOHMM) is deﬁned by the tuple λ =< Ω, A, (cid:126)B, mΩ
π

> where:

– Ω = {1, 2, . . . , N} is the ﬁnite set of hidden states, i.e. the frame of discernment,
– (cid:126)B is the 2|Ω| emission vector whose elements represent the beliefs conditional to the output
value (cid:126)y. For instance, mΩ(t) [ (cid:126)y(t)]({1}(t)) represents the belief in {1} at time t given the
output observation (cid:126)y(t) at time t.

– A is the |Ω| × 2|Ω| state-transition matrix. There is one row per singleton ∈ Ω. Each row
of the matrix is a BBA whose elements represent the belief in transiting from the single-
ton to this element. For instance, in Ev-HMM, mΩ(t) [{1}(t−1)]({2}(t)) represents the be-
lief in transitioning to state {2} at time t given the state at time t − 1 was {2}. Here
the belief is only conditional to the previous state. In Ev-IOHMM, the belief in transi-
tioning from one state to another is also conditional to an input. For instance,
mΩ(t) [{1}(t−1), (cid:126)(t−1)]({2}(t)) represents the belief in transitioning to state {2} at
time t given the state at time t − 1 was {2} and the input value was (cid:126)..

– mΩ
π

is a vacuous BBA, i.e. mΩ
π

initial state of the system.

(Ω) = 1 meant to indicate that one has no information on the

Note 2. In real life applications, BBAs are often not directly available. Only the probability
or the possibility values computed from observations are available on the singletons. So,
the model is extended with a vector (cid:126)B(cid:48) and a matrix A(cid:48) whose elements describe probability
density functions or distributions of possibility :

– (cid:126)B(cid:48) is a |Ω| vector where each element b, (1 ≤  ≤ |Ω|) is a probability density function or
distribution of possibility. For instance, b( (cid:126)y) = p( (cid:126)y(t) = (cid:126)y|(t) = ) denotes the probability of
observing the output vector (cid:126)y at time t given the state is  at time t.

– A(cid:48) is a |Ω| × |Ω| matrix where each element j, (1 ≤ , j ≤ |Ω|) is a probability density function
or distribution of possibility. For instance, j( (cid:126)) = p((t+1) = j|(t) = , (cid:126)(t) = (cid:126)) denotes the
probability of transiting to (t+1) at time t + 1, given the state is  at time t and the input
vector is (cid:126)y at time t.

The distributions in A(cid:48) and B(cid:48) can be deﬁned by the designer of the model when distributions
represent, for instance, users’ preferences or speciﬁc behavioral requirements/constraints.
However, to date, no effort has been put on learning the model parameters from observations
(following what has been done in [26] on the Ev-HMM or in [49] for the IO-HMM).

14

The HMM modeling framework and derivatives rely on computationally efﬁcient reasoning
algorithms [50]. Among these algorithms, the forward algorithm offers a solution
It computes the "likelihood" of the observation se-
to the evaluation problem.
quences ( (cid:126)t)T
to have been produced by the model by taking into
account all the possible underlying state sequences.
In other words, it provides a
solution to the equation Eq.26.

and ( (cid:126)yt)T

t=1

t=1

4.3.1. State prediction
Given this model, let us now detail the basic mechanics of the Ev-IOHMM state-prediction.
Let us consider the two states model depicted in Fig.4 extending the model depicted in Fig.1
with constraints taking into account uncertainties described as distributions of possibility as
depicted in Fig.5.

pres < 3 ⇐ RampDown(3.0,5.0)
A11 (presence sensor)
A11 (presence sensor)
A11 (presence sensor)

pres > 20 ⇐ RampUp(15.0,20.0)
A22 (presence sensor)
A22 (presence sensor)
A22 (presence sensor)

pres > 20 ⇐ RampUp(15.0,20.0)
A12 (presence sensor)
A12 (presence sensor)
A12 (presence sensor)

1

2

A21 (presence sensor)
A21 (presence sensor)
A21 (presence sensor)
pres < 3 ⇐ RampDown(3.0,5.0)

m < 5 ⇐ RampDown(5.0,10.0)

m > 25 ⇐ RampUp(23,25)

B1 (luminosity sensor)
B1 (luminosity sensor)
B1 (luminosity sensor)

B2 (luminosity sensor)
B2 (luminosity sensor)
B2 (luminosity sensor)

Figure 4: Model extending the model depicted in Fig.1 with tolerances towards uncertainties described as
distributions of possibility. This model can be read as follows: while a presence is detected in the room (presence
sensor value > 20.0), the value of the luminosity sensor must be higher than 25.0 (state 2). Otherwise, if no
presence is detected in the room (presence sensor value < 3.0), the value of the luminosity sensor should be lower
than 5.0 (state 1). Uncertainties are handled through tolerances used to relax these constraints (see Fig.5).

Let us assume that the input pres at time t − 1 was 3.5. Recall that constraints are encoded in
the form of probability or possibility functions. So, one needs to compute the possibility value
of the input value for each state-transition in the matrix A(cid:48). It gives:

x1(t)
0.75
0.75

x2(t)
0.0
0.0

1(t−1)
2(t−1)

Table 1: Possibility values at time t computed from matrix A(cid:48) when pres(t−1) = 3.5.

Now, beliefs allocated to the subsets ∈ 2Ω, i.e. elements of the matrix A, can be deduced from
beliefs on the singletons obtained from the observations and the distributions of possibility
described in matrix A’ as follows.

– When beliefs on singletons are obtained from probability density functions (likelihoods

L(| (cid:126)o)), one can obtain commonality qΩ by [51]:

qΩ[ (cid:126)o](A) = (cid:89)
∈A

L(| (cid:126)o), ∀A ∈ 2Ω

(27)

15

(cid:117)1→1 ,(cid:117)2→1

(cid:117)1

1.0

0.5

0.0

1.0

0.5

0.0

2.0

1.0
3.0 4.0 5.0
6.0 7.0
pres < 3.0 ←RampDown(3.0,5.0)

(cid:117)2→2 ,(cid:117)1→2

1.0

0.5

0.0

1.0

0.5

0.0

2.0
4.0 6.0 8.0 10.0 12.0 14.0
m < 5.0 ←RampDown(5.0,10.0)

(cid:117)2

10.0 12.0 14.0 16.0 18.0 20.0 22.0

20.0 21.0 22.0 23.0 24.0 25.0 26.0

pres > 20.0 ←RampUp(15.0,20.0)

m > 25.0 ←RampUp(23.0,25.0)

Figure 5: State transition and state emission constraints deﬁned as distributions of possibility for the model
described in Fig.4.

– When beliefs on singletons are obtained from possibility distributions (cid:117) , one can obtain

plausibility pΩ by [52]:

pΩ[ (cid:126)o]({}) = (cid:117) ( (cid:126)o)
pΩ[ (cid:126)o](A) = mx
∈A

pΩ[ (cid:126)o]({}), A ∈ 2Ω

(28)

(29)

By applying Eq.29 and then Eq.11 for transforming pΩ to mΩ, one obtains:

[∅(t−1)]
[1(t−1) ]
[2(t−1) ]
[Ω(t−1)]

∅(t)
?
0.0
0.0
?

{x1(t) } {x2(t) } Ω(t)
?
0.75
0.75
?

?
0.75
0.75
?

?
0.0
0.0
?

[∅(t−1)]
[1(t−1) ]
[2(t−1) ]
[Ω(t−1)]

∅(t)
?
0.25
0.25
?

{x1(t) } {x2(t) } Ω(t)
?
0.0
0.0
?

?
0.75
0.75
?

?
0.0
0.0
?

Table 2: pΩ(t) computed from Table.1 by applying Eq.29.

Table 3: mΩ(t) computed from Table.2 by applying Eq.11.

For the time being, only the BBAs conditional to the singletons [1(t−1) ] and [2(t−1) ] are avail-
able. So, one needs to compute beliefs conditional to the subsets [∅(t−1)] and [Ω(t−1)]. Per
[37], this can be achieved by applying a DRC on BBAs conditional to the singletons as follows:

m

Ω(t)


[A] = ∪

∈A

m

Ω(t)


[], ∀A ∈ 2Ω(t−1)

(30)

For instance, m

Ω(t)


[Ω] = m

Ω(t)


[1(t−1) ] ∪ m

Ω(t)


[2(t−1) ]. Results are given in Table.4.

16

[∅(t−1)]
[{1(t−1) }]
[{2(t−1) }]
[Ω(t−1)]

∅(t)
1
0.25
0.25

{x1(t) } {x2(t) } Ω(t)
0
0.0
0.0
0.0

0
0.75
0.75

0
0.0
0.0
0.0

0.0625 0.9375

Table 4: State-transition matrix computed from Table.3 after application of Eq.30.

We are now ready to compute states prediction at time t given states at time t − 1. The
prediction is obtained using the following generalized conjunctive form [37]:

ˆq

Ω(t)
α (A) = (cid:88)

m

Ω(t−1)
α

(X) · q

Ω(t)


[X, (cid:126)(t−1)](A), ∀A ∈ 2Ω(t) , X ∈ 2Ω(t−1)

(31)

X∈2Ω(t−1)

where q

Ω(t)


the previous states, i.e. m
transformed to m:

[X, (cid:126)(t−1)](A) corresponds to the matrix given in Table.4. Without an a priori on
(Ω(t−1)) = 1, the predicted BBA is given from Eq.31 further

Ω(t−1)
α

∅(t)
0.25

{x1(t) } {x2(t) } Ω(t)
0
0.75

0

ˆm

Ω(t)
α

Table 5: State estimation at time t given pres(t−1) = 3.5.

4.3.2. State emission
Let us also assume that the output m at time t is 2.34. So, one needs to compute the
possibility value of the output value for each state from the vector (cid:126)B(cid:48) from which the BBA can
further be computed. It gives:

x1(t)
1.0

x2(t)
0.0

Table 6: Possibility values at time t computed from vector (cid:126)B(cid:48) when m(t) = 2.34.

By applying Eq.29 and then Eq.11 for transforming pΩ to mΩ, one obtains:

∅(t)
0.0

{x1(t) } {x2(t) } Ω(t)
1.0

0.0

1.0

∅(t)
0.0

KE

{x1(t) } {x2(t) } Ω(t)
0.0

1.0

0.0

Table 7: pΩ(t) computed from Table.6 by applying Eq.29.

Table 8: mΩ(t) computed from Table.7 by applying Eq.11.

In the sequel, the Ev-IOHMM forward algorithm is detailed. This algorithm computes the like-
lihood of the observation sequences ( (cid:126)t, (cid:126)yt)T
in the form of a BBA from which the degree of
effectiveness is computed.

t=1

Note 3. The forward algorithm described in the next section makes use of the CRC (7) for
propagating beliefs. Other combination rules such as the Cautious Conjunctive Rule of Combi-
nation (CCRC) and the Bold Disjunctive Rule of Combination (BDRC) have been introduced in
the TBM framework [53]. However, it is shown that the CRC is the only rule satisfying
the Shafer-Shenoy axioms for belief functions propagation [54][55].

17

4.3.3. The Ev-IOHMM Forward algorithm
The Ev-IOHMM forward algorithm is close to the Ev-HMM forward algorithm described in [26]
and [30]. The main difference consists in conditioning the state-transition not only on the
previous state (t−1) but also on the input observation (cid:126)(t−1). Thus, the forward algorithm is
given by :

Initialization
no a priori is given to the initial state of the system, i.e. mΩ
p

(Ω) = 1. Thus, ∀X(t=1) ∈ 2Ω

m

Ω(t=1)
α

(X(t=1)) =

(cid:122)
m

KE (State emission)
(cid:125)(cid:124)

(cid:123)
[ (cid:126)y(t=1)](X(t=1))

Ω(t=1)
b

Induction
∀X(t) ∈ 2Ω, 2 ≤ t ≤ T

Ω(t)
α (X(t)) =

q

KE (State emission)
(cid:122)
(cid:123)
(cid:125)(cid:124)
q

[ (cid:126)y(t)](X(t)) ·

Ω(t)
b

(cid:122)

(cid:88)

m

X∈2Ω(t−1)

KS (State prediction)
(cid:125)(cid:124)
(X) · q

Ω(t)


Ω(t−1)
α

(cid:123)
[X, (cid:126)(t−1)](X(t))

(32)

(33)

It is worth noting that, at each time t, the resulting q

Ω(t)
α (X(t)) by using Eq.14. Thus, one obtain the BBA m

Ω(t)
α (X(t)) has to be transformed to
Ω(t)
resulting from the combination
m
α
of the belief at time t with the previous beliefs combined together. However, successive
combinations lead the conﬂict to increase over time, i.e.

m

Ω(T)
α

lim
T→∞

(∅) = 1.0

(34)

Ω(t)
So as to cope with this problem, the BBA m
is normalized at each time t (from t = 1)
α
by redistributing the conﬂict over propositions ∈ 2Ω. Several strategies have been deﬁned
Ω(t)
α (∅) = 0 at each time t. For instance,
for redistributing the conﬂict [56] so as to keep m
assuming sources are equally reliable and mΩ
(∅) < 1, the Dempster’s normalization rule

1 ∩ 2

redistributes conﬂict on the focal elements, i.e. ∀A ∈ 2Ω, A (cid:54)= ∅ and mΩ

1 ∩ 2

(A) > 0,

mΩ
D

(A) =

1
1 − mΩ

1 ∩ 2

(∅)

· mΩ

1 ∩ 2

(A), mΩ

1 ∩ 2

(∅) = 0

(35)

Other normalization rules exist [56]. For instance, Dubois-Prade normalization rule assumes
that at least one source is reliable in case of conﬂict. ∀A ∈ 2Ω, A (cid:54)= ∅, the rule is deﬁned by:

mΩ
DP

(A) = mΩ

1 ∩ 2

(A) + (cid:88)

mΩ
1

(B) · mΩ
2

(C)

B∪C=A,B∩C=∅

(36)

Termination:
In this paper, we do consider leveraging the conﬂict as a means to provide the degree of
effectiveness as done in [26]. Following the proof given in [26] in the context of Ev-HMM
where :

p

Ω(T)
α

(Ω) = 1 − m

Ω(T)
α

(∅)

18

(37)

the degree of effectiveness given the Ev-IOHMM Θ and the observation sequence ( (cid:126)t, (cid:126)yt)T
given by :

t=1

is

p(Θ, ( (cid:126)t, (cid:126)yt)T

t=1

) =

T
(cid:89)

(cid:16)

t=1

1 − m

Ω(t)
α (∅)

(cid:17)

(38)

As described in [30], one needs to record the value of the conﬂict at each time t before
normalizing the BBA.

Note 4. The degree of effectiveness may also be a good indicator of the quality of the model
[30].
Indeed, given a perfect sequence of observations, the degree of effectiveness is sup-
posed to be equal to 1.0 (see Deﬁnition.9).

5. An application to autonomous vehicles

Autonomous vehicles are gaining momentum in the CPS community. Although promising a
breakthrough in terms of trafﬁc optimization and regulation, these vehicles will be unable
to fulﬁl their potential without ensuring safety of passengers and surroundings. Besides the
physical environment these vehicles operate in and in which unanticipated events may ham-
per their operation at any time, these vehicles are also prone to cyber attacks, potential com-
munication infrastructure and electronic devices issues [57]. For designers, it is then about
handling the behavior of these vehicles from an holistic point of view rather than considering
each part of the system separately [58],[59]. Thus, by modeling the expected behavior of
the system taken as a whole rather than considering its internals, the proposed approach is
coherent with the holistic point of view.

This section aims at providing a possible application of the method developed throughout the
paper to the domain of autonomous vehicles. The proposed application consists in providing
autonomous vehicles designers with a bench-marking tool used for assessing the effective-
ness of the controllers of these vehicles. Without claiming to be exhaustive, the solution can
be used in addition to existing approaches for autonomous vehicles security and safety. Two
scenarios are then considered. The ﬁrst one is about considering the speed limitations in
force in France. Such limitation rules are complex and depend on several factors depicted in
Table.9.

Localization

Weather condition Road

Improved road Highway

Outside urban area

No precipitation
Rainy
Visibility <50m

90 km/h
80 km/h
50 km/h

110 km/h
100 km/h
50 km/h

130 km/h
110 km/h
50 km/h

Urban area

30 km/h area

30 km/h

30 km/h

General case

50 km/h

50 km/h

Improved section

70 km/h

70 km/h

N/A
90 km/h
(urban highway)
N/A

Table 9: Speed limitations in force and their dependency on several factors.

The idea here is to prevent the vehicle going beyond the maximum speed allowed taking into
account factors depicted in Table.9. The second scenario consists in considering passengers’
well being. The idea here is to prevent rapid accelerations and decelerations of the vehicle
especially when meeting humps, roundabout, "giveway", etc.

19

5.1. Methodology
OpenStreetMap (OSM) is a collaborative map of the world. It is a powerful source of informa-
tion about all types of infrastructure features such as roads, trails, side-walks, etc. Speciﬁcally,
given GPS longitude and latitude, one can retrieve from the repository all information about
the infrastructure around. Our approach is to use this repository so as to gather infrastructure
information from GPS data at each time t as the vehicle moves. Besides OSM, we do use
a weather web service (api.weatherbit.io) allowing us to retrieve weather information at the
date of interest.

Based on these information, we do ﬁrst describe the Ev-HMM model corresponding to the
ﬁrst scenario. Table.10 provides a summary of the features provided by OSM regarding the
speed limitations and the associated speed limit values further used in the model. Besides
speed limitations, the weather web service provides us with precipitation values (in mm) and
visibility (in km). Speed limitation values and weather information are used as inputs of the
Instant speed of the vehicle is used as output of the Ev-
Ev-IOHMM model (multivariate).
IOHMM model. All the constraints considered, the model contains 11 states. For the sake of
visibility, a partial representation of the model is depicted in Fig.6.

OSM Road infrastructure max speed features

Weather data

hour.precip mm
km
hour.vis

From values

From localization

maxspeed:<value>
zone:maxspeed:FR:30
maxspeed:type:FR:urban
maxspeed:type:FR:rural
maxspeed:type:FR:trunk
maxspeed:type:FR:motorway
highway:living_street
highway:residential
highway:primary
highway:secondary
highway:tertiary
highway:trunk
highway:motorway

value
30 km/h
50 km/h
90 km/h
110 km/h
130 km/h
50 km/h
50 km/h
90 km/h
70 km/h
50 km/h
110 km/h
130 km/h

Table 10: Speed limitation values are retrieved at each time t from OSM speciﬁc infrastructure features given the
vehicle position (longitude/latitude). The weather web services provides us with precipitation and visibility
information.

The model for the second scenario is built upon the same approach. The inputs of the asso-
ciated Ev-IOHMM are gathered from some OSM features of interest, i.e, trafﬁc_calming:hump,
trafﬁc_calming:choker, highway:stop and highway:give_way, taking value of "1.0" if the fea-
ture is detected around, "0.0" otherwise. The output of the Ev-IOHMM corresponds to the
constraint on the acceleration and deceleration while being in each state. Instant accelera-
tion and deceleration of the vehicle is computed based on the delta of speed and the delta of
the distance travelled between two time steps (cce = (t+n)−(t)
). The corresponding Ev-HMM
model is depicted in Fig.7.

n

Note 5. In these scenarios, we do assume the behavioral constraints are deﬁned by the
designer of the model. For instance, for the ﬁrst scenario, the maximum speed limits in force
are subject to tolerances inherent to radar systems accuracy (generally, in the 5% range)
that cannot be retrieved from learning. For the second scenario, tolerances may be adjusted
based on users’ feedback or from their preferences.

20

MaxSpeed : Interval(109,111)
Visibility : RampUp(0.045,0.05)
Precipitation : RampDown(0.0,0.5)

MaxSpeed : Interval(109,111)
Visibility : RampUp(0.045,0.05)
Precipitation : RampUp(0.5,1.0)

Speed : RampDown(110,116)

110 km/h

110 km/h
RAINY

Speed : RampDown(100,106)

MaxSpeed : Interval(129,131)
Visibility : RampUp(0.045,0.05)
Precipitation : RampDown(0.0,0.5)

MaxSpeed : Interval(129,131)
Visibility : RampUp(0.045,0.05)
Precipitation : RampUp(0.5,1.0)

130 km/h

130 km/h
RAINY

Speed : RampDown(130,138)

Speed : RampDown(110,116)

LOW
VISIBILITY

Visibility : RampDown(0.045,0.05)

Speed <= RampDown(50,56)

Figure 6: Ev-IOHMM model (partial) corresponding to the scenario 1. The input of the model is multivariate, deﬁned
with the maximum speed allowed at time t (MaxSpeed whose values are computed as described in Table.10), the
current visibility (Visibility) and the precipitation (Precipitation). The output corresponds to the expected speed value
(Speed) while being in each state. Some inputs can be inhibited depending on the state-transition considered. For
instance, the state-transition leading state ’LOW VISIBILITY’ to be reached only depends on the visibility value.

Hump : Interval(0.9,1.1)

Choker : Interval(0.9,1.1)

Acceleration : Trapezoidal(-3,-1,1,3)

HUMP

CHOKER

Acceleration : Trapezoidal(-3,-1,1,3)

Give_way : Interval(0.9,1.1)

GIVE
WAY

Stop : Interval(0.9,1.1)

Acceleration : Trapezoidal(-3,-1,1,3)

Roundabout : Interval(0.9,1.1)

ROUND
ABOUT

Acceleration : Trapezoidal(-3,-1,1,3)

STOP

Acceleration : Trapezoidal(-3,-1,1,3)

NO
FEATURE

Hump : RampDown(0.0,0.5)
Give_way : RampDown(0.0,0.5)
Stop : RampDown(0.0,0.5)
Choker : RampDown(0.0,0.5)

Acceleration : Trapezoidal(-7,-1,1,7)

Figure 7: Ev-IOHMM corresponding to scenario 2. The acceleration of the vehicle (output of the model) is
constrained depending on speciﬁc features (inputs of the model).

21

5.2. Results
To complete the experimentations, a C# library has been developed based on the Matlab
functions developed by Philippe Smets [60]. The library has been further extended with com-
bination rules (CRC and DRC [37]) and normalization rules (Dempster [61], Yager [62], and
Dubois-Prade [56]). A mobile phone application is further used for recording GPS data from
several drivers. The traces recorded are then post-processed in order to add, based on lati-
tude and longitude information, the OSM infrastructure features of interest near the location
of the vehicle along with the weather data, based on timestamp. The post processor aims
at generating a dataset that can be replayed from a graphical interface built using Node-Red
[63] and in which the Ev-IOHMM models are instantiated for evaluation (see Fig.8 and Fig.9).
The degree of effectiveness is then assessed using the Ev-IOHMM models described in Fig.6
and Fig.7.

Figure 8: Vehicle position and weather information visualization.

Figure 9: Driving behavior information consists in monitoring the current speed of the vehicle along with the instant
acceleration and orientation. Although not used in the proposed scenario, the orientation (Yaw) may be used against
OSM restrictions such as "no left turn", "no right turn", etc.

22

Figure 10: Assessment of the degree of effectiveness from Ev-IOHMM models described in Fig.6 and Fig.7 where the
sequence length is equal to 10s (observations are sampled each second). A sliding window is applied : after the ﬁrst
observation sequence is gathered, each new observation triggers the computation of the degree of effectiveness
(sliding window = 1).

Results are provided in Fig.10. It is worth noting that the proposed approach is not predictive,
i.e. the degree of effectiveness is computed based on the last T observations. The length T
depends on the sampling rate of the sensors, the Ev-IOHMM model and the physical process
whose evolution is observed. By applying a sliding window on the observations, once the
window has been ﬁlled up with T observations, one can get the computation of the degree of
effectiveness performed upon each new observation. Results obtained may help designers of
autonomous vehicles to benchmark the controllers for different situations.

6. Conclusion and perspectives

Cyber-Physical Systems (CPS) are computing systems whose purposes are achieved from in-
teractions with the physical world by means of transducers (sensors and actuators). These
systems pose new challenges in terms of dependability, the evolution of the physical sys-
tems they control being affected by unanticipated physical processes over which they have
no control and which may potentially hamper the achievement of their purposes. It is now rec-
ognized that designers of such systems can no longer lean, at design time, on comprehensive
and reliable models for anticipating and removing faults that may arise once these systems
are deployed.
Instead, they have to be monitored in vivo and quantitatively evaluated for
effectiveness throughout their life cycle.

In this paper, we formally deﬁned and generalized the notion of effectiveness in the context
of the measure and viability theories. We further detailed the mathematical properties the
measure has to comply with in the context of assessing CPS effectiveness. The measure is
further developed in the Transferable Belief Model (TBM) framework, an elaboration of the
Dempster-Shafer Theory (DST) of evidence. The proposed approach is intended to have sev-
eral applications in the context of benchmarking and assessment of Quality of Experience
(QoE)[64]:

– The measure can be used as a benchmarking tool. For instance, let us consider the case
of autonomous driving. One might be interested in comparing algorithms used to control
autonomous vehicles according to the highway code. As a future work, we do plan to
apply the proposed approach to this use-case based on the UAH-DriveSet [65].

– Assuming the expected evolution of the physical system being driven by the CPS is spec-
iﬁed by the users (e.g. through end-user programming [66]), the degree of effectiveness

23

might give a direct insight on users’ satisfaction, i.e. QoE as an assessment of the hu-
man satisfaction when interacting with technology and business entities in a particular
context.

The proposed approach may also provide an added value in self-adaptive systems:

– In the context of the Internet of Things (IoT), many physical devices now expose services
available to ubiquitous computing systems leveraging them for composing the so-called
ambient applications (e.g. smart-home, smart-city, etc.). The question then arises for
these systems of how to select the relevant services. Current approaches rely on seman-
tic annotations used to formally describe the services [67][68]. While this approach is
relevant, (1) semantic annotations are pure models, agnostic to the target operational
environment, (2) the behavior of a composed application cannot be inferred solely given
the individual behavior of the services it is composed with. Hence, observing the concrete
behavior of these systems and providing them with a feedback through the measure of
effectiveness would help them selecting more appropriate services over time.

– More generally, self-adaptive systems pose new challenges in term of assurance, i.e.
the ability to provide evidence that these systems satisfy their behavioral requirements,
irrespective of the adaptations over time [69]. One may envision leveraging the assess-
ment proposed in this paper within a feedback loop providing CPS with self-awareness
capability allowing them to react towards any deviation.

However, although promising, the proposed approach suffers from limitations :

– The approach is not predictive, the measure is computed based on past events. This
could be a problem for safety critical CPS for which an immediate response is required,

– As such, the Ev-IOHMM cannot manage temporal constraints which are of importance
in the CPS context. Following what has been done on Hidden Semi-Markov Models
(HSMM)[70], we do plan to develop the Ev-IOHSMM where temporal constraints are used
to specify the maximum amount of time allowed to switch from one state to another one
or to specify the maximum time one is allowed to stay in a particular state,

– The Ev-IOHMM is memory greedy, it implies 2|Ω| × 2|Ω| elements in the state-transition
matrix A. For instance, for the ﬁrst scenario described in section 5, the model of the
expected behavior contains 11 states leading a 2048×2048 state-transition matrix. The
complexity in time of the forward algorithm described in 4.3.3 is O(22|Ω|T) when using
commonalities qΩ. By using plausibilities pΩ, the complexity is O(2|Ω|T) [28]. As a
recommendation, when |Ω| is large, it is preferable to avoid matrix calculus and use the
binary format as means to encode focal elements [71],

– Finally, it is assumed that sensors required for measuring the effectiveness are available.
First, it might not be the case and one needs to assess cost/beneﬁts of adding the re-
quired sensors. Second, it might be the case but with sensors not as relevant as desired
(for instance, a luminosity sensor is made available but not exactly at the desired loca-
tion). In that case, one can determine some contextual discounting factors [72], but the
challenge remains on the determination of the discounting factor values.

24

7. Acknowledgment

This work has been supported by GFI Informatique, Innovation group, Saint-Ouen, France. The
authors wish to thank the reviewers for their valuable suggestions that greatly helped improve
the quality of this paper.
The authors are also thankful to Emmanuel Ramasso (emmanuel.ramasso@femto-st.fr) for his
help in better understanding some speciﬁc points of the TBM theory.

References

[1] E. A. Lee, The past, present and future of cyber-physical systems: A focus on models, Sensors 15 (3) (2015)

4837–4869.

[2] D. Garlan, Software engineering in an uncertain world, in: Proceedings of the FSE/SDP workshop on Future of

software engineering research, ACM, 2010, pp. 125–128.

[3] T. Bures, D. Weyns, C. Berger, S. Bifﬂ, M. Daun, T. Gabor, D. Garlan, I. Gerostathopoulos, C. Julien, F. Krikava,
et al., Software engineering for smart cyber-physical systems–towards a research agenda: Report on the ﬁrst
international workshop on software engineering for smart cps, ACM SIGSOFT Software Engineering Notes 40 (6)
(2015) 28–32.

[4] M. Zhang, B. Selic, S. Ali, T. Yue, O. Okariz, R. Norgren, Understanding uncertainty in cyber-physical systems:
A conceptual model, in: European Conference on Modelling Foundations and Applications, Springer, 2016, pp.
247–264.

[5] J.-P. Aubin, A. Bayen, P. Saint-Pierre, Viability Theory: New Directions, Springer, Cham, Switzerland, 2011.
[6] R. E. Bellman, Adaptive control processes: a guided tour, Vol. 2045, Princeton university press, 2015.
[7] J.-C. Laprie, Dependability: Basic concepts and terminology, in: Dependability: Basic Concepts and Terminology,

Springer, Vienna, Austria, 1992, pp. 3–245.

[8] I. Eusgeld, F. Freiling, R. H. Reussner, Dependability Metrics: GI-Dagstuhl Research Seminar, Dagstuhl Castle,

Germany, October 5-November 1, 2005, Advanced Lectures, Vol. 4909, Springer, 2008.

[9] A. Avizienis, J.-C. Laprie, B. Randell, C. Landwehr, Basic concepts and taxonomy of dependable and secure

computing, IEEE transactions on dependable and secure computing 1 (1) (2004) 11–33.

[10] Testing cyber-physical systems under uncertainty: Systematic, extensible, and conﬁgurable model-based and
search-based testing methodologies (european project id 645463), http://www.u-test.eu/ [Online; accessed
5-May-2017] (2015-2017).

[11] N. Delgado, A. Q. Gates, S. Roach, A taxonomy and catalog of runtime software-fault monitoring tools, IEEE

Transactions on Software Engineering 30 (12) (2004) 859–872.

[12] V. Chandola, A. Banerjee, V. Kumar, Anomaly detection: A survey, ACM computing surveys (CSUR) 41 (3) (2009)

15.

[13] P. Malhotra, L. Vig, G. Shroff, P. Agarwal, Long short term memory networks for anomaly detection in time series,

in: Proceedings, Presses universitaires de Louvain, 2015, p. 89.

[14] S. Hochreiter, J. Schmidhuber, Long short-term memory, Neural computation 9 (8) (1997) 1735–1780.
[15] J. Goh, S. Adepu, M. Tan, Z. S. Lee, Anomaly detection in cyber physical systems using recurrent neural networks,
in: High Assurance Systems Engineering (HASE), 2017 IEEE 18th International Symposium on, IEEE, 2017, pp.
140–145.

[16] D. P. Mandic, J. Chambers, Recurrent neural networks for prediction:

learning algorithms, architectures and

stability, John Wiley & Sons, Inc., 2001.

[17] R. Pascanu, T. Mikolov, Y. Bengio, On the difﬁculty of training recurrent neural networks, in: International confer-

ence on machine learning, 2013, pp. 1310–1318.

[18] Z. C. Lipton, The mythos of model interpretability, arXiv preprint arXiv:1606.03490 (2016).
[19] G. I. Webb, R. Hyde, H. Cao, H. L. Nguyen, F. Petitjean, Characterizing concept drift, Data Mining and Knowledge

Discovery 30 (4) (2016) 964–994.

[20] L. Itti, P. Baldi, Bayesian surprise attracts human attention, Vision research 49 (10) (2009) 1295–1306.
[21] J. Storck, S. Hochreiter, J. Schmidhuber, Reinforcement driven information acquisition in non-deterministic envi-
ronments, in: Proceedings of the international conference on artiﬁcial neural networks, Paris, Vol. 2, Citeseer,
1995, pp. 159–164.

[22] U. Aßmann, N. Bencomo, B. H. Cheng, R. B. France, Models@ run. time (dagstuhl seminar 11481), in: Dagstuhl

Reports, Vol. 1, Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2012.

[23] L. R. Rabiner, A tutorial on hidden markov models and selected applications in speech recognition, Proceedings

of the IEEE 77 (2) (1989) 257–286.

[24] E. Ramasso, T. Denoeux, Making use of partial knowledge about hidden states in hmms: an approach based on

belief functions, IEEE Transactions on Fuzzy Systems 22 (2) (2014) 395–405.

[25] P. Smets, R. Kennes, The transferable belief model, Artiﬁcial intelligence 66 (2) (1994) 191–234.
[26] E. Ramasso, Inference and learning in evidential discrete latent markov models, IEEE Transactions on Fuzzy

Systems 25 (5) (2017) 1102–1114.

25

[27] E. Ramasso, M. Rombaut, D. Pellerin, Forward-backward-viterbi procedures in the transferable belief model for
state sequence analysis using belief functions, in: European Conference on Symbolic and Quantitative Ap-
proaches to Reasoning and Uncertainty, Springer, 2007, pp. 405–417.

[28] E. Ramasso, Reconnaissance de séquences d’états par le modèle des croyances transférables. application à

l’analyse de vidéos d’athlétisme., Ph.D. thesis, Université Joseph-Fourier-Grenoble I (2007).

[29] P. Smets, The application of the matrix calculus to belief functions, International Journal of Approximate Reason-

ing 31 (1-2) (2002) 1–30.

[30] L. Serir, E. Ramasso, N. Zerhouni, Time-sliced temporal evidential networks: the case of evidential hmm with
application to dynamical system analysis, in: 2011 IEEE Conference on Prognostics and Health Management,
IEEE, 2011, pp. 1–10.

[31] Y. Bengio, P. Frasconi, An input output hmm architecture, in: Advances in neural information processing systems,

1995, pp. 427–434.

[32] T. Al-ani, Hidden markov models in dynamic system modelling and diagnosis, in: Hidden Markov models, theory

and applications, InTech, 2011.

[33] A. M. Fraser, Hidden Markov models and dynamical systems, Vol. 107, Siam, 2008.
[34] G. Rocher, J. Y. Tigli, S. Lavirotte, Probabilistic models towards controlling smart-*; environments, IEEE Access 5

(2017) 12338–12352.

[35] G. Rocher, J.-Y. Tigli, S. Lavirotte, N. Le Thanh, A possibilistic i/o hidden semi-markov model for assessing cyber-
physical systems effectiveness, in: 2018 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE), IEEE,
2018, pp. 1–9.

[36] E. Ramasso, Contribution of belief functions to hidden markov models with an application to fault diagnosis, in:
Machine Learning for Signal Processing, 2009. MLSP 2009. IEEE International Workshop on, IEEE, 2009, pp. 1–6.
[37] P. Smets, Belief functions: the disjunctive rule of combination and the generalized bayesian theorem, in: Classic

Works of the Dempster-Shafer Theory of Belief Functions, Springer, 2008, pp. 633–664.

[38] P. P. Shenoy, Valuation-based systems: A framework for managing uncertainty in expert systems, in: Fuzzy logic

for the management of uncertainty, John Wiley & Sons, Inc., 1992, pp. 83–104.

[39] P. R. Halmos, Measure theory, Vol. 18, Springer, 2013.
[40] I. Gilboa, D. Schmeidler, Additive representations of non-additive measures and the choquet integral, Annals of

Operations Research 52 (1) (1994) 43–65.

[41] A. Klenke, Probability theory: a comprehensive course, Springer Science & Business Media, 2013.
[42] D. Dubois, W. Liu, J. Ma, H. Prade, The basic principles of uncertain information fusion. an organised review of

merging rules in different representation frameworks, Information Fusion 32 (2016) 12–39.

[43] C. Shalizi, A. Kontorovich, Almost none of the theory of stochastic processes a course on random processes, for

students of measure-theoretic probability, with a view to applications in dynamics and statistics (2007).

[44] E. Lefevre, O. Colot, P. Vannoorenberghe, Belief function combination and conﬂict management, Information

fusion 3 (2) (2002) 149–162.

[45] P. Smets, Analyzing the combination of conﬂicting belief functions, Information fusion 8 (4) (2007) 387–412.
[46] P. Frasconi, Input/Output HMMs: A Recurrent Bayesian Network View, Springer London, London, 1997, pp. 63–79.
[47] O. Cappé, E. Moulines, T. Rydén, Inference in hidden markov models, in: Proceedings of EUSFLAT Conference,

2009, pp. 14–16.

[48] Raftrek adventure travel, https://raftrek.com.
[49] Y. Bengio, P. Frasconi, Input-output hmms for sequence processing, IEEE Transactions on Neural Networks 7 (5)

(1996) 1231–1249.

[50] M. Stamp, A revealing introduction to hidden markov modelshttp://www.cs.sjsu.edu/faculty/stamp/RUA/

HMM.pdf [Online; accessed 10-Jul-2017] (2015).

[51] F. Delmotte, P. Smets, Target identiﬁcation based on the transferable belief model interpretation of dempster-
shafer model, IEEE Transactions on Systems, Man, and Cybernetics-Part A: Systems and Humans 34 (4) (2004)
457–471.

[52] D. Dubois, H. Prade, P. Smets, New semantics for quantitative possibility theory, in: European Conference on

Symbolic and Quantitative Approaches to Reasoning and Uncertainty, Springer, 2001, pp. 410–421.

[53] T. Denœux, Conjunctive and disjunctive combination of belief functions induced by nondistinct bodies of evi-

dence, Artiﬁcial Intelligence 172 (2-3) (2008) 234–264.

[54] F. Pichon, Fonctions de croyance: décompositions canoniques et règles de combinaison., Ph.D. thesis, Université

de Technologie de Compiègne (2009).

[55] P. P. Shenoy, G. Shafer, Axioms for probability and belief-function propagation, in: Classic Works of the Dempster-

Shafer Theory of Belief Functions, Springer, 2008, pp. 499–528.

[56] A. Martin, C. Osswald, J. Dezert, F. Smarandache, General combination rules for qualitative and quantitative

beliefs, Inﬁnite Study, 2008.

[57] R. G. Dutta, F. Yu, T. Zhang, Y. Hu, Y. Jin, Security for safety: a path toward building trusted autonomous vehicles,

in: Proceedings of the International Conference on Computer-Aided Design, ACM, 2018, p. 92.

[58] A. Lima, F. Rocha, M. Völp, P. Esteves-Veríssimo, Towards safe and secure autonomous and cooperative vehicle
ecosystems, in: Proceedings of the 2nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ACM,
2016, pp. 59–70.

[59] S. K. Katsikas, Cyber security of the autonomous ship, in: Proceedings of the 3rd ACM workshop on cyber-physical

system security, ACM, 2017, pp. 55–56.

26

[60] P. Smets, Software for the tbm, http://iridia.ulb.ac.be/~psmets/#G [Online; accessed 5-Dec-2018].
[61] R. R. Yager, On the dempster-shafer framework and new combination rules, Information sciences 41 (2) (1987)

93–137.

[62] R. R. Yager, On the normalization of fuzzy belief structures, International Journal of Approximate Reasoning

14 (2-3) (1996) 127–153.

[63] IBM, Node-red: Flow-based programming for the internet of things, https://nodered.org/.
[64] K. Mitra, A. Zaslavsky, C. Åhlund, Qoe modelling, measurement and prediction: A review, arXiv preprint

arXiv:1410.6952 (2014).

[65] E. Romera, L. M. Bergasa, R. Arroyo, Need data for driver behaviour analysis? presenting the public uah-driveset,
in: Intelligent Transportation Systems (ITSC), 2016 IEEE 19th International Conference on, IEEE, 2016, pp. 387–
392.

[66] J. Coutaz, A. Demeure, S. Cafﬁau, J. L. Crowley, Early lessons from the development of spok, an end-user
development environment for smart homes, in: Proceedings of the 2014 ACM International Joint Conference on
Pervasive and Ubiquitous Computing: Adjunct Publication, ACM, 2014, pp. 895–902.

[67] G. Rocher, J.-Y. Tigli, S. Lavirotte, R. Daikhi, Run-time knowledge model enrichment in swot: A step toward
ambient services selection relevancy, in: Internet of Things (IOT), 2015 5th International Conference on the,
IEEE, 2015, pp. 62–69.

[68] T.-h. Kim, C. Ramos, S. Mohammed, Smart city and iot (2017).
[69] R. de Lemos, D. Garlan, C. Ghezzi, H. Giese, Software Engineering for Self-Adaptive Systems: Assurances

(Dagstuhl Seminar 13511), Dagstuhl Reports 3 (12) (2014) 67–96. doi:10.4230/DagRep.3.12.67.

[70] S.-Z. Yu, Hidden semi-markov models, Artiﬁcial intelligence 174 (2) (2010) 215–243.
[71] R. Haenni, N. Lehmann, Implementing belief function computations, International Journal of Intelligent Systems

18 (1) (2003) 31–49.

[72] D. Mercier, É. Lefèvre, F. Delmotte, Belief functions contextual discounting and canonical decompositions, Inter-

national Journal of Approximate Reasoning 53 (2) (2012) 146–158.

27

