Normalisations of Existential Rules: Not so Innocuous!
David Carral, Lucas Larroque, Marie-Laure Mugnier, Michaël Thomazo

To cite this version:

David Carral, Lucas Larroque, Marie-Laure Mugnier, Michaël Thomazo. Normalisations of Existential
Rules: Not so Innocuous!. KR 2022 - 19th International Conference on Principles of Knowledge
￿lirmm-
Representation and Reasoning, Jul 2022, HaÏfa, Israel. pp.102-111, ￿10.24963/kr.2022/11￿.
03762686￿

HAL Id: lirmm-03762686

https://hal-lirmm.ccsd.cnrs.fr/lirmm-03762686

Submitted on 28 Aug 2022

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Normalisations of Existential Rules: Not so Innocuous!

David Carral1 , Lucas Larroque2∗ , Marie-Laure Mugnier1 , Micha¨el Thomazo3
1LIRMM, Inria, University of Montpellier, CNRS, Montpellier, France
2DI ENS, ENS, CNRS, PSL University, Paris, France
3Inria, DI ENS, ENS, CNRS, PSL University, Paris, France
{david.carral, michael.thomazo}@inria.fr, lucas.larroque@ens.psl.eu, mugnier@lirmm.fr

Abstract

Existential rules are an expressive knowledge representation
language mainly developed to query data. In the literature,
they are often supposed to be in some normal form that sim-
pliﬁes technical developments. For instance, a common as-
sumption is that rule heads are atomic, i.e., restricted to a
single atom. Such assumptions are considered to be made
without loss of generality as long as all sets of rules can be
normalised while preserving entailment. However, an impor-
tant question is whether the properties that ensure the decid-
ability of reasoning are preserved as well. We provide a sys-
tematic study of the impact of these procedures on the differ-
ent chase variants with respect to chase (non-)termination and
FO-rewritability. This also leads us to study open problems
related to chase termination of independent interest.

1

Introduction
Existential rules are an expressive knowledge represen-
tation language mainly developed to query data (Baget et
al. 2009; Cal`ı, Gottlob, and Lukasiewicz 2009). Such rules
are an extension of ﬁrst-order function-free Horn rules (like
those of Datalog) with existentially quantiﬁed variables in
the rule heads, which allows to infer the existence of un-
known individuals.

Querying a knowledge base (KB) K = (cid:104)R, F (cid:105), where R
is a set of existential rules and F a set of facts, consists in
computing all the answers to queries that are logically en-
tailed from K. Two main techniques have been developed,
particularly in the context of the fundamental (Boolean) con-
junctive queries. The chase is a bottom-up process that ex-
pands F by rule applications from R towards a ﬁxpoint. It
produces a universal model of K, i.e., a model of K that ho-
momorphically maps to all models of K, which is therefore
sufﬁcient to decide query entailment. Query rewriting is a
dual technique, which consists in rewriting a query q with
the rules in R into a query q(cid:48) such that q is entailed by K if
and only if q(cid:48) is entailed by F solely.

Conjunctive query answering being undecidable for ex-
istential rules (Beeri and Vardi 1981), both the chase and
query rewriting may not terminate. There is however a wide
range of rule subclasses deﬁned by syntactic restrictions that
ensure chase termination on any set of facts (see, e.g., vari-
ous acyclicity notions in (Grau et al. 2013)) or the existence,

∗Our work started when Lucas was intern at LIRMM-Inria.

for any conjunctive query, of a (ﬁnite) rewriting into a ﬁrst-
order query, a property referred to as FO-rewritability (Cal-
vanese et al. 2007).

In the literature, existential rules are often supposed to be
in some normal form that simpliﬁes technical developments.
For instance, a common assumption is that rule heads are
atomic, i.e., restricted to a single atom. On the one hand,
the use of single-head rules greatly simpliﬁes the presenta-
tion of theoretical arguments (e.g., (Cal`ı, Gottlob, and Pieris
2012)). On the other hand, this restriction may also sim-
plify implementations; e.g., the optimisation procedure pre-
sented in (Tsamoura et al. 2021) exploits single-head rules
to clearly establish the provenance of each fact computed
during the chase. Moreover, after normalisation, we can ap-
ply existing methods to effectively determine if the chase
terminates for an input single-head existential rule set if
this set is linear (Lecl`ere et al. 2019) or guarded (Gogacz,
Marcinkowski, and Pieris 2020). Normal form assumptions
are often made without loss of generality as long as all sets
of rules can be normalised while preserving all interesting
entailments. However, an important question is whether the
properties that ensure the decidability of reasoning are pre-
served as well.
In particular, what is the impact of com-
mon normalisation procedures on fundamental properties
like chase termination or FO-rewritability?

In fact, the chase is a family of algorithms, which differ
from each other in their termination properties. Here, we
consider the four main chase variants, namely: the oblivious
chase (Cal`ı, Gottlob, and Kifer 2008a), the semi-oblivious
(aka skolem) chase (Marnette 2009), the restricted (aka stan-
dard) chase (Fagin et al. 2003) and the core chase (Deutsch,
Nash, and Remmel 2008). As the core chase has the in-
convenience of being non-monotonic (i.e., the produced set
of facts does not grow monotonically), we actually study
a monotonic variant that behaves similarly regarding termi-
nation, namely the equivalent chase (Rocher 2016). The
ability of a chase variant to halt on a given KB is directly
related to its power of reducing logical redundancies intro-
duced by rules. The oblivious chase blindly performs all
possible rule applications, while the equivalent chase termi-
nates exactly when the KB admits a ﬁnite universal model.
The other variants lie between these two extremes. For prac-
tical efﬁciency reasons, the most implemented variant is the
restricted chase. However, it is the only variant sensitive to

O SO ∃-R ∀-R ∃-DF-R ∀-DF-R E

Single-Piece = + (cid:54)= (cid:54)=

One-Way = = − −

Two-Way = = + −

(cid:54)=

−

=

(cid:54)=

−

=

=

−

=

Table 1: Impact on chase termination. Chase variants are denoted
as follows: O: Oblivious; SO: semi-oblivious; (DF-)R: (Datalog-
ﬁrst) restricted; E: equivalent.

the order of rule applications: for a given KB, there may be
sequences of rule applications that terminate, while others
do not. We study a natural strategy, called Datalog-ﬁrst re-
stricted chase, which prioritises Datalog rules (whose head
does not include existential quantiﬁers) thus achieving ter-
mination in many real-world cases (Carral, Dragoste, and
Kr¨otzsch 2017). Moreover, experiments have shown that it
is indeed a very efﬁcient strategy (Urbani et al. 2018).

On the other hand, we consider two well-known nor-
single-piece-
malisation procedures of a set of rules:
decomposition, which breaks rule heads into subsets called
pieces and outputs a logically equivalent rule set (Baget et al.
2011; K¨onig et al. 2013); and atomic-decomposition, which
requires to introduce fresh predicates and outputs a set of
atomic-head rules that form a conservative extension of the
original set, hence preserve entailment (Cal`ı, Gottlob, and
Kifer 2008b; Cal`ı, Gottlob, and Pieris 2012).

Contributions. We provide a systematic study of the im-
pact of these procedures on the different chase variants with
respect
to chase (non-)termination and FO-rewritability.
This also leads us to solve some open problems related to
chase termination, which are of independent interest.

Although the relationships between most chase vari-
ants with respect to chase termination are well understood
(Grahne and Onet 2018), the question remained open re-
garding the restricted chase and its Datalog-ﬁrst version.
Unexpectedly, we found that Datalog-ﬁrst strategies are not
always optimal: we exhibit a rule set R such that the re-
stricted chase has a terminating sequence on any KB (cid:104)R, F (cid:105)
but there is a KB (cid:104)R, F (cid:105) on which no Datalog-ﬁrst strategy
terminates (Section 3).

While it appears that none of the considered decomposi-
tions inﬂuences FO-rewritability, the situation is very dif-
ferent concerning chase termination, as summarized in Ta-
ble 1. Note that we distinguish between two behaviors
for restricted chases: ∃ means that at least one chase se-
quence terminates on any KB (“sometimes-termination”)
and ∀ that all sequences terminate on any KB (“termina-
tion”). Single-piece-decomposition (Section 4) has no im-
pact on the oblivious and equivalent chases (noted =), a pos-
itive impact on the semi-oblivious chase (noted +), and an
erratic impact on (Datalog-ﬁrst-)restricted chase (noted (cid:54)=).
The standard atomic-decomposition (Section 5), called one-
way in the table, has a negative impact on all chase variants,
except for the (semi-)oblivious ones. Looking for a well-
behaved atomic-decomposition procedure, we study a new

one, named two-way (Section 6). A salient property of this
decomposition is that it preserves the existence of a ﬁnite
universal model. As shown in the table, two-way behaves
better than one-way: it preserves (sometimes-)termination
of the Datalog-ﬁrst restricted chase and may even improve
the sometimes-termination of the restricted chase. However,
the negative impact on the termination of the restricted chase
remains. These ﬁndings led us to an intriguing question:
does a computable normalisation procedure exist that pro-
duces atomic-head rules and exactly preserves the termina-
tion of the restricted chase? We show that the answer is neg-
ative by a complexity argument (Section 7). More speciﬁ-
cally, we study the decidability status of the following prob-
lem: Given a KB K = (cid:104)R, F (cid:105), does the restricted chase
terminate on K? We show that the associated membership
problem is at least at the second level of the arithmetical hi-
erarchy (precisely Π0
2-hard) when there is no restriction on
R, while it is recursively enumerable (in Σ0
1) when R is a
(cid:40) Π0
set of atomic-head rules. Since Σ0
2, we obtain the
1
negative answer to our question.

The complete proofs for all of the results in this paper can

be found on an arXiv submission with the same name.

2 Preliminaries
First-Order Logic (FOL) We deﬁne Preds, Cons, and
Vars to be mutually disjoint, countably inﬁnite sets of
predicates, constants, and variables, respectively. Every
P ∈ Preds has an arity ar(P ) ≥ 0. Let Terms =
Cons ∪ Vars be the set of terms. We write lists t1, . . . , tn
of terms as (cid:126)t and often treat them as sets. For a formula
or set thereof U , let Preds(U ), Cons(U ), Vars(U ), and
Terms(U ) be the sets of all predicates, constants, variables,
and terms that occur in U , respectively.

An atom is a FOL formula P ((cid:126)t) with P a |(cid:126)t|-ary predicate
and (cid:126)t ∈ Terms. For a formula U , we write U [(cid:126)x] to indicate
that (cid:126)x is the set of all free variables that occur in U .
Deﬁnition 1. An (existential) rule R is a FOL formula

∀(cid:126)x∀(cid:126)y.(cid:0)B[(cid:126)x, (cid:126)y] → ∃(cid:126)z.H[(cid:126)x, (cid:126)z](cid:1)
where (cid:126)x, (cid:126)y, and (cid:126)z are pairwise disjoint lists of variables;
and B and H are (ﬁnite) non-empty conjunctions of atoms,
called the body and the head of R, respectively. The set (cid:126)x is
the frontier of R. If (cid:126)z is empty, then R is a Datalog rule.

(1)

Next, we often denote a rule such as R above by B → H

or B → ∃(cid:126)z.H, omitting all or some quantiﬁers.

A factbase F is an existentially closed (ﬁnite) conjunction
of atoms. A Boolean conjunctive query (BCQ) has the same
form as a factbase, and we often identify both notions.A
knowledge base (KB) K is a tuple (cid:104)R, F (cid:105) with R a rule set
and F a factbase. We often identify rule bodies, rule heads,
and factbases with (ﬁnite) sets of atoms.

Given atom sets F and F (cid:48), a homomorphism π from F to
F (cid:48) is a function with domain Vars(F ) such that π(F ) ⊆
F (cid:48); π is an isomorphism from F to F (cid:48) if additionally, π
is injective and π−1 is a homomorphism from F to F (cid:48). A
homomorphism π from F to F (cid:48) is a retraction if π is the
identity over Vars(F ) ∩ Vars(F (cid:48)) (next, we often use this
notion with F (cid:48) ⊆ F ).

We identify logical interpretations with atom sets. An
atom set F satisﬁes a rule R = B → H if, for every ho-
momorphism π from B to F , there is an extension ˆπ of π
with ˆπ(H) ⊆ F ; equivalently, F is a model of R. An atom
set M is a model of a factbase F if there is a homomor-
phism from F to M, and it is a model of a KB (cid:104)R, F (cid:105) if it is
a model of F and satisﬁes all rules in R. Given KBs or atom
sets A and B, A entails B, written A |= B, if every model
of A is a model of B; A and B are equivalent if A |= B and
B |= A. Given atom sets F and F (cid:48), it is known that F |= F (cid:48)
iff there is a homomorphism from F (cid:48) to F .

Deﬁnition 2. A model M of a KB K is universal if there is
a homomorphism from M to every model of K.

Every KB K admits some (possibly inﬁnite) universal
model. Hence, K |= Q for any BCQ Q iff there is a ho-
momorphism from a universal model of K to Q. The BCQ
entailment problem takes as input a KB K and a BCQ Q and
asks if K |= Q; it is undecidable (Beeri and Vardi 1981).

Next, we will consider transformations of rule sets that
introduce fresh predicates. To specify the relationships be-
tween a rule set and its decomposition, we will rely on the
notion of conservative extension:
Deﬁnition 3 (Conservative extension). Let R and R(cid:48) be two
rule sets such that Preds(R) ⊆ Preds(R(cid:48)). The set R(cid:48) is
a conservative extension of the set R if (1) the restriction of
any model of R(cid:48) to the predicates in Preds(R) is a model
of R, and (2) any model M of R can be extended to a model
M(cid:48) of R(cid:48) that has the same domain (i.e., Terms(M) =
Terms(M(cid:48))) and agrees with M on the interpretation of
the predicates in Preds(R) (i.e., they have the same atoms
with predicates in Preds(R)).

When R(cid:48) is a conservative extension of R, for any fact-
base F the KBs (cid:104)R, F (cid:105) and (cid:104)R(cid:48), F (cid:105) entail the same (closed)
formulas on Preds(R), in particular BCQs.

The chase The chase is a family of procedures that repeat-
edly apply rules to a factbase until a ﬁxpoint is reached. We
formally deﬁne such procedures before stating their correct-
ness with respect to factbase entailment in Proposition 7.

Deﬁnition 4 (Triggers and derivations). Given a fact set F ,
a trigger t on F is a tuple (cid:104)R, π(cid:105) with R = B → ∃(cid:126)z.H a
rule and π a homomorphism from B to F . Let support(t) =
π(B) and output(t) = πR(H), where πR is the extension of
π that maps every variable z ∈ (cid:126)z to the fresh variable zt that
is unique for z and t. A derivation from a KB K = (cid:104)R, F (cid:105)
is a sequence D = (∅, F0), (t1, F1), . . . such that:

1. Every Fi in D is a factbase; moreover, F0 = F .
2. Every ti in D is a trigger (cid:104)R, π(cid:105) on Fi−1 such that R ∈ R,

output(ti) (cid:54)⊆ Fi−1, and Fi = Fi−1 ∪ output(ti).

The result of D, written res(D), is the union of all the fact-
bases in D. Let triggers(D) be the set of all triggers in D
and length(D) = |triggers(D)| be the length of D.

Different chase variants build speciﬁc derivations accord-
ing to different criteria of trigger applicability. Below, the

letters O, SO, R, and E respectively refer to so-called obliv-
ious, semi-oblivious, restricted, and equivalent1 variants.
Deﬁnition 5 (Applicability). A trigger t = (cid:104)R, π(cid:105) on a fact-
base F is (i) O-applicable on F if output(t) (cid:54)⊆ F , (ii)
SO-applicable on F if output(t(cid:48)) (cid:54)⊆ F for every trigger
t(cid:48) = (R, π(cid:48)) with π(x) = π(cid:48)(x) for all x ∈ fr(R), (iii) R-
applicable on F if there is no retraction from F ∪ output(t)
to F , and (iv) E-applicable on F if there is no homomor-
phism from F ∪ output(t) to F .
Example 1. Consider the KB K = (cid:104)R, F (cid:105) with R = {R =
P (x, y) → ∃z.P (y, z) ∧ P (z, y)} and F = {P (a, b)} with
a and b some constants. The trigger t1 = (R, π1) with
π1 = {x (cid:55)→ a, y (cid:55)→ b} is X-applicable on F0 = F (for
any X), and output(t1) = {P (b, zt1), P (zt1, b)}. There are
two new triggers on F1 = F ∪ output(t1), both O- and SO-
applicable, but neither R- nor E-applicable. For instance,
consider t2 = (R, π2) with π2 = {x (cid:55)→ b, y (cid:55)→ zt1 } and
output(t2) = {P (zt1 , zt2 ), P (zt2, zt1)}: there is a retrac-
tion from F1 ∪ output(t2) to F1, which maps zt2 to b.
Deﬁnition 6 ((DF-)X-Chase). For an X ∈ {O, SO, R, E},
an X-derivation from a KB K = (cid:104)R, F (cid:105) is a derivation D
such that every trigger ti ∈ triggers(D) is X-applicable on
Fi; D is a DF-X-derivation if it gives priority to Datalog
rules: for any ti = (cid:104)R, π(cid:105) ∈ triggers(D), if R is a non-
Datalog rule, then Fi−1 satisﬁes every Datalog rule in R. A
(DF-)X-derivation D is fair if for every Fi occurring in D
and trigger t X-applicable on Fi, there is some j > i such
that t is not X-applicable on Fj. A (DF-)X-derivation is
terminating if it is fair and ﬁnite.

The result of any fair X-derivation is a universal model
of the KB, for X ∈ {O, SO, R}, and has a retraction to a
universal model for X = E. Therefore, we obtain:
Proposition 7. Consider a BCQ Q, a KB K, and some fair
X-derivation D from K where X ∈ {Y, DF-Y} and Y ∈
{O, SO, R, E}. Then, K |= Q iff res(D) |= Q.

Decidable Classes of Rule Sets We now deﬁne classes
of rule sets that ensure the decidability of BCQ entailment,
based either on chase termination or on query rewritability.
Deﬁnition 8 (Chase-Terminating Sets). For a Y ∈
{O, SO, R, E} and an X ∈ {Y, DF-Y}, let CT X
∀∀ (resp.
CT X
∀∃) be the set of all rule sets R such that every (resp.
some) fair X-derivation from every KB (cid:104)R, F (cid:105) is ﬁnite.

When R ∈ CT X

∀∃), R ensures the termina-

∀∀ (resp. CT X
tion (resp. sometimes termination) of the X-chase.
Example 2. Consider the KB K = (cid:104)R, F (cid:105) from Example 1.
All fair O- or SO-derivations from K are inﬁnite. The only
one fair R-derivation (resp. E-derivation) from K is D =
(∅, F0), (t1, F1). Any fair R-derivation from a KB with R is
ﬁnite and hence, R ∈ CT R

∀∀ (and R ∈ CT E

∀∀).

1The equivalent chase behaves as the better-known core chase
regarding termination:
it halts exactly when the KB has a ﬁnite
universal model. The difference lies in the fact that the core chase
computes a minimal universal model (i.e., a core). The equivalent
chase has the advantage of being monotonic (∀i, Fi ⊆ Fi+1).

Deﬁnition 9 (FO-rewritability). A rule set R is FO-
rewritable if for any BCQ Q, there is a (ﬁnite) BCQ set
{Q1, . . . , Qn} such that, for every factbase F , (cid:104)R, F (cid:105) |= Q
iff F |= Qi for some 1 ≤ i ≤ n.

In our proofs, we rely on a property equivalent to FO-
rewritability: the bounded derivation depth property, which
has the advantage of being based on (a breadth-ﬁrst version
of) the chase (Cal`ı, Gottlob, and Lukasiewicz 2009). See
(Gottlob et al. 2014) about the equivalence between both
properties.
Deﬁnition 10 (BDDP). For a rule R and a factbase F , let
R(F ) ⊇ F be the minimal factbase that includes output(t)
for every trigger t with R. For a rule set R, let R(F ) =
(cid:83)
R∈R R(F ). For a KB K = (cid:104)R, F (cid:105), let Ch0(K) = F and

Chi(K) = R(Chi−1(K)) for every i ≥ 1.

A rule set R has the bounded derivation depth property
(BDDP) if, for any BCQ Q, there is some k ≥ 0 such that,
for every factbase F , (cid:104)R, F (cid:105) |= Q iff Chk((cid:104)R, F (cid:105)) |= Q.

Normalisation Procedures Finally, we formally deﬁne
normalisation procedures and their impact on the above
properties. A normalisation procedure is a function f that
maps rule sets to rule sets (complying with a certain shape)
such that for any rule set R, (cid:104)R, F (cid:105) |= Q iff (cid:104)f (R), F (cid:105) |= Q
for any factbase F and BCQ Q on Preds(R).
Deﬁnition 11. Consider some X ∈ {O, SO, R, DF-R, E}.
Then, a normalisation procedure f :
• Preserves termination of the X-chase if f (CT X

∀∀) ⊆
∀∀; it preserves sometimes-termination of the X-chase

CT X
if f (CT X

∀∃) ⊆ CT X
∀∃.

• Preserves non-termination of the X-chase if f (CT X
∀∀. Otherwise, f may gain termination.

CT X

∀∀) ⊆

• Preserves rewritability if it maps FO-rewritable rule sets

to FO-rewritable rule sets.

3 Generality of Chase-Terminating Rule Sets
One of our goals is to study normalisation procedures that
preserve membership over the sets of chase-terminating rule
sets from Deﬁnition 8. To be systematic, we clarify the
equality and strict-subset relations between these sets in
Theorems 12 and 13, respectively. Grahne and Onet al-
ready proved most of the claims in these theorems (see The-
orem 4.5, Propositions 4.6 and 4.7, and Corollary 4.8 in
(Grahne and Onet 2018)); we reprove some of them again
to be self-contained. However, note that all results regarding
Datalog-ﬁrst chase variants are our own contribution.
Theorem 12. For every X ∈ {O, SO, E}, we have that

∀∃

CT X

∀∀ = CT X

∀∀ = CT DF-X

∀∃ = CT DF-X
Sketch. To show that the theorem holds if X = O (resp.
X = SO), it sufﬁces to prove that all fair X-derivations from
an input KB K produce the same result (resp. same result up
to isomorphism); see forthcoming Lemma 16.

All fair E-derivations from an input KB K are ﬁnite iff K
admits a ﬁnite universal model (Rocher 2016). Hence, the
theorem holds if X = E.

R, S

R, S

S

a : A

A

R, S

S

A

R, S

S

A

Figure 1: The only result of the DF-R-chase from the KB K =
(cid:104)R, {A(a)}(cid:105) introduced in the proof of Theorem 13

The equalities in Theorem 12 simplify our work: for in-
stance, if a function preserves termination of the oblivi-
ous chase, then we know that it also preserves sometimes-
termination of this variant. Alas, the remaining sets of
chase-terminating rule sets are not equal:
Theorem 13. The following hold:
∀∀ ⊂ CT R
∀∃ ⊂ CT R

∀∀ ⊂ CT DF-R
∀∃ ⊂ CT E
inclusions follow by deﬁnition; we

Sketch. The subset
present some rule sets to show that these are strict:

O
∀∀ ⊂ CT

⊂ CT DF-R

CT

SO

∀∀

∀∀

∀∀ \ CT

SO
∀∀

SO
∀∀ \ CT

O
{P (x, y) → ∃z.P (x, z)} ∈ CT
∀∀
{P (x, y) → ∃z.P (y, z) ∧ P (z, y)} ∈ CT R
{P (x, y) → ∃z.P (y, z),
P (x, y) → P (y, x)} ∈ CT DF-R
{P (x, y) → ∃z.P (y, z) ∧ P (z, y),
P (x, y) → ∃z.P (y, z)} ∈ CT DF-R
{P (x, y) → ∃z.P (y, z),
P (x, y) ∧ P (y, z) → P (y, x)} ∈ CT E
Moreover, the rule set R = {(2–6)} is in CT R

\ CT R
∀∀

∀∀

∀∃

\ CT DF-R

∀∀

∀∀ \ CT R

∀∃

A(x) → R(x, x)
R(x, y) ∧ S(y, z) → S(x, x)
A(x) ∧ S(x, y) → A(y)

A(x) → ∃z.R(x, z)
R(x, y) → ∃z.S(y, z)

∀∃ \ CT DF-R
∀∃ :
(2)
(3)
(4)
(5)
(6)

To show that R /∈ CT DF-R

∀∃ we prove that the KB K =
(cid:104)R, {A(a)}(cid:105) does not admit terminating DF-R-derivations.
Speciﬁcally, all fair DF-R-derivations from K yield the same
result, which is depicted in Figure 1. Rule (2) is applied
ﬁrst, then the following pattern is repeated: apply rule (6)
followed by Datalog rules (3), (4) and (2). Rule (5) is never
applicable since priority is given to rule (2). To show that
R ∈ CT R
∀∃ we verify that every KB of the form (cid:104)R, F (cid:105)
admits a terminating R-derivation. We can produce such
a derivation by exhaustively applying the rules in R in the
following order:2 ﬁrst, apply rules (4), (5) and (6); then,
apply (3); ﬁnally, apply (2).

Our main achievement is showing that CT R

is
non-empty; thus proving that Datalog-ﬁrst strategies are not
necessarily the most terminating for the restricted chase.

∀∃ \ CT DF-R

∀∃

2To understand why this strategy results in a terminating R-
derivation, we suggest to ﬁrst try it on F = {A(a)}, which yields
{A(a), R(a, z1), S(z1, z2), S(a, a), R(a, a)}.

4 Single-Piece Decomposition
The single-piece decomposition (piece-decomposition in
short) is a procedure that splits a rule R = B → ∃z.H
into several rules R1, . . . , Rn that have the same body as R,
and whose head is a subset of H that (directly or indirectly)
shares some existential variable in H.

Deﬁnition 14. The piece graph of a rule R = B → ∃(cid:126)z.H
is the graph whose vertices are the atoms in H, and with an
edge between a and a(cid:48) if (cid:126)z ∩ Vars(a) ∩ Vars(a(cid:48)) is non-
empty. A (rule) piece of R is the conjunction of atoms cor-
responding to a (connected) component of its piece graph.

The piece-decomposition of a rule R = B → ∃(cid:126)z.H is the
rule set sp(R) = {B → ∃(cid:126)v.H (cid:48) | H (cid:48) is a piece of R}. For a
rule set R, let sp(R) = (cid:83)
Example 3. Consider the rule (7) and its single-piece de-
composition sp((7)) = {(8–10)}:

R∈R sp(R).

R(x, y) → ∃z, u.P (x, z) ∧ A(z) ∧ A(u) ∧ P (x, y)
R(x, y) → ∃z.P (x, z) ∧ A(z)
R(x, y) → ∃u.A(u)
R(x, y) → P (x, y)

(7)
(8)
(9)
(10)

Piece-decomposition is indeed a normalisation procedure,

since it preserves logical equivalence:

Proposition 15. A rule set R is equivalent to the set sp(R).

The following lemma is later applied to show that the
piece-decomposition preserves termination of the oblivious
and semi-oblivious chase in Theorem 18:
Lemma 16. Consider some fair X-derivations D and D(cid:48)
from a KB K. If X = O, then res(D) = res(D(cid:48)). If X = SO,
then res(D) is isomorphic to res(D(cid:48)).
Deﬁnition 17. Given some X ∈ {O, SO} and a KB K, let
ChX(K) be some (arbitrarily chosen) atom set that is isomor-
phic to the result of all fair X-derivations from K.
Theorem 18. The piece-decomposition preserves the termi-
nation of the O-chase and SO-chase.

Sketch. Consider some X ∈ {O, SO} and some X-
derivation D from a KB K = (cid:104)R, F (cid:105). We can show via
induction on D that there is an injective homomorphism
from ChX((cid:104)sp(R), F (cid:105)) to ChX(K). Therefore, ﬁniteness of
ChX(K) implies ﬁniteness of ChX((cid:104)sp(R), F (cid:105)).

The piece-decomposition does not preserve the termina-
tion of any restricted chase variant. The reason is that it al-
lows for intertwining the application of split rules that come
from different original rules, resulting in new application
strategies that may lead to non-termination.

Theorem 19. The piece-decomposition does not preserve
termination of the R- or the DF-R-chase.

Sketch. Consider the rule set R = {(11), (12)} and its
piece-decomposition sp(R) = {(12–14)}:

The set R is in CT R

∀∀ because triggers with (12)
are not R-applicable to the output of
triggers with
(11). The set sp(R) is not in CT R
∀∀ because the KB
(cid:104)sp(R), {A(a)}(cid:105) admits the following non-terminating R-
derivation (∅, F0), (t1, F1), . . .:

F0 = {A(a)},
F1 = {P (a, z1)} ∪ F0,
F2 = {A(z1)} ∪ F1,
F3 = {P (z1, z2)} ∪ F2,

F4 = {P (z1, z1)} ∪ F3,
F5 = {A(z2)} ∪ F4,
F6 = {P (z2, z3)} ∪ F5,

. . .

This derivation is built by ﬁrst applying rule (12) (leading
to F1), then indeﬁnitely repeating the sequence of rule ap-
plications (14), (12), and (13). In contrast, the only fair R-
derivation with R would apply (12) then (11), leading to
{A(a), P (a, z1), P (z1, z1), A(z1)}.

To get a similar behavior with the DF-R chase, we intro-
duce “dummy” existential variables in rules (11) and (12),
so that their piece-decomposition has no Datalog rules:

P (x, y, v) → ∃u, w.P (y, y, u) ∧ A(y, w)

A(x, v) → ∃z, u.P (x, z, u)

(15)
(16)

Applying analogous arguments we can show that R(cid:48) =
{(15), (16)} is in CT DF-R

and that sp(R(cid:48)) is not.

∀∀

Initially, we believed that the piece-decomposition would
preserve sometimes-termination of the R-chase. Our in-
tuition was that, given a terminating R-derivation from a
KB K = (cid:104)R, F (cid:105), we could replicate this derivation from
(cid:104)sp(R), F (cid:105) by applying the split rules in sp(R) piece by
piece. Surprisingly, this is not always possible:

Theorem 20. The piece-decomposition does not preserve
the sometimes-termination of the R-chase.

Sketch. The following set R = {(17–22)} is in CT R
∀∃ and
its piece-decomposition sp(R) = {(18–24)} is not. The set
R is adapted from {(2–6)} (proof of Th. 13). Note that (17)
is split into two equivalent rules (23) and (24). To show that
sp(R) (cid:54)∈ CT R
∀∃, we start again from {A(a)}. Again, some
R-atom is created and leads to apply other rules. With R,
applying (17) then (18) creates an atom of form R(y1, z1),
while with sp(R), applying (23) then (18) creates an atom
R(y1, y1). This loop leads to non-termination.

U (x, y) ∧ U (x, z) → R(y, z)
U (x, z) ∧ R(y, z) → ∃v.R(z, v)
R(x, y) ∧ R(y, z) → ∃v.S(z, v)
R(x, y) ∧ S(y, z) → S(x, x)

A(x) → ∃y, z.U (x, y)∧H(y, x)∧U (x, z)∧H(z, x) (17)
(18)
(19)
(20)
(21)
(22)
(23)
(24)

A(x) → ∃y.U (x, y)∧H(y, x)
A(x) → ∃z.U (x, z)∧H(z, x)

A(x) ∧ U (x, y) ∧ S(y, z) → ∃v.H(z, v) ∧ A(v)

P (x, y) → P (y, y)∧A(y) (11)
(12)

A(x) → ∃z.P (x, z)

P (x, y) → P (y, y) (13)
P (x, y) → A(y)
(14)

Theorem 21. The piece-decomposition does not preserve
the sometimes-termination of the DF-R-chase.

Sketch. The set R = {(25–29)} is in CT DF-R
∀∃ while
sp(R) = {(26–31)} is not. Note that the only difference
with {(2–6)} is the atom H(x, y) in the ﬁrst rule, making it
non-Datalog, which prevents its early application.

A(x) → ∃y.R(x, x) ∧ H(x, y)

R(x, y) ∧ S(y, z) → S(x, x)
A(x) ∧ S(x, y) → A(y)

(25)
(26)
(27)

A(x) → ∃y.R(x, y) (28)
(29)

R(x, y) → ∃z.S(y, z)

A(x) → R(x, x)
(30)
A(x) → ∃y.H(x, y) (31)

Since piece-decomposition preserves logical equivalence
(Proposition 15), one directly obtains that it preserves ter-
mination of the equivalent chase. Indeed, (cid:104)R, F (cid:105) admits a
ﬁnite universal model iff (cid:104)sp(R), F (cid:105) admits one:

Theorem 22. The piece-decomposition preserves the termi-
nation of the E-chase.

The piece-decomposition may gain termination:

Theorem 23. The piece-decomposition may gain termina-
tion (and sometimes-termination) of the SO-, the R-, and the
DF-R-chase but not of the O- and E-chase.

∀∀, CT R

∀∀, CT DF-R

Sketch. Consider the set R = {P (x, y) → ∃z.P (x, z) ∧
SO
R(x, y)}, which is not in CT
∀∃ , or
CT DF-R

∀∃, CT R
∀∀ . However, sp(R) is in all of these sets.
Concerning the O-chase, we show via induction that
ChO((cid:104)R, F (cid:105)) and ChO((cid:104)sp(R), F (cid:105)) are isomorphic for any
rule set R and factbase F (where ChO(·) is the function from
Deﬁnition 17, which maps a KB to its only O-chase result).
Hence, all O-derivations from (cid:104)R, F (cid:105) are terminating iff all
O-derivations from (cid:104)sp(R), F (cid:105) are terminating. Concerning
the E-chase, we rely again on Proposition 15.

To show that

the piece-decomposition preserves FO-
rewritability we show that it preserves the BDDP property.

Theorem 24. A rule set R is BDDP iff sp(R) is BDDP.

Sketch. We can prove by induction that,
for any KBs
(cid:104)R, F (cid:105) and any i ≥ 1, the factbases Chi((cid:104)R, F (cid:105)) and
Chi((cid:104)sp(R), F (cid:105)) are isomorphic.

5 One-Way Atomic Decomposition

Piece-decomposition may not produce atomic-head rules; a
useful restriction considered in many contexts. The follow-
ing procedure is classically used to produce such rules:

Deﬁnition 25. The one-way atomic decomposition of a rule
R = B[(cid:126)x, (cid:126)y] → ∃(cid:126)z.H[(cid:126)x, (cid:126)z] is the rule set 1ad(R) that
contains the rule B → ∃(cid:126)z.XR((cid:126)x, (cid:126)z) and, for each atom
P ((cid:126)t) ∈ H, the rule XR((cid:126)x, (cid:126)z) → P ((cid:126)t), where XR is a fresh
predicate unique for R, of arity |(cid:126)x| + |(cid:126)z|. Given a rule set R,
let 1ad(R) = (cid:83)

R∈R 1ad(R).

Example 4. Consider the rule (32) and its one-way atomic
decomposition 1ad((32)) = {(33–35)}:

R(x, y) → ∃z.P (x, z) ∧ S(x, y, z)
R(x, y) → ∃z.X(32)(x, y, z)

X(32)(x, y, z) → P (x, z)
X(32)(x, y, z) → S(x, y, z)

(32)
(33)
(34)
(35)

Note that piece-decomposition would not decompose rule
(32), i.e., sp((32)) = {(32)}

Strictly speaking, R and 1ad(R) cannot be logically
equivalent because they are built on different sets of pred-
icates; however, it is straighforward to check that 1ad(R) is
a conservative extension of R. Therefore, one-way atomic
decomposition is indeed a normalisation procedure.

The following is a corollary of forthcoming Theorem 34:

Theorem 26. The one-way atomic decomposition preserves
termination of the O- and SO-chase.

An interesting phenomenon occurs with the one-way
atomic decomposition: the notions of SO-applicability on
R and R-applicability on 1ad(R) coincide:
Lemma 27. Consider a KB (cid:104)R, F (cid:105) and a ﬁnite deriva-
tion D = (∅, F0), (t1, F1), . . . , (tn, Fn) from (cid:104)1ad(R), F (cid:105).
Then, a trigger t with a rule in 1ad(R) is R-applicable on
Fn iff it is SO-applicable on Fn.

Proof. (⇒): from Deﬁnition 5. (⇐): Let t = (R, π) with
R ∈ 1ad(R). If R is Datalog, the notions of SO- and R-
applicability coincide for every factbase. Otherwise, R is of
the form B[(cid:126)x, (cid:126)y] → ∃(cid:126)z.XR(cid:48)((cid:126)x, (cid:126)z) where XR(cid:48) (cid:54)∈ Preds(R)
and R(cid:48) ∈ R is of the form B[(cid:126)x, (cid:126)y] → ∃(cid:126)z.H[(cid:126)x, (cid:126)z]. If t is SO-
applicable on Fn, then, for every trigger t(cid:48) = (R, π(cid:48)) with
π((cid:126)x) = π(cid:48)((cid:126)x), it holds that output(t(cid:48)) (cid:54)⊆ Fn. By Deﬁni-
tion 25, R is the only rule in 1ad(R) with XR(cid:48) in its head,
hence π(cid:48)(cid:48)(XR(cid:48)((cid:126)x, (cid:126)z)) /∈ Fn for every extension π(cid:48)(cid:48) of π.
Hence, t is R-applicable on Fn.

Intuitively, Lemma 27 implies that, after applying the
one-way atomic decomposition, R-applicability becomes as
loose and unrestrictive as SO-applicability. Therefore:
Theorem 28. The one-way atomic decomposition does not
preserve termination nor sometimes-termination of the R-
or the DF-R-chase.

∀∀, CT DF-R

∀∀ , CT DF-R

∀∃ , and CT R

SO
Proof. By Theorem 13, there is a rule set R /∈ CT
∀∀ that is
in CT R
∀∃.3 By Theorem 26,
SO
1ad(R) is not in CT
∀∀; that is, there is some KB K of the
form (cid:104)1ad(R), F (cid:105) that does not admit any terminating SO-
derivation. By Lemma 27, every terminating R-derivation
from K is also a terminating SO-derivation from K. There-
fore, K does not admit any terminating R-derivation, hence
1ad(R) is not in CT R

∀∃ , or CT R
∀∃.

∀∀ , CT DF-R

∀∀, CT DF-R

Theorem 29. The one-way atomic decomposition does not
preserve the termination of the E-chase.

3Such rule set in given in the proof of Theorem 13; see also

{(36)} in the proof of Theorem 29.

Proof. Consider the rule set R = {(36)} (see also Example
1) and its decomposition 1ad(R) = {(37–39)}:

P (x, y) → ∃z. P (y, z) ∧ P (z, y)
P (x, y) → ∃z.X(36)(y, z)

X(36)(y, z) → P (y, z)
X(36)(y, z) → P (z, y)

(36)
(37)
(38)
(39)

The rule set R is in CT E

∀∀ since every E-derivation from
a KB (cid:104)R, F (cid:105) yields a ﬁnite result, which is a subset of F ∪
{P (a, za), P (za, a) | a ∈ Terms(F ), za (cid:54)∈ Terms(F )}.

The rule set 1ad(R) is not in CT E

(cid:104)1ad(R), {P (a, b)}(cid:105) has no terminating E-derivation.
fact, all fair E-derivations from K yield the same result:

∀∀ since the KB K =
In

{P (a, b), X(36)(b, z1), P (b, z1), P (z1, b)} ∪
{X(36)(zi, zi+1), P (zi, zi+1), P (zi+1, zi) | i ≥ 1}

Again, to show that the one-way decomposition preserves

FO-rewritability, we show that it preserves BDDP.
Theorem 30. A rule set R is BDDP iff 1ad(R) is BDDP.

Sketch. (⇒): For factbases F restricted to the original vo-
cabulary Σ, we prove that Chi(F, R) = Ch2i(F, 1ad(R))|Σ.
Dealing with arbitrary factbases is tackled by a weakening
If R is not BDDP, there
(⇐):
of this correspondence.
are Q and {Fi}i∈N such that for all i, Fi, R |= Q and
Chi(Fi, R) (cid:54)|= Q. Since for all Fi on Σ, Chi(Fi, R) =
Ch2i(Fi, 1ad(R))|Σ, it holds that Ch2i(Fi, 1ad(R)) (cid:54)|= Q,
hence 1ad(R) is not BDDP.

6 Two-Way Atomic Decomposition
Despite the fact that it produces a conservative extension of
the original rule set, the one-way atomic decomposition does
not preserve the existence of a ﬁnite universal model; hence,
it does not preserve equivalent chase termination.
Example 5. As in the proof of Theorem 29, consider
R = {(36)}, its decomposition 1ad(R) = {(37–39)},
and the factbase F = {P (a, b)}.
Then, U =
{P (a, b), P (b, z1), P (z1, b)} is a ﬁnite universal model for
(cid:104)R, F (cid:105) that cannot be extended (keeping the same domain)
into is a universal model of (cid:104)1ad(R), F (cid:105). Indeed, the set

{P (a, b), P (b, z1), P (z1, b), X(36)(b, z1), X(36)(z1, b)}

is the smallest extension of U that
(cid:104)1ad(R), F (cid:105), but it is not universal.

is a model

for

Hence, we deﬁne a notion similar to that of conservative
extension, but whose purpose is to guarantee the preserva-
tion of the equivalent chase termination.
Deﬁnition 31. Let R and R(cid:48) be two rule sets such that
Preds(R) ⊆ Preds(R(cid:48)). The set R(cid:48) is a universal-
conservative extension of the set R if, for any factbase F
with Preds(F ) ⊆ Preds(R),
1. The restriction of any universal model of (cid:104)R(cid:48), F (cid:105) to the
predicates in Preds(R) is a universal model of (cid:104)R, F (cid:105).

2. Any universal model M of (cid:104)R, F (cid:105) can be extended to a
universal model of (cid:104)R(cid:48), F (cid:105) that has the same domain and
agrees with M on the interpretation of Preds(R).
We now introduce a normalisation procedure that pro-

duces universal-conservative extensions:
Deﬁnition 32. The two-way atomic decomposition of a rule
R = B[(cid:126)x, (cid:126)y] → ∃(cid:126)z.H[(cid:126)x, (cid:126)z] is the rule set 2ad(R) =
1ad(R) ∪ {H[(cid:126)x, (cid:126)z] → XR((cid:126)x, (cid:126)z)}, with XR the fresh pred-
icate in 1ad(R). For a rule set R, we let 2ad(R) =
(cid:83)

R∈R 2ad(R).

Example 6. Consider again the rule (32) from Example
4. Then its two-way atomic decomposition is 2ad((32)) =
1ad((32)) ∪ {(40)}:

P (x, z) ∧ S(x, y, z) → X(32)(x, y, z)

(40)

We establish that this new decomposition is indeed a nor-

malisation procedure that has the desired property.
Proposition 33. The rule set 2ad(R) is a conservative ex-
tension and a universal-conservative extension of R.

We can now focus our interest again on chase termination.
Both atomic decompositions behave like the single-piece de-
composition (Theorem 18) regarding the oblivious and the
semi-oblivious chase:
Theorem 34. Both atomic decompositions preserve the ter-
mination of the O-chase and the SO-chase.

Sketch. Consider X ∈ {O, SO} and K = (cid:104)R, F (cid:105) a KB.
First note that for these X-chases, applying a rule cannot pre-
vent the application of another rule. Hence, since 1ad(R) ⊆
2ad(R), it is sufﬁcient to prove the result for 2ad(R). The
proof is similar to that of Theorem 18: we show by induc-
tion on an arbitrary derivation D from K that there is an
injective homomorphism from ChX((cid:104)2ad(R), F (cid:105)) restricted
to the predicates in Preds(R) to ChX(K), which leads to a
similar conclusion.

The behavior of the restricted chase is again less easily

characterized, as we will see in the next results.
Theorem 35. The two-way atomic decomposition preserves
sometimes-termination of the R-chase; it may also gain ter-
mination of this chase variant.

Sketch. To prove preservation, consider a KB K = (cid:104)R, F (cid:105)
such that R ∈ CT R
∀∃. Then, there is a terminating R-
derivation D from K. We can then show by induction that if
a trigger t = (R, π) with R = B → H is applied at some
step, the trigger t(cid:48) = (B → XR, π) is applicable at the same
step, then the triggers ti = (XR → Hi, πR) also are, and
that applying t(cid:48) and all the ti successively yields the same
result (when restricted to the predicates in R) as applying
t. This shows that we can replicate a terminating derivation,
and thus that the sometimes-termination is preserved.

We now present an example where we gain termination.

Consider the rule set R = {(41–45)}:

A(x) → ∃y, z R(x, x, x) ∧ R(x, y, z) (41)
R(x, y, z) → ∃t.R(x, x, t)
(42)

R(x, x, y) → ∃z.S(x, y, z)

R(x, x, y) ∧ S(x, y, z) → S(x, x, x)
A(x) ∧ S(x, x, y) → A(y)

(43)
(44)
(45)
There is no terminating R-derivation on the KB (cid:104)R, {A(a)}(cid:105)
but there is one on (cid:104)2ad(R), F (cid:105) for any F .

Theorem 36. The two-way atomic decomposition does not
preserve the termination of the R-chase.

Proof. Consider the rule set R = {(36)} introduced in the
proof of Theorem 29 and 2ad(R) = {(37–39), (46)}:

P (y, z) ∧ P (z, y) → X(36)(y, z)

X(36)(y, z) → P (y, z)
X(36)(y, z) → P (z, y)

P (x, y) → ∃z. P (y, z) ∧ P (z, y)
P (x, y) → ∃z.X(36)(y, z)

(36)
(37)
(38)
(39)
(46)
The R-chase yields the same result as the E-chase on R, so
R ∈ CT R
∀∀. We then construct an inﬁnite derivation from
(cid:104)2ad, P (a, b)(cid:105). First, apply (37), and (38). Then, repeat the
following pattern: (37), (38) (on the new variable), then (39)
and (46) (on the variables of the previous loop). Applying
(37) again before applying (46) yields an inﬁnite chain.

Again, the R-chase is not well-behaved with respect to
atomic decomposition. However, the DF-R-chase behaves
exactly as desired regarding the two-way atomic decompo-
sition.
In fact, we can show an even stronger result: any
DF-R-derivation from a KB (cid:104)R, F (cid:105) can be replicated by a
DF-R-derivation from (cid:104)2ad(R), F (cid:105), and conversely.
Theorem 37. The 2-way atomic decomposition has no im-
pact on the (sometimes-)termination of the DF-R-chase; i.e.,
∀∀ ) and CT DF-R
CT DF-R
Sketch. One can prove that any fair DF-R-derivation D from
(cid:104)R, F (cid:105) with R ∈ CT DF-R
can be replicated to yield a fair
DF-R-derivation D(cid:48) from (cid:104)2ad(R), F (cid:105) such that D(cid:48) is ﬁnite
if and only if D is. The reciprocal is also true.

∀∃ = 2ad(CT DF-R
∀∃ ).

∀∀ = 2ad(CT DF-R

∀∀

The following result follows from Proposition 33

Theorem 38. : The two-way atomic decomposition pre-
serves the termination of the E-chase.

The single-piece decomposition may gain termination for
some chase variants (Theorem 23); we are interested to
know if the same can happen with atomic decompositions.
Unfortunately, there is no way for a non-terminating rule set
to gain termination, as stated next:
Proposition 39. If a chase variant does not terminate on a
rule set R, it does not terminate on 1ad(R) and 2ad(R).

Sketch. For each trigger with a rule R in the original inﬁnite
fair derivation, one can consider the corresponding triggers
with 1ad(R) or 2ad(R), and thus produce an inﬁnite fair
derivation.

Regarding FO-rewritability, the two-way atomic decom-
position behaves similarily to the one-way atomic decompo-
sition (which can be proven similarly, see Theorem 30).
Theorem 40. A rule set R is BDDP iff 2ad(R) is BDDP.

7 No Normalisation for the Restricted Chase
Normalisation procedures studied so far do not maintain the
status of the termination of the R-chase. This raises the
question of the existence of such a procedure. We show
here that no computable function can map rule sets to sets
of rules having atomic head while preserving termination
and non-termination of the R-chase. To do that, we show
that with atomic-head rules, the class of rule sets CT R
F ∀
for which every fair R-derivation from (cid:104)R, F (cid:105) is ﬁnite is
a recursively enumerable set. With arbitrary rules, we show
it is hard for Π0
2, the second level of the arithmetic hierar-
chy (Rogers 1987). A complete problem for Π0
2 is to decide
whether a given Turing machine halts on every input word;
it remains complete when inputs are restricted to words on a
unary alphabet.
Proposition 41. For any factbase F , the subset of CT R
F ∀
composed of sets of atomic-head rules is recognizable.

Sketch. With atomic-head rules, it is known that the exis-
tence of an inﬁnite fair restricted derivation is equivalent
to the existence of an inﬁnite restricted derivation (Gogacz,
Marcinkowski, and Pieris 2020). Using K¨onig’s lemma, one
can show that the chase terminates iff there exists a k such
that any fair R-derivation is of length at most k.

Proposition 42. There exists a factbase F such that CT R
F ∀
is Π0

2-hard.4

Sketch. Given a Turing machine (TM) M whose input al-
phabet is unary, we build a KB K = (cid:104)Rw ∪ RM , F (cid:105) s.t.
every fair R-derivation from K is ﬁnite iff M halts on ev-
ery input. Regardless the chase variant, simulating a TM
with a rule set such that the chase terminates whenever
the TM halts is classical; we reuse the rule set RM pro-
vided in (Bourgaux et al. 2021), which we recall in Fig-
ure 4 for self-containment. We show that we can assume
wlog that all the rules of RM are applied after all the rules
of Rw (listed in Figure 3). The set Rw is used to gener-
ate from F arbitrarily large input tape representations in a
terminating way. To ensure that any fair R-derivation from
(cid:104)Rw, F (cid:105) terminates, we reuse the emergency brake tech-
nique from (Kr¨otzsch, Marx, and Rudolph 2019), which
allows one to stop the derivation at any desired length.
The representation of an input word of length j is a set
i , cj
of atoms of the shape {Nxt(cj
i ) | 0 ≤ i <
0), End(cj
j} ∪ {S (cj
j), Frst(cj
j)}. As detailed below, the
factbase F contains the representation of the input words of
length 0 and 1 (Item 1), atoms used as seeds to build larger
words (Item 2) and atoms that initialize the emergency brake
(Items 3 and 4):

i+1), S1(cj

1. Frst(c1
Frst(c0

0), S1(c1
0), End(c0

0, c1
0), Nxt(c1
0), S (c0
0)

1), End(c1

1), S (c1

1),

2. Int(a), NF(a, nf1), R(nf1), NF(nf1, b), D(nf1, b)

4Note that this contradicts the ﬁrst item of Theorem 5.1 in
(Grahne and Onet 2018). However, no proof is given for that state-
ment, which is uncorrectly attributed to (Deutsch, Nash, and Rem-
mel 2008).

c3
0 : S1, Frst, HdqI

c3
1 : S1

c3
2 : S1

c3
3 : S , End

c2
0 : S1, Frst, HdqI

c2
1 : S1

D

c2
2 : S , End

D

D

D

D

D

a : Int

NF

D, NF, Nxt, Nxt+, Stp

D, NF

D

f2

NF

F

nf1 : R

D, NF

f3

F

nf2 : R

c0
0 : Frst, End, S , HdqI

c1
0 : Frst, S1, HdqI

c1
1 : S , End

b : B, {Sa}, {Hdq}, Frst, End, (R)

Figure 2: The effect of Rw on F : Dashed atoms are D, F or NF atoms generated by the chase; Nxt atoms used by RM are dotted.

B(b) ∧ NF(z, x) ∧ R(x) → ∃y.NF(x, y) ∧ R(y)∧
D(y, b) ∧ NF(y, b)

(47)

B(b) → R(b)
NF(x, y) → ∃z.F(y, z)
F(x, y) → ∃z.D(y, z) ∧ End(z) ∧ S (z)
NF(t, x) ∧ NF(x, y) ∧ D(y, z) → ∃u.Nxt(u, z) ∧ D(x, u)

(48)
(49)
(50)

∧ S1(u)

(51)

NF(t, x) ∧ F(x, y) ∧ D(y, z) → ∃u.Nxt(u, z) ∧ D(x, u)

∧ S1(u)

(52)

Int(x) ∧ NF(x, y) ∧ D(y, z) → ∃u.Nxt(u, z) ∧ D(x, u)
∧ S1(u) ∧ Frst(u)

Frst(x) → HdqI (x)

(53)

(54)

Figure 3: Rules Rw to create the initial tapes

3. B(b), F(b, b), NF(b, b), D(b, b), Nxt(b, b), Lst(b), Frst(b)
4. Hds(b), Sl(b), End(b), Stp(b, b), Nxt+(b, b)

The chase works as follows: after generating a non-ﬁnal
(NF) chain with Rule (47), the brake (B) is made real (R)
by Rule (48), which prevents any extension of the non-ﬁnal
chain through restricted rule applications. A ﬁnal (F) el-
ement is added after each non-ﬁnal element by Rule (49),
and from each ﬁnal element a tape is created, by traversing
the chain, marking as done (D) processed elements, thanks to
Rules (50)-(53). Figure 2 depicts the result of any R-chase
derivation from (cid:104)Rw, F (cid:105) in which R(b) has been derived af-
ter exactly one application of Rule (47). Rule (54) sets the
initial state on the ﬁrst cell.

As it is known recursively enumerable sets are a strict sub-

2 (Rogers 1987), the following theorem follows.

sets of Π0
Theorem 43. No computable function f exists that maps
rule sets to rule sets having atomic-head rules such that R ∈
CT R

∀∀ if and only if f (R) ∈ CT R
∀∀.

Nxt(x, y) → Nxt+(x, y)
Nxt+(x, y) ∧ Nxt+(y, z) → Nxt+(x, z)
Nxt(x, y) ∧ Stp(x, z) ∧ Stp(y, w) → Nxt(z, w)
End(x) ∧ Stp(x, z) → ∃v.Nxt(z, v) ∧ S (v) ∧ End(v)
Hdq(x) ∧ Nxt+(x, y) ∧ Sc(y) → ∃z.Stp(y, z) ∧ Sc(z)
Hdq(x) ∧ Nxt+(y, x) ∧ Sc(y) → ∃z.Stp(y, z) ∧ Sc(z)
Hdq(x) ∧ Sa(x) → ∃z.Stp(x, z) ∧ Sb(z)
Hdq(x) ∧ Sa(x) ∧ Stp(x, z) ∧ Nxt(z, w) → Hdr(w)
Hdq(x) ∧ Sa(x) ∧ Stp(x, z) ∧ Nxt(w, z) → Hdr(w)

Figure 4: Rules RM for the Turing Machine simulation: the last
three rules are instantiated w.r.t.the transition function of M .

This applies in particular to normalisation procedures pro-

ducing rule sets with atomic-head rules.

8 Conclusion

As shown in this paper, normalisation procedures do have an
impact, sometimes unexpected, on chase termination. This
is particularly true regarding the restricted chase, which is
the most relevant in practice but also the most difﬁcult to
control. We extend the understanding of its behavior by
three results. We show that the Datatog-ﬁrst strategy is in
fact not always the most terminating, which goes against a
common belief. We introduce a new atomic-decomposition
(two-way), which behaves nicely, in particular regarding the
Datalog-ﬁrst restricted chase, but still has a negative im-
pact on the restricted chase termination. This leads to us to
show a more fundamental decidability result, which implies
that no computable atomic-decomposition exists that exactly
preserves the termination of the restricted chase (i.e., termi-
nation and non-termination). Note however that our result
does not rule out the existence of a computable normalisa-
tion procedure into atomic-head rules that would improve
the termination of the restricted chase, although this seems
unlikely. Future work includes investigating normalisation
procedures for ﬁrst-order logical formulas, to translate these
into the existential rule framework.

Acknowledgements
This work was partly supported by the ANR project CQFD
(ANR-18-CE23-0003).

References
Baget, J.; Lecl`ere, M.; Mugnier, M.; and Salvat, E. 2009.
Extending decidable cases for rules with existential vari-
ables. In IJCAI, 677–682.
Baget, J.; Lecl`ere, M.; Mugnier, M.; and Salvat, E. 2011.
On rules with existential variables: Walking the decidability
line. Artif. Intell. 175(9-10):1620–1654.
Beeri, C., and Vardi, M. Y. 1981. The implication prob-
lem for data dependencies. In International Colloquium on
Automata, Languages, and Programming, 73–85. Springer.
Bourgaux, C.; Carral, D.; Kr¨otzsch, M.; Rudolph, S.; and
Thomazo, M. 2021. Capturing homomorphism-closed de-
cidable queries with existential rules.
In Bienvenu, M.;
Lakemeyer, G.; and Erdem, E., eds., Proceedings of the 18th
International Conference on Principles of Knowledge Rep-
resentation and Reasoning, KR 2021, Online event, Novem-
ber 3-12, 2021, 141–150.
Cal`ı, A.; Gottlob, G.; and Kifer, M. 2008a. Taming the
inﬁnite chase: Query answering under expressive relational
In Proceedings of the Eleventh International
constraints.
Conference on Principles of Knowledge Representation and
Reasoning, KR’08, 70–80. AAAI Press.
Cal`ı, A.; Gottlob, G.; and Kifer, M. 2008b. Taming the
inﬁnite chase: Query answering under expressive relational
In Brewka, G., and Lang, J., eds., Principles
constraints.
of Knowledge Representation and Reasoning: Proc. of the
Eleventh International Conference, KR 2008, Sydney, Aus-
tralia, September 16-19, 2008, 70–80. AAAI Press.
Cal`ı, A.; Gottlob, G.; and Lukasiewicz, T. 2009. A general
datalog-based framework for tractable query answering over
ontologies. In PODS, 77–86. ACM.
Cal`ı, A.; Gottlob, G.; and Pieris, A. 2012. Towards more ex-
pressive ontology languages: The query answering problem.
Artif. Intell. 193:87–128.
Calvanese, D.; De Giacomo, G.; Lembo, D.; Lenzerini, M.;
and Rosati, R. 2007. Tractable reasoning and efﬁcient query
answering in description logics: The DL-Lite family. Jour-
nal of Automated Reasoning (JAR) 39(3):385–429.
Carral, D.; Dragoste, I.; and Kr¨otzsch, M. 2017. Restricted
chase (non)termination for existential rules with disjunc-
In Sierra, C., ed., Proceedings of the Twenty-Sixth
tions.
International Joint Conference on Artiﬁcial Intelligence, IJ-
CAI 2017, Melbourne, Australia, August 19-25, 2017, 922–
928. ijcai.org.
Deutsch, A.; Nash, A.; and Remmel, J. B. 2008. The chase
revisited. In Lenzerini, M., and Lembo, D., eds., Proc. of the
27th ACM SIGMOD-SIGACT-SIGART Symp. on Principles
of Database Systems, PODS 2008, 149–158. ACM.
Fagin, R.; Kolaitis, P. G.; Miller, R. J.; and Popa, L. 2003.
In Cal-
Data exchange: Semantics and query answering.
vanese, D.; Lenzerini, M.; and Motwani, R., eds., Database
Theory - ICDT 2003, 9th International Conference, Siena,

Italy, January 8-10, 2003, Proc., volume 2572 of Lecture
Notes in Computer Science, 207–224. Springer.
Gogacz, T.; Marcinkowski, J.; and Pieris, A. 2020. All-
instances restricted chase termination. In Suciu, D.; Tao, Y.;
and Wei, Z., eds., Proceedings of the 39th ACM SIGMOD-
SIGACT-SIGAI Symposium on Principles of Database Sys-
tems, PODS 2020, Portland, OR, USA, June 14-19, 2020,
245–258. ACM.
Gottlob, G.; Kikot, S.; Kontchakov, R.; Podolskii, V. V.;
Schwentick, T.; and Zakharyaschev, M. 2014. The price of
query rewriting in ontology-based data access. Artif. Intell.
213:42–59.
Grahne, G., and Onet, A. 2018. Anatomy of the chase.
Fundam. Informaticae 157(3):221–270.
Grau, B. C.; Horrocks, I.; Kr¨otzsch, M.; Kupke, C.; Magka,
D.; Motik, B.; and Wang, Z. 2013. Acyclicity notions for
existential rules and their application to query answering in
ontologies. J. Artif. Intell. Res. 47:741–808.
K¨onig, M.; Lecl`ere, M.; Mugnier, M.; and Thomazo, M.
2013. Sound, complete and minimal ucq-rewriting for exis-
tential rules. CoRR abs/1311.3198.
Kr¨otzsch, M.; Marx, M.; and Rudolph, S.
2019. The
In Barcel´o,
power of the terminating chase (invited talk).
P., and Calautti, M., eds., 22nd International Conference on
Database Theory, ICDT 2019, March 26-28, 2019, Lisbon,
Portugal, volume 127 of LIPIcs, 3:1–3:17. Schloss Dagstuhl
- Leibniz-Zentrum f¨ur Informatik.
Lecl`ere, M.; Mugnier, M.; Thomazo, M.; and Ulliana, F.
2019. A single approach to decide chase termination on
In Barcel´o, P., and Calautti, M.,
linear existential rules.
eds., Proceedings of the 22nd International Conference on
Database Theory, ICDT 2019, Lisbon, Portugal, volume
127 of LIPIcs, 18:1–18:19. Schloss Dagstuhl - Leibniz-
Zentrum f¨ur Informatik.
Marnette, B. 2009. Generalized schema-mappings: from
termination to tractability. In Paredaens, J., and Su, J., eds.,
Proc. of the Twenty-Eigth ACM SIGMOD-SIGACT-SIGART
Symp. on Principles of Database Systems, PODS 2009, June
19 - July 1, 2009, Providence, Rhode Island, USA, 13–22.
ACM.
Rocher, S. 2016. Querying Existential Rule Knowledge
Bases: Decidability and Complexity. Ph.D. Dissertation,
University of Montpellier, France.
Rogers, H. 1987. Theory of Recursive Functions and Effec-
tive Computability. Cambridge, MA, USA: MIT Press.
Tsamoura, E.; Carral, D.; Malizia, E.; and Urbani, J. 2021.
Materializing knowledge bases via trigger graphs. Proc.
VLDB Endow. 14(6):943–956.
Urbani, J.; Kr¨otzsch, M.; Jacobs, C. J. H.; Dragoste, I.; and
Carral, D. 2018. Efﬁcient model construction for horn logic
with vlog - system description. In IJCAR, volume 10900 of
Lecture Notes in Computer Science, 680–688. Springer.

