Contributions to Link Key Discovery in RDF Datasets
Nacira Abbas, Alexandre Bazin, Jérôme David, Amedeo Napoli

To cite this version:

Nacira Abbas, Alexandre Bazin, Jérôme David, Amedeo Napoli. Contributions to Link Key Discovery
in RDF Datasets. SFC 2022 - 27e Rencontres de la Société Francophone de Classification, Sep 2022,
Université Lumière - Lyon 2, France. ￿hal-04055171￿

HAL Id: hal-04055171

https://inria.hal.science/hal-04055171

Submitted on 1 Apr 2023

HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.

Contributions to Link Key Discovery in RDF
Datasets

Nacira Abbas1, Alexandre Bazin2, Jérôme David3, and Amedeo Napoli1

1 Université de Lorraine, CNRS, Inria, Loria, F-54000 Nancy, France
Nacira.Abbas@inria.fr, Amedeo.Napoli@loria.fr
2 Université de Montpellier, CNRS, LIRMM, F-34095 Montpellier, France
Alexandre.Bazin@umontpellier.fr
3 Université Grenoble Alpes, Inria, CNRS, Grenoble INP, LIG, F-38000 Grenoble,
France Jerome.David@inria.fr

Abstract. A link key between two RDF datasets D1 and D2 is a set of
pairs of properties allowing to identify pairs of individuals, say x1 in D1
and x2 in D2, which can be materialized as a x1 owl:sameAs x2 identity
link. There exist several ways to mine such link keys but no one takes
into account the fact that owl:sameAs is an equivalence relation, which
leads to the discovery of non-redundant link keys. Accordingly, in this
paper, we present the link key discovery based on Pattern Structures
(PS). PS output a pattern concept lattice where every concept has an
extent representing a set of pairs of individuals and an intent representing
the related link key candidate. Then, we discuss the equivalence relation
induced by a link key and we introduce the notion of non-redundant link
key candidate.

Keywords: Linked Data · RDF · Link Key · Formal Concept Analysis
· Pattern Structures.

1

Introduction

In this position paper we are interested in data interlinking which goal is to dis-
cover identity links across two RDF datasets over the web of data [6,9]. The same
real world entity can be represented in two RDF datasets by diﬀerent subjects in
RDF triples (subject,property,value) (instead of “object” usually used in RDF
data we will use “value”). It is important to be able to detect such identities, for
example using rules expressing suﬃcient conditions for two subjects to be identi-
cal. A link key takes the form of two sets of pairs of properties associated with a
pair of classes. The pairs of properties express suﬃcient conditions for two sub-
jects, from the associated pair of classes, to be the same. An example of a link key
is ({(designation,title)},{(designation,title),(creator,author)},(Book,Novel))
which states that whenever an instance a of the class Book has the same (non
empty) values for the property designation as an instance b of the class Novel
for the property title (universal quantiﬁcation), and that a and b share at least
one value for the properties creator and author (existential quantiﬁcation), then

2

N. Abbas et al.

a and b denote the same entity, i.e., an owl:sameAs relation can be established
between a and b.

A link key can be understood as a “closed set” in the sense that it is maximal
w.r.t. the set of pairs of individuals to which it applies. This was ﬁrstly discussed
in [3] and then extended in [4]. Hence the question of relying on Formal Concept
Analysis (FCA [8]) to discover link keys is straightforward as FCA is based on
a closure operator. Then, given two RDF datasets, FCA is applied in [4] to a
binary table where rows correspond to pairs of individuals and columns to pairs
of properties. The intent of a concept is a link key candidate which should be
validated thanks to suitable quality measures. The extent of the concept is the
set of identity links between individuals. Furthermore, a generalization of the
former approach proposed in [2] is based on pattern structures [7] and takes into
account diﬀerent pairs of classes at the same time in the discovery of link keys.
Link key candidates over two RDF datasets have to generate diﬀerent and
maximal link sets. However it appears that two diﬀerent link key candidates may
generate the same link set. This means that there exists some redundancy be-
tween the two link key candidates, that they should be considered as equivalent
and merged. This can be achieved by looking at owl:sameAs which is an equiv-
alence relation stating that two individual should be identiﬁed. The owl:sameAs
relation generates partitions among pairs of individuals that can be used to
detect redundant link key candidates and thus reduce their number, i.e., two
candidates relying on the same partition are declared as redundant and thus
merged.

Here after we present the discovery of link key candidates within the frame-
work of pattern structure. Then, we introduce the notion of non-redundant link
key candidate based on the equivalence relation induced by a link key candi-
date. Finally, we discuss how these candidates can be merged to reduce the
search space of link keys. This position paper is based on the two publications
[2,1] where all details regarding the present approach are available.

2 Basics and Notations

2.1 RDF data

Deﬁnition 1 (RDF dataset).

Let U be a set of IRIs (Internationalized Resource Identiﬁer), B a set of
blank nodes and L a set of literals. An RDF dataset is a set of triples (s, p, v) ∈
(U ∪ B) × U × (U ∪ B ∪ L).

Given an RDF dataset D, we have the following particular sets:

I(D) = {s | ∃p, v (s, p, v) ∈ D} the set of individual identiﬁers,
P (D) = {p | ∃s, v (s, p, v) ∈ D} the set of property identiﬁers,
C(D) = {c | ∃s (s, rdf:type, c) ∈ D} the set of class identiﬁers, where a triple
(s, rdf:type, c) means that the subject s is an instance of the class c.
I(c) = {s | (s, rdf:type, c) ∈ D} the set of instances of c ∈ C(D),
p(s) = {v | (s, p, v) ∈ D} is the set of values related to s through p.

Contributions to Link Key Discovery in RDF Datasets

3

c1

a1

a2

a3

a4

a5

p
1
p 2
p2

p 1
p2
p1

p1
p2

p3

p
4

p4

p
3

v1

v2

v3

v4

v5

v6

v7

v8

v9

v10

v11
v12

v13

c2

b1

b2

b3

b4

b5

q1
q2

q 1
q2

q2
q 1

q1
q 2
q
2

q 3

q 4
q 4

q

3

D1

D2

Fig. 1. On the left, dataset D1 includes instances of class c1 while on the right dataset
D2 includes instances of class c2.

An identity link is an RDF triple (a, owl:sameAs, b) stating that the IRIs a and
b refer to the same real-world entity.

Fig. 1 represents two RDF datasets D1 and D2, where P (D1) = {p1, p2, p3, p4}
and P (D2) = {q1, q2, q3, q4}. Then C(D1) = {c1} and C(D2) = {c2} with
I(c1) = {a1, a2, a3, a4, a5} and I(c2) = {b1, b2, b3, b4, b5}. For example, the set of
values of b3 for the property q2 is q2(b3) = {v8, v9}.

2.2 Link Keys

Deﬁnition 2 (Link key expression, link key candidate).

Let D1 and D2 be two RDF datasets, k = (Eq, In, (c1, c2)) is a link key
expression (over D1 and D2) iﬀ In ⊆ P (D1) × P (D2), Eq ⊆ In, c1 ∈ C(D1)
and c2 ∈ C(D2).
The set of links L(k) (directly) generated by k is the set of pairs of instances
(a, b) ∈ I(c1) × I(c2) satisfying:

(i) For all (p, q) ∈ Eq, p(a) = q(b) and p(a) (cid:54)= ∅,
(ii) for all (p, q) ∈ In \ Eq, p(a) ∩ q(b) (cid:54)= ∅.

A link key expression k1 = (Eq1, In1, (c1, c2)) is a “link key candidate” if:

(iii) L(k1) (cid:54)= ∅,
(iv) k1 is maximal i.e. there does not exist another link key expression k2 =

(Eq2, In2, (c1, c2)) such that Eq1 ⊂ Eq2, In1 ⊂ In2, and L(k1) = L(k2).

4

N. Abbas et al.

The number of link key expressions may be exponential w.r.t. the number of
properties. Then link key discovery algorithms only consider link key candidates
which are link key expressions generating at least one link and that are maximal
w.r.t. the set of links they generate.

3 Link Key Discovery

Here after we assume that all link key expressions are deﬁned on the same pair of
datasets D1 and D2 w.r.t. one pair of classes, yielding link key expressions of the
form k = (Eq, In, (c1, c2)). We show how link keys can be discovered within the
formalism of pattern structures and then we discuss the notion of non-redundant
link keys.

Example 1. Let us consider the pattern structure (G, (E, (cid:117)), δ) displayed in Ta-
ble 1. The details for building this table and the related PS lattice are given
in [2].

The rows termed “PS objects” correspond to the set of objects G of the
pattern structure and include pairs of related instances. The set of descriptions
(E, (cid:117)) includes all possible pairs of properties preceded either by ∀ or ∃. The
mapping δ relates a pair of instances (a, b) ∈ I(c1) × I(c2) to a description as
follows: (i) δ(a, b) includes ∀(p, q) whenever p(a) = q(b) and p(a) (cid:54)= ∅, (ii) δ(a, b)
includes ∃(p, q) whenever p(a) ∩ q(b) (cid:54)= ∅. Then the descriptions correspond to
link key expressions (Eq, In) w.r.t. the pairs of classes (c1, c2). It should be
noticed that it is possible to simultaneously work with several pairs of classes as
explained in [2].

We have that δ(a1, b1) = {∃(p1, q1), ∃(p2, q2)} because p1(a1) ∩ q1(b1) (cid:54)= ∅
and p2(a1) ∩ q2(b1) (cid:54)= ∅ while δ(a2, b1) = {∃(p1, q1)} because p1(a2) ∩ q1(b1) (cid:54)= ∅.
Then δ(a1, b1) (cid:117) δ(a2, b1) = {∃(p1, q1)} and thus δ(a2, b1) (cid:118) δ(a1, b1). This can
be read in the pattern concept lattice where the pattern concept pc5 is subsumed
by the pattern concept pc4, i.e., the extent of pc5 {(a1, b1), (a2, b2), (a3, b3)} is
included in the extent of pc4 {(a1, b1), (a2, b1), (a2, b2), (a3, b3)}, while the intent
{∃(p1, q1)} of pc4 is included in the intent of pc5, {∃(p1, q1), ∃(p2, q2)}.

The set of all pattern concepts is organized within the pattern concept lat-
tice called lkps-lattice and displayed in Fig. 2. Moreover, all potential link key
candidates are lying in the intents of the pattern concepts in the lattice. The
corresponding set of link key candidates is denoted by lkc.

Let us consider the lkps-lattice and pc = (L(k), k) a pattern concept, where
the extent L(k) corresponds to the set of links generated by k, and the intent
k corresponds to a link key candidate. Let I denotes the set of instances I =
I(c1) ∪ I(c2) and the binary relation (cid:39)k⊆ I × I such as (a, b) ∈ L(k) → a (cid:39)k b.
The interpretation of a (cid:39)k b is: "k states that there exists a owl:sameAs relation
between a and b". Actually (cid:39)k is an equivalence relation based on the fact that
owl:sameAs itself is an equivalence relation. We say that k induces the equivalence
relation (cid:39)k over I. Moreover (cid:39)k forms a partition over I where each element
of this partition is an equivalence class. In fact the (cid:39)k equivalence relation will

Contributions to Link Key Discovery in RDF Datasets

5

PS objects (g)
(a1, b1)
(a1, b2)
(a2, b1)
(a2, b2)
(a3, b3)
(a4, b4)
(a4, b5)
(a5, b4)
(a5, b5)

descriptions (δ(g))
{∃(p1, q1), ∃(p2, q2)}
{∃(p2, q2)}
{∃(p1, q1)}
{∃(p1, q1), ∃(p2, q2)}
{∀(p1, q1), ∃(p1, q1), ∃(p2, q2)}
{∀(p3, q3), ∃(p3, q3)}
{∀(p4, q4), ∃(p4, q4)}
{∀(p4, q4), ∃(p4, q4)}
{∀(p3, q3), ∃(p3, q3)}

Table 1. The pattern structure related to link key discovery over c1 and c2 introduced
in Fig. 1.

pc0

I(c1 ) × I(c2)

∅

pc1

pc2

{(a4 , b5), (a5, b4)}

{(a4, b4), (a5, b5)}

k1 = {∀(p4, q4), ∃(p4, q4)}

k2 = {∀(p3, q3), ∃(p3, q3)}

pc3

pc4

{(a1, b1), (a1, b2 ),
(a2 , b2), (a3, b3)}

{(a1, b1), (a2, b1 ),
(a2, b2), (a3, b3)}

k3 = {∃(p2, q2)}

k4 = {∃(p1 , q1)}

pc5

{(a1, b1 ), (a2, b2), (a3, b3)}

k5 = {∃(p1, q1), ∃(p2, q2)}

pc6

{(a3 , b3)}

k6 = {∀(p1, q1), ∃(p1 , q1 ),
∃(p2, q2)}

pc7

∅

P (D1 ) × P (D2)

Fig. 2. The pattern concept intents in the pattern concept lattice lkps-lattice include
the complete set of link key candidates.

help us to build more concise set of link key candidates since it allows to identify
non-redundant link key candidates termed nr-lkc. A link key candidate k1 is a
nr-lkc in lkc if there is no other candidate k2 in lkc such that (cid:39)k1 and (cid:39)k2
form the same partition. Otherwise, k1 is redundant.

In Fig. 2, it can be observed that (cid:39)k3 and (cid:39)k4 form the same partition,
namely {(a1, b1, a2, b2), (a3, b3)} (it should be noticed that singletons are omitted
for the sake of readability). Then the link key candidates k3 and k4 are redundant.
By contrast, k1 is a nr-lkc because there is no other candidate k in lkc such
that (cid:39)k1 and (cid:39)k form the same partition.

Let us brieﬂy explain how (cid:39)k3 and (cid:39)k4 are inducing the same partition,
namely {(a1, b1, a2, b2), (a3, b3)}. The extent of k3 in lkps-lattice is given by
{(a1, b1), (a1, b2), (a2, b2), (a3, b3)}. By transitivity and symmetry of owl:sameAs,
we have that (a1, b2) and (b2, a2) yields (a1, a2), then (a2, a1) and (a1, b1) yields

6

N. Abbas et al.

(a2, b1), and ﬁnally (b1, a2) and (a2, b2) yields (b1, b2) and the complete graph
between (a1, a2, b1, b2). The same thing applies when we consider k4 instead of
k3. This intuitively shows how (cid:39)k3 and (cid:39)k4 are inducing the same partition.

One main straightforward application of identifying nr-lkc is the ability to
reduce the search space of link keys since the set of nr-lkc is included in lkc.
Indeed, this can be seen as a reﬁnement where redundant link key candidates
inducing the same partition are merged. For example, since (cid:39)k3 and (cid:39)k4 form
the same partition, then, k3 and k4 can be merged into a nr-lkc k34 = {k3, k4}.
Among the perspectives is to consolidate the theory and practice of link key
discovery based on partition pattern structures initially introduced for mining
functional dependencies in [5].

References

1. Abbas, N., David, J., Bazin, A., Napoli, A.: A Study of the Discovery and Re-
dundancy of Link Keys Between Two RDF Datasets Based on Partition Pattern
Structures. In: Proceedings of CLA. CEUR Workshop Proceedings (2022)

2. Abbas, N., David, J., Napoli, A.: Discovery of Link Keys in RDF Data Based on
Pattern Structures: Preliminary Steps. In: Proceedings of CLA. pp. 235–246. CEUR
Workshop Proceedings 2668 (2020)

3. Atencia, M., David, J., Euzenat, J.: Data interlinking through robust linkkey ex-

traction. In: Proceedings of ECAI. pp. 15–20 (2014)

4. Atencia, M., David, J., Euzenat, J., Napoli, A., Vizzini, J.: Link key candidate
extraction with relational concept analysis. Discrete Applied Mathematics 273, 2–
20 (2020)

5. Baixeries, J., Kaytoue, M., Napoli, A.: Characterizing functional dependencies in
formal concept analysis with pattern structures. Annals of Mathematics and Arti-
ﬁcial Intelligence 72, 129–149 (2014)

6. Ferrara, A., Nikolov, A., Scharﬀe, F.: Data Linking for the Semantic Web. Interna-

tional Journal of Semantic Web and Information Systems 7(3), 46–76 (2011)

7. Ganter, B., Kuznetsov, S.O.: Pattern Structures and Their Projections. In: Proceed-
ings of the International Conference on Conceptual Structures (ICCS). pp. 129–142.
LNCS 2120, Springer (2001)

8. Ganter, B., Wille, R.: Formal Concept Analysis: Mathematical Foundations.

Springer (1999)

9. Nentwig, M., Hartung, M., Ngonga Ngomo, A.C., Rahm, E.: A survey of current

Link Discovery frameworks. Semantic Web Journal 8(3), 419–436 (2017)

